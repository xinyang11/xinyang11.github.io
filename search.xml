<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解异常机制</title>
      <link href="2021/10/16/Java/%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/"/>
      <url>2021/10/16/Java/%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常机制"><a href="#Java异常机制" class="headerlink" title="Java异常机制"></a>Java异常机制</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><p>Java 中的异常划分为两种：运行时异常和编译时异常。</p><p>Java中使用Throwable类来表示异常。</p><p>Throwable类下主要划分三个子类：被检查的异常（checkedException）、错误（Error）、运行时异常（RuntimeException）</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20211016133158239.png" alt="image-20211016133158239"></p><p>Exception子类中除了RuntimeException之外都可以作为被检查时异常或者编译时异常。</p><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常指定是在程序运行过程中才会出现的异常。</p><p>常见的包括：</p><p>ClassCastException（类转换异常）</p><p>IndexOutOfBoundsException（数组越界）</p><p>NullPointerException（空指针异常）</p><h3 id="被检查异常"><a href="#被检查异常" class="headerlink" title="被检查异常"></a>被检查异常</h3><p>一般在程序编写时，我们对于可能出现的异常会进行try/catch捕获或者throws抛出。由于没有捕获的异常导致编译无法通过，此时出现的异常即为被检查异常。</p><p>常见的包括：</p><p>CloneNotSupportedException，当通过clone()接口去克隆一个对象，而该对象对应的类没有实现Cloneable接口，就会抛出CloneNotSupportedException异常。</p><p>被检查异常通常都是可以恢复的。 如： IOException FileNotFoundException SQLException 被检查的异常适用于那些不是因程序引起的错误情况，比如：读取文件时文件不存在引发的FileNotFoundException 。</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>Error类及其子类。</p><p> 特点 : 和运行时异常一样，编译器也不会对错误进行检查。当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。程序本身无法修复这些错误的。</p><p>常见的包括：</p><p>VirtualMachineError就属于错误。出现这种错误会导致程序终止运行。</p><p>OutOfMemoryError、ThreadDeath。 Java虚拟机规范规定JVM的内存分为了好几块，比如堆，栈，程序计数器，方法区等。</p><h2 id="二、try-catch-finally-运行时执行顺序"><a href="#二、try-catch-finally-运行时执行顺序" class="headerlink" title="二、try/catch/finally 运行时执行顺序"></a>二、try/catch/finally 运行时执行顺序</h2><p>正常执行顺序我们一般理解为先执行try，如果发生异常处理catch。最终无论是否异常都try/catch执行完后执行finally代码块部分。</p><p>特殊情况：try/catch中直接return</p><p>此时finally仍然需要执行，因此在具体实现过程中会有如下处理流程：</p><ol><li>将try/catch中待return的值或表达式暂时缓存</li><li>执行finally代码块</li><li>返回缓存中的值</li></ol><p>这里使用者可能会出现如下一些疑问：</p><p>1、 finally 中直接return</p><p>一般编程时肯定不推荐这么写，但如果真的出现这种情况，程序会直接返回。</p><p>2、finally 中对try/catch代码块return的值做出了一些修改</p><p>在finally中对最终返回值做的修改都不会反映到返回上，原因是返回的仅是缓存中的值。</p><h2 id="三、Throw与Throws的区别"><a href="#三、Throw与Throws的区别" class="headerlink" title="三、Throw与Throws的区别"></a>三、Throw与Throws的区别</h2><ul><li>throw用于方法内部，throws用于方法声明上</li><li>throw后跟异常对象，throws后跟异常类型</li><li>throw后只能跟一个异常对象，throws后可以一次声明多种异常类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Synchronize关键字</title>
      <link href="2021/09/28/Java/synchronize%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
      <url>2021/09/28/Java/synchronize%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><h3 id="1-1-Synchronized是什么"><a href="#1-1-Synchronized是什么" class="headerlink" title="1.1 Synchronized是什么"></a>1.1 Synchronized是什么</h3><p>synchronized <a href="https://baike.baidu.com/item/关键字/7105697">关键字</a>，代表这个方法加锁,相当于不管哪一个线程（例如线程A），运行到这个方法时,都要检查有没有其它线程B（或者C、 D等）正在用这个方法(或者该类的其他同步方法)，有的话要等正在使用synchronized方法的线程B（或者C 、D）运行完这个方法后再运行此线程A,没有的话,锁定调用者,然后直接运行。它包括两种用法：synchronized 方法和 synchronized 块。</p><p>Java语言的关键字，可用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这段代码。当两个并发线程访问同一个<a href="https://baike.baidu.com/item/对象object/22817693">对象object</a>中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。然而，当一个线程访问object的一个加锁代码块时，另一个线程仍可以访问该object中的非加锁代码块。</p><h3 id="1-2-Synchronized解决什么问题"><a href="#1-2-Synchronized解决什么问题" class="headerlink" title="1.2 Synchronized解决什么问题"></a>1.2 Synchronized解决什么问题</h3><p><strong>是并发问题的常用解决方案</strong>。</p><p>可以应用于：</p><ol><li>同步普通方法，锁当前对象</li><li>同步静态方法，锁类</li><li>同步代码块，锁指定对象</li></ol><h2 id="二、Synchronized核心设计与实现"><a href="#二、Synchronized核心设计与实现" class="headerlink" title="二、Synchronized核心设计与实现"></a>二、Synchronized核心设计与实现</h2><blockquote><p><code>JVM</code> 是通过进入、退出对象监视器( <code>Monitor</code> )来实现对方法、同步块的同步的。</p></blockquote><p>jvm 中对象内存布局划分为以下区域：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/object.png" alt="object"></p><p>其中64 位虚拟机 Mark Word 是 64bit 其结构如下：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210928125018152.png" alt="image-20210928125018152"></p><p>重量级锁中的指针本质执行的就是ObjectMonitor（monitor）的对象初始地址，以此实现对象与监视器之间的关联。</p><h3 id="ObjectMonitor-数据结构"><a href="#ObjectMonitor-数据结构" class="headerlink" title="ObjectMonitor 数据结构"></a>ObjectMonitor 数据结构</h3><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/103DF8C514E5BD144A30459431B01791.jpg" alt="img"></p><p>进入同步代码块时，线程从对象头中获取对应monitor地址并访问。</p><ol><li>线程首先进入到entrylist队列中</li><li>出现线程检测到monitor中的owner字段为空，将owner字段设置为当前线程，count+1。</li><li>其他线程检测owner与当前线程id是否一致，不一致则直接进入阻塞状态</li><li>获取monitor对象的线程执行结束后释放monitor对象，owner设置为null</li><li>若获取到monitor对象执行了wait方法，当前线程进入等待状态，进入WaitSet队列中并释放锁，owner设置为null，count-1；</li><li>若其他线程调用该对象的notify、notifyAll方法，可以唤醒waitSet队列中的某个线程，该线程再次尝试获取monitor锁。</li></ol><h3 id="JVM对Synchronized关键字的优化"><a href="#JVM对Synchronized关键字的优化" class="headerlink" title="JVM对Synchronized关键字的优化"></a>JVM对Synchronized关键字的优化</h3><blockquote><p>Synchronized 在jdk1.6时发生了极大地优化，在它的底层引入了偏向锁和轻量级锁</p></blockquote><h4 id="锁清除"><a href="#锁清除" class="headerlink" title="锁清除"></a>锁清除</h4><p>编译器会清除一些使用了同步，但同步块中没有涉及共享数据的锁，从而减少多余的同步。</p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>若有一系列操作，反复地对同一把锁进行上锁和解锁操作，编译器会扩大这部分代码的同步块的边界，从而只使用一次上锁和解锁操作。</p><p>底层的实现可以通过JVM选项设置，视具体的应用场景选择合适的锁膨胀过程。</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>刚开始并发量可能并不大时，Synchronized 底层实现为偏向锁。它的本质是乐观锁，即认为不会出现资源竞争。线程获得锁的时候会在锁上加一个标志码01，表示当前为偏向模式。此时线程不会进入CAS操作更不会进行互斥同步。它的实现就类似于未加锁的状态。一旦有第二个线程尝试获取锁，偏向锁便会立刻升级为轻量级锁。</p><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>本质为乐观锁，底层实现为CAS，不同的是它使用的是自适应自旋。即当自旋过程成功获得锁时，自旋尝试次数扩大；反之，自旋尝试次数减少。同样当多个线程竞争统一资源时，轻量级锁会膨胀为重量级锁。</p><h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4><p>本质为悲观锁，实现互斥同步。</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><p><a href="https://xiaomi-info.github.io/2020/03/24/synchronized/">https://xiaomi-info.github.io/2020/03/24/synchronized/</a></p><p><a href="https://z.itpub.net/article/detail/33721F26A2BB8EFDB4AA6BE88FD31329">https://z.itpub.net/article/detail/33721F26A2BB8EFDB4AA6BE88FD31329</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo</title>
      <link href="2021/08/29/%E4%B8%AD%E9%97%B4%E4%BB%B6/Dubbo/"/>
      <url>2021/08/29/%E4%B8%AD%E9%97%B4%E4%BB%B6/Dubbo/</url>
      
        <content type="html"><![CDATA[<p>RPC</p><p>远程过程调用的目的就是为了调用远程非本地的方法。此时RPC要求我们在调用远程方法的时候最好能像调用本地方法那样方便。但是要实现这一点可不简单。我们必须要对许多功能点进行封装。包括：</p><ol><li>本地与远程之间要能互相通信，因此需要能获取到彼此的网络地址。</li><li>网络请求的封装。</li><li>为了保证容错需要加入重试机制。</li><li>对请求参数进行的序列化与反序列化格式约定需要统一。</li><li>为了保障服务正常调用还需要加入监控措施。</li></ol><p>要满足这些需求可不容易，而且我们也不可能在每一个微服务上都写这些东西。为此RPC框架应运而生。他本质就是封装了这些个功能。同时通过代理的方式隐藏了内部的具体实现。用户只需要像调用本地方法那样调用远程方法就行了。</p><p>RPC框架设计点：</p><ol><li>注册中心</li><li>容错机制（远程调用，必然通过网络。而网络并不可靠，可能需要重试）</li><li>记录调用次数</li><li>协议约定，序列化格式约定。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拾贝商城系统</title>
      <link href="2021/08/29/%E9%A1%B9%E7%9B%AE/calypso/"/>
      <url>2021/08/29/%E9%A1%B9%E7%9B%AE/calypso/</url>
      
        <content type="html"><![CDATA[<h3 id="拾贝商城系统"><a href="#拾贝商城系统" class="headerlink" title="拾贝商城系统"></a>拾贝商城系统</h3><p>calypso/inn   reborn</p><h5 id="主业务"><a href="#主业务" class="headerlink" title="主业务"></a>主业务</h5><p>一、批次创建流程</p><ol><li><p>创建营销方案，cardplan 新增一条记录</p></li><li><p>新建发放批次，参数校验。验证通过新增一条批次记录。</p></li><li><p>针对方案验证类型将批次号、批次id、文件发送给异步任务处理。目前支持手机验证等。</p></li><li><p>异步任务进行文件合法校验。</p></li><li><p>校验通过：</p><ul><li><p>若为手机验证方式</p><p>校验该用户是否已注册，若还没注册则注册该用户。（查user表）</p></li><li><p>若非手机验证方式</p><p>针对不同验证模式进行判断校验</p></li></ul></li><li><p>导入金额计算</p></li><li><p>批次更新，方案更新。对于手机号验证的直接发放卡券到用户卡券usercard表。若非手机号验证类型卡券存到待发放卡券中，记录表为card_tmp</p></li><li><p>此时卡券批次成功创建并且状态为待发送。走卡券批次发送流程，卡券实际发送到用户卡券user_card中。（此时仅库中留存数据，由于状态为待发送，用户界面无法看到对应的卡券）</p></li></ol><p>二、卡券实际发送流程</p><ol><li><p>后台批次创建成功后点击发送，走send流程</p></li><li><p>根据不同卡券方案验证方式走不同卡券发送流程。目前仅三种方向：</p><p><strong>手机验证方式</strong></p><ul><li>卡券批次状态变更发送中</li><li>开启异步线程处理卡券发送任务</li></ul><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210630104157077.png" alt="image-20210630104157077"></p><ul><li>实际卡券发送事务处理。包括卡券批次、用户卡券状态变更为已发送以及账户信息变更（公司转账至机构）</li><li>卡券发送消息：针对类型为门店核销的卡券进行消息异步发送。交由mq将门店核销类型的用户卡券发送至门店系统中（inn）。此时在门店系统中保存为表puchase（采购单）数据。作为门店内部使用的采购单code，同时发送消息至商城系统留存对应code记录到litemall_scp_byinn_exchange表中。</li></ul><p>note：litemall_scp_byinn_exchange 表中的code用于门店核销</p><ul><li>最后发送短信信息到所有接收卡券的用户</li></ul><p><strong>手机验证与主动领取</strong></p><ul><li>卡券批次与待发放卡券状态更新为已发送</li><li>短信发送</li></ul><p><strong>其他</strong></p><ul><li>仅卡券批次与待发放卡券状态更新为已发送</li></ul></li></ol><p>三、用户登录流程</p><p>当前用户登录分两种方式</p><ol><li><p>手机号登录<br>手机号登录方式通过输入手机号及对于验证码完成。</p><p>实现细节：本地生成随机码，通过sms服务将该随机码发送给用户。同时将手机号和验证码作为key-value键值对存储到分布式缓存中。输入验证码后的调用通过缓存获取与用户输入校验即可。（额外流程包括token生成、用户名查询等）</p></li><li><p>车牌号+xxxx验证登录（包括vin码，身份证，保单号）</p><p>车牌号登录基于待发放卡券的发送过程。由于保险公司（客户方customer）有时并不希望我们获得到他们的用户手机号信息，因此我们需要提供车牌号的登录模式。</p><ul><li>输入车牌号后，通过车牌号查询待发放卡券表。获取到对应卡券校验类型。若没有查找到有对应的卡券则返回0.</li><li>成功获取到validateType后，输入卡券发送时的用户身份证后6位经校验通过后即可领取成功。</li><li>成功后走绑定流程（有账号的登录，没账号的注册）</li><li>同时再走一遍<code>卡券发送消息：针对类型为门店核销的卡券进行消息异步发送。交由mq将门店核销类型的用户卡券发送至门店系统中（inn）。此时在门店系统中保存为表puchase（采购单）数据。作为门店内部使用的采购单code，同时发送消息至商城系统留存对应code记录到litemall_scp_byinn_exchange表中。</code></li></ul></li><li><p>手机号+直接领取类型</p><p>此时不走上面的请求因此用户登录后并没有直接获取到卡券。需要在服务领取页面获取手动进行领取（权益领取）。</p></li></ol><p>四、门店核销流程</p><p><strong>手机号核销</strong>  InnPurchaseController</p><p>主流程在于门店项目中（inn）。</p><ol><li>/byMobil 首先通过门店核销单(purchase)以及门店服务(service_store)关联判断该用户是否有可用卡券（purchase也可以理解为当前手机号下的用户可用的卡券/服务）。并返回这些可选的用户卡券。</li><li>/validate 选择前面返回的可核销的卡券</li><li>/orderInfoConfirm 订单信息确认业。显示前面所选的各服务详情，以及数量总价信息。</li><li>/makeUp 提交补充信息。提交同时更新核销单兑换券状态为已使用；订单状态为已完成；同时关闭该用户在当前门店下的所有其他预约单。发起mq交由calypso对用户卡券进行状态变更。发送短信给客户。</li><li>当上传订单图片后订单状态变更为待审核</li><li>此时可以回到后台管理calypso项目，进行三类操作<ul><li>订单审核。走/inn/order/audit。</li><li>订单取消 /closeOrder，用户卡券状态变更为取消</li><li>订单结算 /settle ，用户卡券状态变更为已使用</li></ul></li></ol><p><strong>扫码核销</strong></p><p>/byCode ,大致流程与上述一致。</p><p>五、门店预约流程</p><p>/wx/reserveOrder/create 用户发起预约请求，经过一系列业务数据校验后，提交给inn。inn端通过事件机制更新预约单状态。</p><p>手动兑换</p><p>在线兑换</p><p>拾贝代发</p><p>兑换：通过source_id、status(已发放)查scp_stock，有则返回；若无，则通过goods_id,status(未发放)查scp_stock,有则返回并状态为已发放。将</p><p>门店核销</p><p>六、结算流程</p><p>service</p><p>supplied_good</p><p>card_tmp</p><p>card_config</p><p>后台页面调整：</p><ol><li>新增卡券，用户卡券、待发放卡券添加新的列表示卡券类型。同时新增对于检索条件。</li><li>针对新增的抵扣券类，创建另一套订单创建和核销逻辑。</li><li>车主会H5我的服务</li><li>，，，</li></ol><p><strong>设计思路</strong></p><p>原先的卡券发放形式都是基于险企的方案进行发送的。如今我们希望能由本系统创立特定的方案来发送卡券。</p><p>改动如下：</p><p>由于原来的方案是与险企强关联的。为了解除这种关联，需要建立新的发送体系。</p><p>结构化抽象：</p><p>将整体的流程抽象为一个活动。</p><p>活动由一下结构组成：</p><ol><li>规则</li><li>校验</li><li>通知</li><li>后续处理</li></ol><p>无论是方案还是批次的建立都作为一种条件</p><p>活动类型 &lt;==&gt; 规则</p><p>规则</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210803180244780.png" alt="image-20210803180244780"></p><p>钉钉机器人：命令模式</p><p>sql优化</p><p>活动发放</p><p>文件异步导出——mq+模板模式</p><p>转账</p><p>核销</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解线程池</title>
      <link href="2021/08/29/Java/ThreadPoolExcutors/"/>
      <url>2021/08/29/Java/ThreadPoolExcutors/</url>
      
        <content type="html"><![CDATA[<p>阿里规范：推荐使用ThreadPoolExcutor手动创建线程池</p><p>ThreadPoolExcutor.execute(runnable)</p><p>作为使用者我们只需要将要执行的线程交给excutor处理就可以了。具体的处理流程被封装在了内部。查阅源码可知，总的流程经过一下三步：</p><ol><li>检查当前正在运行的线程数是否小于核心线程数。若成立，尝试开启新线程作为第一个任务运行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = ctl.get();</span><br><span class="line"><span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">    <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    c = ctl.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在执行器内部线程相关信息都被存储在了ctl中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>为什么一个小小的int类型可以存储每个线程的状态信息呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><p>本质是位运算，将关键信息存储在了位中，充分利用了资源。</p><p>java中一个int类型占有4个字节，及32位。</p><p>CAPACITY : 0001 1111 1111 1111 1111 1111 1111 1111</p><p>~CAPACITY : 1010 0000 0000 0000 0000 0000 0000 0000</p><p>-1 RUNNING : 1010 0000 0000 0000 0000 0000 0000 0000</p><p>0  SHUTDOWN: 0000 0000 0000 0000 0000 0000 0000 0000</p><p>1  STOP:           0010 0000 0000 0000 0000 0000 0000 0000</p><p>2  TIDYING:      0100 0000 0000 0000 0000 0000 0000 0000</p><p>3  TERMINATED: 0110 0000 0000 0000 0000 0000 0000 0000</p><p>实质就是后29位与运算</p><p>每一次addWorker成功，就更新ctl的值（自增1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    .....省略....</span><br><span class="line">    <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">        <span class="keyword">break</span> retry;</span><br><span class="line">    .....省略....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to CAS-increment the workerCount field of ctl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndIncrementWorkerCount</span><span class="params">(<span class="keyword">int</span> expect)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ctl.compareAndSet(expect, expect + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ctl加1后，对应后29为+1，count+1；workers+1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set containing all worker threads in pool. Accessed only when</span></span><br><span class="line"><span class="comment"> * holding mainLock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br></pre></td></tr></table></figure><ol><li>符合第一条件的线程直接就执行了，不符合走后续流程，判断当前任务是否能成功入队，为了防止add前后的线程或者线程池的状态变更，因此同样需要double-check。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">    <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">    <span class="comment">//double-check</span></span><br><span class="line">    <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">        reject(command);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">       <span class="comment">// false，比较的是最大线程数，addWorker执行的目的变成了状态的更新</span></span><br><span class="line">        addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The queue used for holding tasks and handing off to worker</span></span><br><span class="line"><span class="comment"> * threads.  We do not require that workQueue.poll() returning</span></span><br><span class="line"><span class="comment"> * null necessarily means that workQueue.isEmpty(), so rely</span></span><br><span class="line"><span class="comment"> * solely on isEmpty to see if the queue is empty (which we must</span></span><br><span class="line"><span class="comment"> * do for example when deciding whether to transition from</span></span><br><span class="line"><span class="comment"> * SHUTDOWN to TIDYING).  This accommodates special-purpose</span></span><br><span class="line"><span class="comment"> * queues such as DelayQueues for which poll() is allowed to</span></span><br><span class="line"><span class="comment"> * return null even if it may later return non-null when delays</span></span><br><span class="line"><span class="comment"> * expire.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br></pre></td></tr></table></figure><ol><li>如果不能入队，可以判断要么线程池处于shutdown要么线程已饱和，因此走拒绝策略。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">    reject(command);</span><br></pre></td></tr></table></figure><p><img src="https://p0.meituan.net/travelcube/77441586f6b312a54264e3fcf5eebe2663494.png" alt="图2 ThreadPoolExecutor运行流程"></p><p>写到这里其实已经发现，ThreadPoolExcutor管理多线程的其中一种手段：线程与任务解耦。</p><p>我的理解是任务负责具体的执行，线程作为一个运行单位存储在阻塞队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//尝试获取任务，若当前没有任务待执行时，从队列中获取线程作为任务执行</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的工作流程，从队列中重复获取线程并执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体流程：</p><ol><li><p>我们往线程池放线程</p></li><li><p>一开始线程池将线程作为任务去处理</p><ul><li><p>任务直接执行，走runWorker方法。</p></li><li><p>任务执行完成后，尝试获取新的任务。</p></li><li><p>获取渠道在于线程队列中。根据设置的存活时间，选择延时获取或者阻塞获取队列中的线程。获取成功则执行，获取失败退出任务并更新系列信息包括ctl、worker。</p></li></ul></li><li><p>当任务数大于核心线程数时，线程不能再直接成为任务了，而是放入到阻塞队列中。此时校验线程数是否小于最大线程数。</p></li><li><p>若大于最大线程数或线程池状态异常走拒接策略。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (completedAbruptly) <span class="comment">// If abrupt, then workerCount wasn&#x27;t adjusted</span></span><br><span class="line">        decrementWorkerCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        completedTaskCount += w.completedTasks;</span><br><span class="line">        workers.remove(w);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tryTerminate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!completedAbruptly) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty())</span><br><span class="line">                min = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) &gt;= min)</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></span><br><span class="line">        &#125;</span><br><span class="line">        addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓的核心线程数本质就是控制任务数量保持不被移除引用。</p><p>可以通过手动设置<code>allowCoreThreadTimeOut</code>的值来控制核心线程超时情况允许被移除引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allowCoreThreadTimeOut</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; keepAliveTime &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Core threads must have nonzero keep alive times&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (value != allowCoreThreadTimeOut) &#123;</span><br><span class="line">        allowCoreThreadTimeOut = value;</span><br><span class="line">        <span class="keyword">if</span> (value)</span><br><span class="line">            interruptIdleWorkers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务实现</p><p>本质需要考虑的是两个概念：响应速度和吞吐量</p><p>针对需要快速响应用户请求的场景，应该选择扩大核心线程数，减少阻塞队列的等待情况。</p><p>针对快速处理批量任务的场景，考虑吞吐量即可。由于核心线程数过高情况可能导致的线程上下文频繁切换问题，选择使用合适的线程数来提高吞吐量。</p><p>经验之谈：</p><ul><li>IO 密集型任务：由于线程并不是一直在运行，所以可以尽可能的多配置线程，比如 CPU 个数 * 2</li><li>CPU 密集型任务（大量复杂的运算）应当分配较少的线程，比如 CPU 个数相当的大小。</li></ul><p>根据美团线程池相关的技术文档显示，最终的线程池配置选择方案是设置管理平台的动态修改+监控平台。</p><p>参考：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></p><p>线程池异常处理</p><p>submit -&gt; callable (run()-&gt;taskFuture -&gt; call -&gt; taskFuture)</p><p>execute-&gt; runnable (run() -&gt; run)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解ThreadLocal</title>
      <link href="2021/08/29/Java/ThreadLocal/"/>
      <url>2021/08/29/Java/ThreadLocal/</url>
      
        <content type="html"><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><h3 id="1-1-ThreadLocal是什么"><a href="#1-1-ThreadLocal是什么" class="headerlink" title="1.1 ThreadLocal是什么"></a>1.1 ThreadLocal是什么</h3><p><a href="https://zh.wikipedia.org/wiki/Java语言">Java语言</a>中，线程局部变量使用<code>ThreadLocal</code>类对象表示。ThreadLocal保持了变量的类型T，可以通过get/set方法访问。例如， ThreadLocal保持了Integer值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; myThreadLocalInteger = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><h3 id="1-2-ThreadLocal解决什么问题"><a href="#1-2-ThreadLocal解决什么问题" class="headerlink" title="1.2 ThreadLocal解决什么问题"></a>1.2 ThreadLocal解决什么问题</h3><p>ThreadLocal 提供了线程本地的实例。它与普通变量的区别在于，每个使用该变量的线程都会初始化一个完全独立的实例副本。ThreadLocal 变量通常被<code>private static</code>修饰。当一个线程结束时，它所使用的所有 ThreadLocal 相对的实例副本都可被回收。</p><p>总的来说，<strong>ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在线程间隔离而在方法或类间共享的场景。</strong>后文会通过实例详细阐述该观点。另外，该场景下，并非必须使用 ThreadLocal ，其它方式完全可以实现同样的效果，只是 ThreadLocal 使得实现更简洁</p><h2 id="二、ThreadLocal核心设计与实现"><a href="#二、ThreadLocal核心设计与实现" class="headerlink" title="二、ThreadLocal核心设计与实现"></a>二、ThreadLocal核心设计与实现</h2><blockquote><p>本质由Thread类来维护ThreadLocal与实例的映射</p></blockquote><p>Thread类维护了一个ThreadLocalMap，这个map用来实现threadLocal和实例之间的映射。</p><p>当使用ThreadLocal的set()方法设置值时，实际是对当前线程的ThreadLocalMap put进对应的key-value键值对。</p><p>优势：每个线程访问map映射获取实例，如果这个map由每个线程独立维护，则避免了并发问题。</p><p>但这里可能存在哪些问题？</p><p>如果该线程永远执行不会在容器中被销毁，例如线程池中的核心线程。那此时该线程维护的map映射将一直存在内存中，如果不删除这些映射关系那么就可能出现内存泄露问题。</p><h3 id="ThreadLocalMap与内存泄漏"><a href="#ThreadLocalMap与内存泄漏" class="headerlink" title="ThreadLocalMap与内存泄漏"></a>ThreadLocalMap与内存泄漏</h3><p>这点ThreadLocal的设计者也已经考虑到了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">  Object value;</span><br><span class="line"></span><br><span class="line">  Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">    <span class="keyword">super</span>(k);</span><br><span class="line">    value = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们发现ThreadLocalMap中的key值，即ThreadLocal使用的是弱引用。value值用的强引用。</p><p>弱引用我们知道，只要在下一次gc时该对象就会被回收。</p><p>不过还有一个问题就是虽然此时被回收后的key值为null，但是对应的entry仍然未被回收。这里ThreadLocal直接在其他方法中实现了将key为null的entry对象回收的功能。核心方法为replaceStaleEntry（）和rehash（）。这两个方法在set、remove中都有用到。</p><p>因此我们在使用完该变量后会习惯性使用remove方法。它很重要的一个目的就是为了防止内存泄露。</p><h2 id="三、ThreadLocal在业务中的实践"><a href="#三、ThreadLocal在业务中的实践" class="headerlink" title="三、ThreadLocal在业务中的实践"></a>三、ThreadLocal在业务中的实践</h2><h3 id="3-1-业务背景"><a href="#3-1-业务背景" class="headerlink" title="3.1 业务背景"></a>3.1 业务背景</h3><p><strong>经典例子——用户授权登录</strong></p><p>我们在业务代码往往需要获取到当前登录的用户信息。一般的做法就是通过前端传过来的token获取。而这一步token获取过程我们都会放在interceptor或者filter中，而此时Controller层要想获取到用户信息就只能通过一个“固有容器”获取才行。</p><p>同时又要保证我们获取和设置的过程线程安全且不会内存泄漏，因此考虑使用ThreadLocal。该对象此时便应用在某个实例需要多个方法共同使用的场景中。</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><p><a href="http://www.jasongj.com/java/threadlocal/">http://www.jasongj.com/java/threadlocal/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Spring原理</title>
      <link href="2021/08/29/Spring/spring-source-read/"/>
      <url>2021/08/29/Spring/spring-source-read/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Spring原理"><a href="#深入理解Spring原理" class="headerlink" title="深入理解Spring原理"></a>深入理解Spring原理</h1><p>Spring源码流程浅析，目标是从头走到尾，因此流程较长，争取尽量简练。</p><p>spring的大部分精华就在于ioc中。</p><p>IOC容器中有有关bean的获取，先从入口处开始。</p><p>入口：</p><ol><li>基于注解</li><li>基于xml文件</li></ol><p>这里主要将我们大多数工作场景使用的注解配置方式。</p><p>在代码中我们往往会在类上加个像@Compenent的注解来将该类交由spring管理。这个流程如何生效？</p><p>将这一层抽象为注册流程。具体理解spring是如何进行注册的。</p><p>我们把要注册的类叫做beanClass，这里我们肯定都是直接以他的类进行操作的。</p><p>实际实现中spring将beanClass抽象为BeanDefinition</p><p>为啥要做一层封装？</p><p>容易理解的是，基于容器管理的组件设置理应包含各个方面的配置，包括我们从容器中获取对应组件的方式类型（type？name），组件的加载方式（lazy），组件相关信息（名称），组件依赖检查方式等。因此在BeanDefinition外部加了一层抽象类，AbstractBeanDefinition 定义一些通用的行为。</p><p>考虑到获取Bean的方式，因此追加一层BeanDefinitionHolder，用来定义beanName以及一些别称。</p><p>另外我们注册这一个动作由谁来提供呢？spring创建了一个BeanDefinitionRegistry 作为注册中心。由它来对beanDefination进行注册、移除、获取等操作。</p><p>这里注册中心的功能似乎以及足够大的包含了整个bean的获取流程。在实际的行为依靠了其他的核心类。例如beanDefiination其实最终是通过beanFactory来获取的。实际的beanDefination存储在beanDefinitionMap（ConcurrentHashMap）之中。</p><p>注册+获取综合形成他们的扩展类应用上下文，通用的有GenericApplicationContext</p><p>基于上述可知，ioc实现</p><p>容器启动流程</p><blockquote><p>钩子可以设置优先级，priorityOrder&gt;order&gt;@annotion ,不加无序（hashSet）</p></blockquote><p>beanFactory创建实例—-》factory初始化—-》beanDefinition实例创建—-》（beanDefinition钩子）—》factory初始化完毕——》（beanFactory钩子）—-》beanPostProcessor初始化—-》bean实例化</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Spring事件机制</title>
      <link href="2021/08/29/Spring/spring-event/"/>
      <url>2021/08/29/Spring/spring-event/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Spring事件机制"><a href="#深入理解Spring事件机制" class="headerlink" title="深入理解Spring事件机制"></a>深入理解Spring事件机制</h1><h2 id="观察者模式Or异步处理？"><a href="#观察者模式Or异步处理？" class="headerlink" title="观察者模式Or异步处理？"></a>观察者模式Or异步处理？</h2><p>distinct role——区分角色</p><p>观察者，监听者，事件</p><p>观察者发布事件——》监听者接收事件</p><p>以上这一简单流程实际的咋实现的？</p><p>大致流程简单梳理一下：</p><ol><li>容器启动时，将所有事件以及监听器注册到容器中</li><li>事件发布时需要有一个事件与监听器的匹配流程。匹配成功的执行相应步骤。</li><li>事件监听成功后续执行流程</li></ol><p>流程有问题？走代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationEventPublisher</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">publishEvent((Object) event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现一个函数式接口，直接给了个默认的方法。继续深入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">   Assert.notNull(event, <span class="string">&quot;Event must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Decorate event as an ApplicationEvent if necessary</span></span><br><span class="line">   ApplicationEvent applicationEvent;</span><br><span class="line">   <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</span><br><span class="line">      applicationEvent = (ApplicationEvent) event;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      applicationEvent = <span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="keyword">this</span>, event);</span><br><span class="line">      <span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</span><br><span class="line">         eventType = ((PayloadApplicationEvent&lt;?&gt;) applicationEvent).getResolvableType();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationEvents != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.earlyApplicationEvents.add(applicationEvent);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//*默认一般会走到这一步，获取一个广播器，并进行匹配 getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Publish event via parent context as well...</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">         ((AbstractApplicationContext) <span class="keyword">this</span>.parent).publishEvent(event, eventType);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咋匹配的呢？不急，先看匹配的前一层是啥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">   ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">   Executor executor = getTaskExecutor();</span><br><span class="line">   <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">         executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         invokeListener(listener, event);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现了啥，时间发布与监听竟然有两种设置，可以走同步也可以走异步，关键在于有没有这个executor。</p><p>观察SimpleApplicationEventMulticaster整块代码发现，默认的executor竟然为空。那我们要走异步该咋办呢？</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210816161912041.png" alt="image-20210816161912041"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.applicationEventMulticaster =</span><br><span class="line">            beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;Using ApplicationEventMulticaster [&quot;</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">      beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="keyword">this</span>.applicationEventMulticaster);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;No &#x27;&quot;</span> + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + <span class="string">&quot;&#x27; bean, using &quot;</span> +</span><br><span class="line">               <span class="string">&quot;[&quot;</span> + <span class="keyword">this</span>.applicationEventMulticaster.getClass().getSimpleName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下容器的注册流程就发现这个广播器默认通过固定的beanName实例化对象。那只需要自定义个广播器然后手动注册一个executor就可以了。</p><p>回到下一层的匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; getApplicationListeners(</span><br><span class="line">      ApplicationEvent event, ResolvableType eventType) &#123;</span><br><span class="line"></span><br><span class="line">   Object source = event.getSource();</span><br><span class="line">   Class&lt;?&gt; sourceType = (source != <span class="keyword">null</span> ? source.getClass() : <span class="keyword">null</span>);</span><br><span class="line">   ListenerCacheKey cacheKey = <span class="keyword">new</span> ListenerCacheKey(eventType, sourceType);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Potential new retriever to populate</span></span><br><span class="line">   CachedListenerRetriever newRetriever = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Quick check for existing entry on ConcurrentHashMap</span></span><br><span class="line">   CachedListenerRetriever existingRetriever = <span class="keyword">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line">   <span class="keyword">if</span> (existingRetriever == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Caching a new ListenerRetriever if possible</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.beanClassLoader == <span class="keyword">null</span> ||</span><br><span class="line">            (ClassUtils.isCacheSafe(event.getClass(), <span class="keyword">this</span>.beanClassLoader) &amp;&amp;</span><br><span class="line">                  (sourceType == <span class="keyword">null</span> || ClassUtils.isCacheSafe(sourceType, <span class="keyword">this</span>.beanClassLoader)))) &#123;</span><br><span class="line">         newRetriever = <span class="keyword">new</span> CachedListenerRetriever();</span><br><span class="line">         existingRetriever = <span class="keyword">this</span>.retrieverCache.putIfAbsent(cacheKey, newRetriever);</span><br><span class="line">         <span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newRetriever = <span class="keyword">null</span>;  <span class="comment">// no need to populate it in retrieveApplicationListeners</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (existingRetriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">      Collection&lt;ApplicationListener&lt;?&gt;&gt; result = existingRetriever.getApplicationListeners();</span><br><span class="line">      <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If result is null, the existing retriever is not fully populated yet by another thread.</span></span><br><span class="line">      <span class="comment">// Proceed like caching wasn&#x27;t possible for this current local attempt.</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> retrieveApplicationListeners(eventType, sourceType, newRetriever);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一块涉及大量的过滤匹配过程。内部暂时用缓存来维护所有的监听器。</p><p>结束！</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Spring事务传播级别</title>
      <link href="2021/08/29/Spring/propagation/"/>
      <url>2021/08/29/Spring/propagation/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-事务传播级别实现"><a href="#Spring-事务传播级别实现" class="headerlink" title="Spring 事务传播级别实现"></a>Spring 事务传播级别实现</h3><p>通常mysql的事务处理通过几个简单命令实现，包括：提交、回滚等操作。</p><p>在项目代码中若重复进行这些操作会产生许多重复的代码块。如何解决这个问题？</p><p>spring 给了我们答案：基于注解的事务实现@Transaction</p><h4 id="Transaction"><a href="#Transaction" class="headerlink" title="@Transaction"></a>@Transaction</h4><p>利用注解实现基于aop的事务流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> aspect AnnotationTransactionAspect extends AbstractTransactionAspect &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationTransactionAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> AnnotationTransactionAttributeSource(<span class="keyword">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> pointcut <span class="title">executionOfAnyPublicMethodInAtTransactionalType</span><span class="params">()</span> :</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(<span class="keyword">public</span> * ((<span class="meta">@Transactional</span> *)</span>+).*<span class="params">(..)</span>) &amp;&amp; <span class="title">within</span><span class="params">(<span class="meta">@Transactional</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> pointcut <span class="title">executionOfTransactionalMethod</span><span class="params">()</span> :</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(<span class="meta">@Transactional</span> * *(..)</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> pointcut <span class="title">transactionalMethodExecution</span><span class="params">(Object txObject)</span> :</span></span><br><span class="line"><span class="function"><span class="params">(executionOfAnyPublicMethodInAtTransactionalType()</span> || <span class="title">executionOfTransactionalMethod</span><span class="params">()</span> ) &amp;&amp; <span class="title">this</span><span class="params">(txObject)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring aop 咋实现？</p><p>bean对象—-&gt;aop代理对象。</p><p>代理对象封装前中后方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JtaAnnotationTransactionAspect.aspectOf()</span><br></pre></td></tr></table></figure><p>获取切面对象，注入事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJJtaTransactionManagementConfiguration</span> <span class="keyword">extends</span> <span class="title">AspectJTransactionManagementConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean(name = TransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_BEAN_NAME)</span></span><br><span class="line">   <span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> JtaAnnotationTransactionAspect <span class="title">jtaTransactionAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      JtaAnnotationTransactionAspect txAspect = JtaAnnotationTransactionAspect.aspectOf();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.txManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">         txAspect.setTransactionManager(<span class="keyword">this</span>.txManager);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> txAspect;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于此不同事务级别</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL执行流程与优化</title>
      <link href="2021/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"/>
      <url>2021/08/29/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL执行流程与优化"><a href="#MySQL执行流程与优化" class="headerlink" title="MySQL执行流程与优化"></a>MySQL执行流程与优化</h1><p><strong>目录</strong></p><ol><li><p><strong>怎么执行单表查询</strong></p></li><li><p><strong>连接原理（join）</strong></p></li><li><strong>基于成本的优化（cost）</strong></li><li><strong>explain</strong></li><li><strong>事务（2PC，3PC）</strong></li><li><strong>redo，undo日志</strong></li><li><strong>MVCC（快照读）</strong></li></ol><h2 id="sql语句执行流程"><a href="#sql语句执行流程" class="headerlink" title="sql语句执行流程"></a>sql语句执行流程</h2><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/1652e56415e9a6f4~tplv-t2oaga2asx-watermark.awebp" alt="SQL语句执行过程"></p><p><strong>单表查询</strong></p><h2 id="Sql-优化实例"><a href="#Sql-优化实例" class="headerlink" title="Sql 优化实例"></a>Sql 优化实例</h2><h3 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a><strong>应用背景</strong></h3><p>某个sql查询响应时间长，出现慢查询。</p><p>查询的结果仅几百条却要花10多秒时间。</p><h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a><strong>优化思路</strong></h3><ol><li><p>使用覆盖索引（一种优化策略）避免回表，简单的做法是通过获取id，在通过id关联来避免回表。</p><p>但并不是使用了覆盖索引就一定会对性能有较大程度的提升。</p></li><li><p>优化索引结构，针对多次使用且区分度较大的字段使用索引。利用索引可以在联表查询以及where筛选中都有极大地优化力度。同时建立索引的注意点是把握索引的大小，保证单个数据页下能够存储足够的节点，保证索引效率正常。此时，针对一些较大的字段就需要考虑其他方式来建立索引了。常见的有：</p><ul><li>建立前缀索引，注意考虑区分度。保证区分度符合要求的做法是通过count计算保证足够唯一的前缀长度。note：前缀索引不能保证排序</li><li>建立新的字段，可以考虑将要建立索引的字段值进行hash存储到新建立的字段中。note：由于函数使用过程同样产生额外开销，因此该方式效率并不能保证提升</li></ul></li><li><p>联合索引建立保证符合业务要求。合理的联合索引既可以使一些查询避开回表，也可以有效避免索引失效问题。同时这里有一个要考虑的点就是范围查找，因为一旦在where后面使用了范围查找就会导致后续的索引失效。举个例子:</p><p>index k_send_date_status(‘send_date’,’status’);</p><p>index k_status_send_date(‘status’,’send_date’);</p><p>若建立了<code>k_send_date_status</code>联合索引，则当send_date范围查询时status永远无法生效。而该发送时间通常都是范围查询的。因此在建立联合索引时要考虑将范围查询的字段建到后面。</p><p>而针对等值查找应该考虑将过滤力度大的放前面。</p><p>note：若前面字段区分度低，后面字段区分度高，mysql1.8后会分析并执行索引跳跃表，跳过前面区分度低的索引。</p></li><li><p>text类型的字段并不适合直接返回。或者说某字段如果特别大那其实就应该避免被建立。考虑将该字段信息通过其他方式进行存储。原因是sql返回数据大小有限制（max_allowed_packet），同时字段过大也会影响索引的效率。</p></li><li><p>针对大量数据同时更新的情况，考虑到更新操作会上锁，一旦更新流程复杂，大量更新请求就会陷入阻塞造成大量mysql活动连接产生。解决方法：</p><p>只需要查找出对应的最大id和最小id，这一步不需要回表，性能有保障。然后再对这个id区间进行分批更新即可。这样做不会降低性能，同时由保证了实时的更新。</p></li><li><p>避免内联子查询</p></li><li>字段不要使用聚合函数或运算</li><li>由于CBO对子查询处理能力较弱，应避免使用子查询，改写为inner join</li><li>针对limit优化，考虑提取id</li><li>尽量使用union替代or</li><li>大批量数据导出或者数据分页查询效率不稳定，采用上一次查询的结果进行查询实现稳定每一次的查询。</li></ol><h3 id="优化点原理"><a href="#优化点原理" class="headerlink" title="优化点原理"></a><strong>优化点原理</strong></h3><h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h4><p>创建索引本质是一种空间换时间的思想。但如何用更少的空间换回更多的时间使我们需要关注的点。这就要看到mysql中索引的数据结构设计了。</p><p>mysql索引数据结构采用的是B+树。B+树本质就是多路平衡查找树。区别在于B+树的非叶子结点不存储数据仅存key和指针。同时叶子结点之间为链表结构。B+树中的各个节点存储在数据页中，一页为16K。</p><p>设计优势</p><p>非叶子结点能存储更多的指针数据，对应的子节点数量更多。同样数据量下树高最大幅度下降。</p><p>节点大小存储在页中，符合磁盘预读1页大小的设定。因此将一个节点中的数据读取到内存中仅需1次IO。充分利用了计算机的局部性原理。</p><p>数据在B+树上的查找流程：</p><p>innodb默认有主键，因此表结构其实也就是索引结构。首先从根节点开始，可是根节点是哪个数据页呢？在表空间中已经被定义好了，直接获取即可。将根节点的数据读取到内存中，通过二分查找的方式找到指定指针位置。再通过指针到下一个节点继续如上步骤。直到到了叶子结点。此时节点中存放的是真实数据，对于辅助索引而言仅存储id值，而对于主键索引则存储行中所有数据。因此对于主键索引的查找直接就可以返回数据，但是对于辅助索引的查找如果需要其他的数据就必须再通过返回的id去查一遍主键索引才可以结束。而这一步也正是我们熟知的回表查询。</p><p>这里就可以知道回表操作是需要额外的IO的。因此在获取数据时尽量可以选择索引包含的字段以避免回表操作。</p><p>联合索引与普通索引其实差不多，区别在于联合索引中各字段的比对顺序是固定的。一旦少了联合索引中的一个字段，那之后的索引就会连带失效。正因如此才有了联合索引的最左前缀原则。</p><p>对于联合索引中的范围查询显然也具备一定的优先性</p><p>索引的优化本质：索引有序可以二分查找。联合索引key有序的前提是在同一个key下。</p><p>通过pageNo获取当前数据表的根节点数据页。</p><p>文件系统最小存储单元：块：4K——mysql数据最小存储单位：页：16K</p><blockquote><p>连接+安全校验——查找缓存——解析器——优化器——存储引擎</p></blockquote><h4 id="2-优化器"><a href="#2-优化器" class="headerlink" title="2.优化器"></a>2.优化器</h4><p>常见的优化包括：索引选择，查询顺序调整，跳表等。</p><p>exlain 模拟优化器执行SQL查询</p><p>system &gt; const &gt; eq_ref（唯一性扫描） &gt;ref &gt;range &gt;index &gt; ALL</p><p>由左至右，性能由最差到最好</p><p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p><p>index：Full Index Scan，index与ALL区别为index类型只遍历索引树</p><p>range：索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、&lt;、&gt;等的查询</p><p>ref：非唯一性索引扫描，返回匹配某个单独值的所有行。常见于使用非唯一索引即唯一索引的非唯一前缀进行的查找</p><p>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</p><p>const、system：当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量</p><p>NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引</p><p><strong>index_merge</strong></p><p>索引合并(使用union拼接)</p><p>extra:</p><p><strong>Using temporary</strong></p><p>  表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询</p><p><strong>Using filesort</strong></p><p>  MySQL中无法利用索引完成的排序操作称为“文件排序”</p><p><strong>Using Index</strong></p><p>  表示直接访问索引就能够获取到所需要的数据（覆盖索引），不需要通过索引回表；</p><p><strong>Using Index Condition</strong></p><p>   在MySQL 5.6版本后加入的新特性（Index Condition Pushdown）;会先条件过滤索引，过滤完索引后找到所有符合索引条件的数据行，随后用 WHERE 子句中的其他条件去过滤这些数据行；</p><p><strong>Using where</strong></p><p>  表示MySQL服务器在存储引擎收到记录后进行“后过滤”（Post-filter）,如果查询未能使用索引，Using where的作用只是提醒我们MySQL将用where子句来过滤结果集。这个一般发生在MySQL服务器，而不是存储引擎层。一般发生在不能走索引扫描的情况下或者走索引扫描，但是有些查询条件不在索引当中的情况下。</p><p>对于or没有很好地优化措施最好改写成union all ，note：union本身自带了排序+去重。</p><p>优化器认为内连接要比左连接来的高效（内连接——&gt;外连接）</p><p>使用exist代替in，原因是优化器对子查询中的in优化力度弱。</p><blockquote><p>InnoDB只有在访问行的时候才会对其加锁，而索引能够减少InnoDB访问的行数，从而减少锁的数量。但这只有当InnoDB在存储引擎层能够过滤掉所有不需要的行时才有效，如果索引无法过滤掉无效的行，那么在InnoDB检索到数据并返回给服务器层以后， MySQL服务器才能应用WHERE子句。</p><p>这时已经无法避免锁定行了：InnoDB已经锁定了这些行，到适当的时候才释放。在MySQL 5.1和之后的版本中， InnoDB可以在服务器端过滤掉行后</p><p>就释放锁，但是在早期的MySQL版本中，InnoDB只有在事务提交后才能释放锁。</p></blockquote><p>where 条件分解与提取</p><p>index key(index first key|index last key)</p><p>范围查找</p><p>index Filter</p><p>索引列过滤</p><p>Table Filter</p><p>表列过滤</p><p><strong>ICP</strong></p><p>即所索引条件下推（index condition pushdown）</p><p>它能减少在使用 二级索引 过滤where条件时的回表次数 和 减少MySQL server层和引擎层的交互次数。在索引组织表中，使用二级索引进行回表的代价相比堆表中是要高一些的。</p><p>也就是说各种各样的 where 条件，在进行处理时，分成了上面三种情况，一种条件会使用索引确定扫描的范围；一种条件可以在索引中进行过滤；一种必须回表进行过滤；</p><p>在 MySQL5.6 之前，并不区分Index Filter与Table Filter，统统将Index First Key与Index Last Key范围内的索引记录，回表读取完整记录，然后返回给MySQL Server层进行过滤。</p><p>而在MySQL 5.6之后，Index Filter与Table Filter分离，Index Filter下降到InnoDB的索引层面进行过滤，减少了回表与返回MySQL Server层的记录交互开销，提高了SQL的执行效率。</p><p>所以所谓的 ICP 技术，其实就是 index filter 技术而已。只不过因为MySQL的架构原因，分成了server层和引擎层，才有所谓的“下推”的说法。所以ICP其实就是实现了index filter技术，将原来的在server层进行的table filter中可以进行index filter的部分，在引擎层面使用index filter进行处理，不再需要回表进行table filter。</p><h4 id="3-存储引擎"><a href="#3-存储引擎" class="headerlink" title="3.存储引擎"></a>3.存储引擎</h4><p>主要是innodb，附带对比myisam</p><p>索引在该层实现</p><blockquote><p>MySQL服务器在存储引擎返回行以后在应用WHERE条件过滤。</p></blockquote><p>单查询效率来看myisam较innodb更高些，且myisam支持全文索引，因此一般适合存储文本量大且多查询的系统。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/08/29/Java/java%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0/"/>
      <url>2021/08/29/Java/java%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ol><li>安全管理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动安全管理器</span><br><span class="line">-Djava.security.manager</span><br><span class="line">同时指定配置文件位置</span><br><span class="line">-Djava.security.manager -Djava.security.policy=<span class="string">&quot;E:/java.policy&quot;</span></span><br><span class="line">指定oom时自动dump线程信息</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从底层开始去了解IO模型</title>
      <link href="2021/04/04/Java/IO%E6%A8%A1%E5%9E%8B%E6%80%9D%E8%80%83/"/>
      <url>2021/04/04/Java/IO%E6%A8%A1%E5%9E%8B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="IO模型到底是个啥？"><a href="#IO模型到底是个啥？" class="headerlink" title="IO模型到底是个啥？"></a>IO模型到底是个啥？</h1><blockquote><p>在学习之前我相信大家肯定都会和我一样对IO模型有很多的疑惑，想要迫切地知道一切，比如IO模型到底是什么，它有什么作用等等。但我们要明白IO 模型这一块涉及到了许多计算机底层的知识，想要彻底搞定他我们就必须从底层一步步的去深入理解。</p></blockquote><h2 id="首先IO是什么？"><a href="#首先IO是什么？" class="headerlink" title="首先IO是什么？"></a>首先IO是什么？</h2><p>IO 即 Input/Output ，表示输入/输出。在计算机中，我们知道有许多的IO外设，像是键盘、鼠标、硬盘等等。输入设备负责向计算中输入数据，而输出设备则负责接收计算机中输出的数据。我们操作外设完成与计算机系统间的交互。<strong>内部实现则是交由外设与计算机系统之间的通信完成，而这正是我们需要了解的IO过程</strong>。</p><h2 id="那么外设是怎么与计算机系统之间进行通信的呢？"><a href="#那么外设是怎么与计算机系统之间进行通信的呢？" class="headerlink" title="那么外设是怎么与计算机系统之间进行通信的呢？"></a>那么外设是怎么与计算机系统之间进行通信的呢？</h2><p>这里涉及到计算机系统内部的实现原理。</p><p>我们都知道每台计算机要使用都得有一个操作系统（OS）。操作系统实际是封装的一层软件，用以实现文件管理、存储管理、进程管理、设备管理等等功能。那么操作系统又是怎么实现的呢？这就不得不提到内核了。我们可以把内核看做一个软件，同样是做了一层封装。现代计算机操作系统为了保证稳定和安全性，大多采用了“机制与策略分离”的原理来划分OS结构（这里的机制指的是为实现某一特定功能的具体执行机构，策略则是指在机制的基础上借助某些参数或算法实现的优化）。</p><p>内核作为软件一开始存储在磁盘中，当我们打开电脑时，内核便被加载到了内存中开始运行。同时将整个内存划分为了<strong>内核空间（内核内）和用户空间（内核外）</strong>这两块区域。内核空间可以使用一些实现基础功能的指令如进程调度、地址转换等等，而用户空间不能直接调用内核空间指令。</p><p>用户进程执行一开始都在用户空间，那么问题来了，如果它想要使用内核空间指令该咋办呢？此时就必须进行系统调用，实现CPU的上下文切换（用户态——&gt;内核态）。</p><p>了解了这些我们在想一下外设与计算机系统间的通信过程。通信过程我们总离不开存储过程，进程通信吧，那我们的用户进程也不得不发起一个系统调用请求。然后将IO的执行交由内核完成。</p><p>那么内核又是怎么实现的呢？注意这个时候才终于到了本篇的核心：IO模型。IO模型决定了内核对IO请求采取的实现策略。但总体不外乎就两个步骤：</p><ol><li>内核等待 I/O 设备准备好数据</li><li>内核将数据从内核空间拷贝到用户空间。</li></ol><h2 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h2><h3 id="BIO（Blocking-IO）"><a href="#BIO（Blocking-IO）" class="headerlink" title="BIO（Blocking IO）"></a>BIO（Blocking IO）</h3><p>顾名思义它是一种阻塞式的IO模型。那么是怎么个阻塞法呢？</p><p>当应用程序发起一个IO请求时，例如说我想从磁盘文件中读取数据，到了计算机底层就是发起了一个read系统调用指令。内核执行这个read指令实现数据读取（这里指令执行细节不做叙述，具体可参考计算机操作系统），这个指令执行需要一点时间，我们不妨把它分为三个步骤：准备数据—-&gt;数据就绪—-&gt;拷贝数据。<strong>注意：此时应用程序会陷入阻塞状态直到接收到拷贝完成后的数据。</strong></p><p>由于它必须经历等待数据准备就绪的过程，所有称它为阻塞同步模型。这种模型的缺陷很明显，特别是在网络通信中，服务端不可能为了一个连接请求或是数据传输就陷入阻塞，为此服务端不得不创建多个线程来实现多个连接请求。它的优点也很明显，实现十分简单。</p><h3 id="NIO（Non-Blocking-New-IO）"><a href="#NIO（Non-Blocking-New-IO）" class="headerlink" title="NIO（Non-Blocking/New IO）"></a>NIO（Non-Blocking/New IO）</h3><p>同样的我们首先知道他是同步非阻塞的。既然是非阻塞那就意味着它不会和BIO一样阻塞等待着接收内核数据直到拷贝完成。既然他不会阻塞等待，那它又是怎么知道内核准备好数据的时机呢？</p><p>一种方法是不断调用系统指令，直到数据准备完成，这么做虽然不会使进程陷入阻塞，但会极大地消耗CPU资源，显然不是一种可行的方案。</p><p>这个时候IO多路复用模型就登场了！多路指的是多个连接</p><p>简单来说就是它不再使用“重量级”的系统调用指令来查询数据是否准备完成，而是通过select/poll/epoll调用指令来实现。它们支持一次查询多个系统调用以检查数据准备状态。</p><p>到这里我们明白了，NIO 采用同步非阻塞的方式，它使用IO多路复用模型来减少无效的系统调用以减少对CPU资源的消耗。</p><p>在Java中我们可以通过Selector，Channel，Buffer等抽象来深入理解NIO。</p><h3 id="AIO（Asynchronous-IO）"><a href="#AIO（Asynchronous-IO）" class="headerlink" title="AIO（Asynchronous IO）"></a>AIO（Asynchronous IO）</h3><p>它采用的是异步模型，基于事件和回调机制来实现。它实现非阻塞的原理就是通过一个事件回调，由于线程同样需要监听该回调事件，因此它在性能上的提升并不大。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> 深入理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀项目实现</title>
      <link href="2021/03/26/%E9%A1%B9%E7%9B%AE/%E7%A7%92%E6%9D%80%E6%A8%A1%E5%9D%97/"/>
      <url>2021/03/26/%E9%A1%B9%E7%9B%AE/%E7%A7%92%E6%9D%80%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="秒杀项目实现"><a href="#秒杀项目实现" class="headerlink" title="秒杀项目实现"></a>秒杀项目实现</h1><blockquote><p>秒杀场景：某商品100件，参与秒杀。参与人数10万人</p></blockquote><h2 id="一、问题考虑"><a href="#一、问题考虑" class="headerlink" title="一、问题考虑"></a>一、问题考虑</h2><h3 id="1-高并发"><a href="#1-高并发" class="headerlink" title="1. 高并发"></a>1. 高并发</h3><p>秒杀的特点就是<strong>时间极短</strong>、 <strong>瞬间用户量大</strong>。除了要考虑数据库承受外，单机的redis在高请求量情况下也要考虑能不能顶住几万的QPS。</p><h3 id="2-超卖"><a href="#2-超卖" class="headerlink" title="2. 超卖"></a>2. 超卖</h3><p>卖出超过了预卖的数量。</p><h3 id="3-恶意请求"><a href="#3-恶意请求" class="headerlink" title="3. 恶意请求"></a>3. 恶意请求</h3><p>用户通过几十台机器搞脚本，模拟出十几万人左右的请求。</p><h3 id="4-链接暴露"><a href="#4-链接暴露" class="headerlink" title="4. 链接暴露"></a>4. 链接暴露</h3><p>不能将请求地址直接暴露给用户，包括开发者。。。</p><h3 id="5-数据库"><a href="#5-数据库" class="headerlink" title="5. 数据库"></a>5. 数据库</h3><p>数据库一旦崩了，其他服务也会连带着挂。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="二、问题解决"><a href="#二、问题解决" class="headerlink" title="二、问题解决"></a>二、问题解决</h2><h3 id="1-资源静态化"><a href="#1-资源静态化" class="headerlink" title="1. 资源静态化"></a>1. 资源静态化</h3><p>前端需要有自己的服务器，可以把前端的静态资源提前放到cdn服务器中以减少真正秒杀时服务器的压力。</p><h3 id="2-秒杀链接加盐"><a href="#2-秒杀链接加盐" class="headerlink" title="2. 秒杀链接加盐"></a>2. 秒杀链接加盐</h3><p>链接暴露避免方法：<strong>直接把URL动态化。</strong></p><p>可以通过MD5这类的摘要算法在url后面加个随机加密的token</p><p>token只有在秒杀活动开始时才能获得。</p><p>详细过程：</p><p>用户点击秒杀—-&gt;前端获取秒杀链接—-&gt;后端在秒杀链接上加上token—-&gt;前端通过获取到的秒杀链接再去访问真正的秒杀服务—-&gt;后端受到该秒杀请求后为解决幂等考虑将token放到redis中，使用setnx（若存在不覆盖返回false，不存在放入并返回true）。</p><h3 id="3-限流"><a href="#3-限流" class="headerlink" title="3. 限流"></a>3. 限流</h3><h4 id="前端限流"><a href="#前端限流" class="headerlink" title="前端限流"></a>前端限流</h4><p>就按钮不可选中这些。。</p><h4 id="后端限流"><a href="#后端限流" class="headerlink" title="后端限流"></a>后端限流</h4><p>库存为0后，后端关闭后续无效请求的介入。</p><h3 id="4-Nginx"><a href="#4-Nginx" class="headerlink" title="4. Nginx"></a>4. Nginx</h3><p>高性能web服务器，它能顶几万并发，但是Tomcat只能顶几百。。。</p><p>要想让这么多请求交到Tomcat手中不太现实，幸好Nginx可以做负载均衡，我们只需要部署多台Tomcat服务器，然后让Nginx将请求按均衡策略打到这些服务器上即可。</p><p>同时它也能做恶意请求拦截的功能。一般单个用户如果请求次数太夸张，那么在网关层我们就应该把它拦截掉。</p><h3 id="5-风控"><a href="#5-风控" class="headerlink" title="5. 风控"></a>5. 风控</h3><p>如果这些恶意请求操作跟真实用户一样怎么办？他们可以注册多个账号来参与秒杀，这样网关很难做到拦截。此时就需要分控参与了。</p><p>在请求从前端到达后端之前，分控可以根据账号行为分析出这个账号为机器人的概率大不大。这里用到了大数据团队，他们会对你的用户数据进行分析然后打上对应标签。</p><p>如果黑客通过购买真实用户进行秒杀怎么办？</p><p>此时只能采取通杀策略。。。即一旦风控分析出这个用户为真实用户的概率没有其他用户概率大，那就丢弃它的请求。像一开始的一万请求进来通过分控可能就留下一千个最有可能的用户参与秒杀了。</p><h3 id="6-后端"><a href="#6-后端" class="headerlink" title="6. 后端"></a>6. 后端</h3><h4 id="服务单一原则"><a href="#服务单一原则" class="headerlink" title="服务单一原则"></a>服务单一原则</h4><p>不会影响其他服务器以实现高可用。</p><h4 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h4><p>单机Redis顶不住，考虑做集群，加哨兵并开启持久化。以此来实现高可用。</p><h4 id="库存预热"><a href="#库存预热" class="headerlink" title="库存预热"></a>库存预热</h4><p>每次请求过来，然后去数据库减库存，数据库同样顶不住。</p><p>所以这里同样的提前将库存加载到Redis中。整个流程都在Redis中完成，等秒杀结束了再异步去修改库存就好。</p><p>这里对Redis中库存的修改同样需要考虑高并发情况下的线程安全问题。</p><p><strong>解决方案</strong></p><p>使用事务。Redis 本身是支持事务的，同时他有许多的原子指令。联合原子指令的话可以用lua脚本。同时他也有支持乐观锁。</p><h4 id="限流-amp-降级-amp-熔断-amp-隔离"><a href="#限流-amp-降级-amp-熔断-amp-隔离" class="headerlink" title="限流&amp;降级&amp;熔断&amp;隔离"></a>限流&amp;降级&amp;熔断&amp;隔离</h4><p>这个为啥要做呢，不怕一万就怕万一，万一你真的顶不住了，<strong>限流</strong>，顶不住就挡一部分出去但是不能说不行，<strong>降级</strong>，降级了还是被打挂了，<strong>熔断</strong>，至少不要影响别的系统，<strong>隔离</strong>，你本身就独立的，但是你会调用其他的系统嘛，你快不行了你别拖累兄弟们啊。</p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>秒杀作为瞬时流量很高平时又没啥流量的场景，使用消息队列就十分契合。我们可以把业务信息放消息队列里，然后慢慢消费改库存就可以了。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>单独给秒杀建个数据库。</p><h3 id="7-分布式事务"><a href="#7-分布式事务" class="headerlink" title="7. 分布式事务"></a>7. 分布式事务</h3><p>上面的任何一步都是可能出错的，而且我们是在不同的服务里面出错的，那就涉及分布式事务了，但是分布式事务大家想的是一定要成功什么的那就不对了，还是那句话，几个请求丢了就丢了，要保证时效和服务的可用可靠。</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>秒杀活动还未开始前：</p><p>定时扫描最近三天需要秒杀的商品——》将扫描出来的商品（包括秒杀活动信息，商品随机码）缓存到redis中——》同时将库存作为分布式Redisson信号量（库存预热）</p><p>秒杀活动开始时：</p><p>用户进入商品页——》服务端查询商品信息，并远程调用秒杀服务查询当前商品是否参与秒杀活动——》用户点击秒杀——》从redis中获取当前秒杀商品的详细信息——》先判断当前这个秒杀请求是否在活动时间内——》再校验商品随机码与用户请求中的key——》验证购物数量是否合理——》判断购买量是否超过库存——》判断当前用户是否已经购买过（幂等处理，通过setnx实现）——》若占位成功说明当前用户还没买过，库存预减（信号量减，若还未减到小于0，返回true）——》预减成功则创建订单号和订单信息并发送给MQ</p><p><img src="D:%5C%E6%94%B6%E8%97%8F%5C%E5%9B%BE%E7%89%87%5C%E6%88%AA%E5%9B%BE%5C20200408182019813.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秒杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/03/18/Web/https%E5%92%8Chttp/"/>
      <url>2021/03/18/Web/https%E5%92%8Chttp/</url>
      
        <content type="html"><![CDATA[<h1 id="从一个请求开始的探秘之旅"><a href="#从一个请求开始的探秘之旅" class="headerlink" title="从一个请求开始的探秘之旅"></a>从一个请求开始的探秘之旅</h1><p>我永远忘不掉小时候第一次接触电脑，在网站上输入<code>www.4399.com</code>，看到页面上所显示的丰富游戏时的激动心情。也永远想不到如今我坐在电脑桌前分析这样一个过程。</p><p>不知道各位有没有过和我一样的体会。</p><p>https 图示</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/v2-a994fbf3094d737814fe01c2b919477b_720w.jpg" alt="img"></p><ol><li>首先客户端通过URL访问服务器建立SSL连接。</li><li>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端。</li><li>客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li><li>服务器利用自己的私钥解密出会话密钥。</li><li>服务器利用会话密钥加密与客户端之间的通信。</li></ol><h3 id="12-HTTPS的缺点"><a href="#12-HTTPS的缺点" class="headerlink" title="12. HTTPS的缺点"></a><strong>12. HTTPS的缺点</strong></h3><ul><li>HTTPS协议多次握手，导致页面的加载时间延长近50%；</li><li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗；</li><li>申请SSL证书需要钱，功能越强大的证书费用越高。</li><li>SSL涉及到的安全算法会消耗 CPU 资源，对服务器资源消耗较大。</li></ul><h3 id="13-总结HTTPS和HTTP的区别"><a href="#13-总结HTTPS和HTTP的区别" class="headerlink" title="13. 总结HTTPS和HTTP的区别"></a><strong>13. 总结HTTPS和HTTP的区别</strong></h3><ul><li>HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理。</li><li>http和https使用连接方式不同，默认端口也不一样，http是80，https是443。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/03/13/%E5%85%B6%E4%BB%96/exam/"/>
      <url>2021/03/13/%E5%85%B6%E4%BB%96/exam/</url>
      
        <content type="html"><![CDATA[<ol><li>自我介绍</li><li>==与equals区别？给了例子问true还是false</li><li>equals怎么重写的？</li><li>int和Integer区别？</li><li>static和final的区别？</li><li>集合中为什么要用包装类？</li><li>面向对象特征？</li><li>接口和抽象类区别？使用场景？</li><li>String、StringBuilder、StringBuffer区别？</li><li>深拷贝、浅拷贝？</li><li>ThreadLocal原理？内存泄漏问题？使用场景？</li><li>线程池相关？</li><li>ArrayList、LinkedList底层？</li><li>hashmap底层？concurrenthashmap底层？</li><li>TCP、UDP区别？三次握手四次挥手？在哪层？</li><li>http状态码？</li><li>mybatis中sql注入问题？</li><li>分页如何实现？</li><li>mysql索引底层？聚簇索引与非聚簇索引？</li><li>唯一索引的作用？使用场景？</li><li>mysql内联、左联、右联区别？</li><li>数据库隔离级别？</li><li>平时都拿<a href="https://www.nowcoder.com/jump/super-jump/word?word=redis">redis</a>做什么？</li><li><a href="https://www.nowcoder.com/jump/super-jump/word?word=redis">redis</a>缓存与数据库的一致性问题？</li><li>缓存穿透？如何解决？</li><li>持久化机制、淘汰策略？</li><li>setnx怎么用的？<a href="https://www.nowcoder.com/jump/super-jump/word?word=redis">redis</a>sion锁原理？</li><li>乐观锁与悲观锁？使用场景？乐观锁如何实现？</li><li>场景题（用了半小时左右，说了一个类似消息队列的思路）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入讨论单点登录</title>
      <link href="2021/03/10/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>2021/03/10/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><p><img src="D:%5C%E6%94%B6%E8%97%8F%5C%E5%9B%BE%E7%89%87%5C%E6%88%AA%E5%9B%BE%5Cimage-20210312103049323.png" alt="image-20210312103049323"></p><p><img src="D:%5C%E6%94%B6%E8%97%8F%5C%E5%9B%BE%E7%89%87%5C%E6%88%AA%E5%9B%BE%5Cimage-20210312103213947.png" alt="image-20210312103213947"></p><p><img src="D:%5C%E6%94%B6%E8%97%8F%5C%E5%9B%BE%E7%89%87%5C%E6%88%AA%E5%9B%BE%5Cimage-20210312103242237.png" alt="image-20210312103242237"><img src="D:%5C%E6%94%B6%E8%97%8F%5C%E5%9B%BE%E7%89%87%5C%E6%88%AA%E5%9B%BE%5Cimage-20210312103309860.png" alt="image-20210312103309860"></p><p><img src="D:%5C%E6%94%B6%E8%97%8F%5C%E5%9B%BE%E7%89%87%5C%E6%88%AA%E5%9B%BE%5Cimage-20210312102904517.png" alt="image-20210312102904517"></p><h2 id="Session一致性解决方案："><a href="#Session一致性解决方案：" class="headerlink" title="Session一致性解决方案："></a>Session一致性解决方案：</h2><ol><li>cookie存储：将session信息保存在客户端，每次客户端请求都带上session信息。不可取！浪费网络带宽。cookie存不了了大量数据，有长度限制4k；cookie服务端可读，存在安全隐患。</li><li>session复制：在每个分布式服务器上都复制一份session信息。不可取！受内存限制。</li><li>hash一致性<br>利用负载均衡机制。只需修改nginx，不用修改应用代码。它只要保证hash值均匀分布即可，此时多态服务器的负载是均衡的。但若是服务器重启还是会导致部分session丢失。但它问题不大，确是实际可用的。</li><li>统一存储<br>将所有数据不存在内存里，存在nosql中间件中。这么做没有安全隐患且数据不会丢失。但问题是增加了一次网络调用，且要修改应用代码，同时redis获取数据比内存慢很多。幸好上述问题可以用SpringSession完美解决。</li><li>不同服务，子域session共享<br>设置cookie的domain为服务子域</li></ol><p>通过4，5两点结合可以更好实现要求</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解代理类</title>
      <link href="2021/03/09/Java/%E4%BB%A3%E7%90%86%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
      <url>2021/03/09/Java/%E4%BB%A3%E7%90%86%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解代理类"><a href="#深入理解代理类" class="headerlink" title="深入理解代理类"></a>深入理解代理类</h1><h2 id="JDK-Proxy动态代理类"><a href="#JDK-Proxy动态代理类" class="headerlink" title="JDK Proxy动态代理类"></a>JDK Proxy动态代理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk自带的Proxy类，为带有接口的类生成动态代理对象。</span></span><br><span class="line"><span class="comment"> * Proxy的newProxyInstance方法内部通过反射的方法调用到目标对象的方法。</span></span><br><span class="line"><span class="comment"> * 缺陷：</span></span><br><span class="line"><span class="comment"> * 1.委托类必须实现接口</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> * Spring框架为我们提供了CGLib类做动态代理，它就不需要接口实现。</span></span><br><span class="line"><span class="comment"> * 其被应用在SpringAOP中，它的默认规则是：当对象带有接口时默认使用JDK自带的代理类，若无</span></span><br><span class="line"><span class="comment"> * 接口则再使用cglib做动态代理。当然有接口的时候也可以指定使用cglib。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * cglib：</span></span><br><span class="line"><span class="comment"> * 使用Enhance类做动态代理，增强逻辑写在MethodInterceptor.intercept()中。</span></span><br><span class="line"><span class="comment"> * 注意：委托类中的final方法并不会被拦截器拦截。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">proxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * jdk自带的Proxy类，为带有接口的类生成动态代理对象。</span></span><br><span class="line"><span class="comment">         * Proxy的newProxyInstance方法内部通过反射的方法调用到目标对象的方法。</span></span><br><span class="line"><span class="comment">         * 缺陷：</span></span><br><span class="line"><span class="comment">         * 1.委托类必须实现接口</span></span><br><span class="line"><span class="comment">         * 解决：</span></span><br><span class="line"><span class="comment">         * Spring框架为我们提供了CGLib类做动态代理，它就不需要接口实现。</span></span><br><span class="line"><span class="comment">         * 其被应用在SpringAOP中，它的默认规则是：当对象带有接口时默认使用JDK自带的代理类，若无</span></span><br><span class="line"><span class="comment">         * 接口则再使用cglib做动态代理。当然有接口的时候也可以指定使用cglib。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * cglib：</span></span><br><span class="line"><span class="comment">         * 使用Enhance类做动态代理，增强逻辑写在MethodInterceptor.intercept()中。</span></span><br><span class="line"><span class="comment">         * 注意：委托类中的final方法并不会被拦截器拦截。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Somethingtodo proxyInstance = (Somethingtodo) <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> Owner()).newProxyInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(proxyInstance.getClass());</span><br><span class="line">        proxyInstance.deal();</span><br><span class="line">        <span class="comment">//class com.sun.proxy.$Proxy0</span></span><br><span class="line">        <span class="comment">//代理增强前</span></span><br><span class="line">        <span class="comment">//主人在干活</span></span><br><span class="line">        <span class="comment">//代理增强后</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Owner</span> <span class="keyword">implements</span> <span class="title">Somethingtodo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人在干活&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;代理增强前&quot;</span>);</span><br><span class="line">                        method.invoke(target,args); <span class="comment">// 通过反射调用目标对象的方法</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理增强后&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGLib-Enhancer动态代理类"><a href="#CGLib-Enhancer动态代理类" class="headerlink" title="CGLib Enhancer动态代理类"></a>CGLib Enhancer动态代理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk自带的Proxy类，为带有接口的类生成动态代理对象。</span></span><br><span class="line"><span class="comment"> * Proxy的newProxyInstance方法内部通过反射的方法调用到目标对象的方法。</span></span><br><span class="line"><span class="comment"> * 缺陷：</span></span><br><span class="line"><span class="comment"> * 1.委托类必须实现接口</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> * Spring框架为我们提供了CGLib类做动态代理，它就不需要接口实现。</span></span><br><span class="line"><span class="comment"> * 其被应用在SpringAOP中，它的默认规则是：当对象带有接口时默认使用JDK自带的代理类，若无</span></span><br><span class="line"><span class="comment"> * 接口则再使用cglib做动态代理。当然有接口的时候也可以指定使用cglib。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * cglib：</span></span><br><span class="line"><span class="comment"> * 使用Enhance类做动态代理，增强逻辑写在MethodInterceptor.intercept()中。</span></span><br><span class="line"><span class="comment"> * 注意：委托类中的final方法并不会被拦截器拦截。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * CGLib实现原理：</span></span><br><span class="line"><span class="comment">         * 通过Enhancer设置委托类和方法拦截器，实现委托类的所有可重写方法被方法</span></span><br><span class="line"><span class="comment">         * 拦截器所拦截，从而实现在拦截器中的加强。</span></span><br><span class="line"><span class="comment">         * 这里就已经揭示了它的底层实现原理，即通过生成代理类并继承委托类以重写委托类的方法，</span></span><br><span class="line"><span class="comment">         * 然后在重写方法块上加入增强代码即可。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 优势：</span></span><br><span class="line"><span class="comment">         * 底层依靠ASM操作字节码实现，性能由于JDK Proxy类的字节码实现</span></span><br><span class="line"><span class="comment">         * ASM字节码增强技术：</span></span><br><span class="line"><span class="comment">         * 主要用来反射的时候提升性能的，如果单纯用jdk的反射调用，性能是非常低下的，而使用字节码增强技术后</span></span><br><span class="line"><span class="comment">         * 反射调用的时间已经基本可以与直接调用相当了。</span></span><br><span class="line"><span class="comment">         * 所以Spring最终使用了CGLib生成动态代理。注意在类实现接口的情况下SpringAop默认还是用的JDK动态代理，</span></span><br><span class="line"><span class="comment">         * Why？因为JDK1.8后，创建单例动态类的性能已经超过了CGLIB了。但在具体生产过程中，我们创建的可能有多个</span></span><br><span class="line"><span class="comment">         * 同类对象，这里还是采用CGLIB。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(Owner.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">        <span class="comment">// 正式创建代理类</span></span><br><span class="line">        Owner owner = (Owner) enhancer.create();</span><br><span class="line">        System.out.println(owner.getClass());</span><br><span class="line">        owner.deal();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Owner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人在干活！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理增强前&quot;</span>);</span><br><span class="line">        methodProxy.invokeSuper(o,objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;代理增强后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码解读：集合类型</title>
      <link href="2021/03/07/Java/%E9%9B%86%E5%90%88%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>2021/03/07/Java/%E9%9B%86%E5%90%88%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="源码解读：集合类型"><a href="#源码解读：集合类型" class="headerlink" title="源码解读：集合类型"></a>源码解读：集合类型</h1><p>在深入到集合类源码之前，这里先给出集合类里几个重要类的继承图</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210307150821751.png" alt="image-20210307150821751"></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ArrayList源码解析：</span></span><br><span class="line"><span class="comment"> * // Default initial capacity.</span></span><br><span class="line"><span class="comment"> * private static final int DEFAULT_CAPACITY = 10;</span></span><br><span class="line"><span class="comment"> * 1. 可调整大小的数组的实现List接口。 实现所有可选列表操作，并允许加入所有元素包括null</span></span><br><span class="line"><span class="comment"> * 2，同时它还提供了一些方法来操纵内部使用的存储列表的数组的大小。 （这个类是大致相当于Vector，不同之处在于它是不同步的）。</span></span><br><span class="line"><span class="comment"> * transient Object[] elementData;</span></span><br><span class="line"><span class="comment"> * 扩容算法：</span></span><br><span class="line"><span class="comment"> *     private void grow(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment"> *         // overflow-conscious code</span></span><br><span class="line"><span class="comment"> *         int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment"> *         int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span></span><br><span class="line"><span class="comment"> *         if (newCapacity - minCapacity &lt; 0)</span></span><br><span class="line"><span class="comment"> *             newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment"> *         if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></span><br><span class="line"><span class="comment"> *             newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment"> *         // minCapacity is usually close to size, so this is a win:</span></span><br><span class="line"><span class="comment"> *         elementData = Arrays.copyOf(elementData, newCapacity);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 扩容机制细节两方面：</span></span><br><span class="line"><span class="comment"> * 1. 创建ArrayList时不设置参数（不设初始容量）</span></span><br><span class="line"><span class="comment"> * 当用户第一次add元素后，内部默认会将他的初始容量设置为10。</span></span><br><span class="line"><span class="comment"> * 若设置初始容量，则在第一次add后不会必须发生扩容</span></span><br><span class="line"><span class="comment"> * 扩容触发条件：</span></span><br><span class="line"><span class="comment"> *         if (minCapacity - elementData.length &gt; 0)</span></span><br><span class="line"><span class="comment"> *             grow(minCapacity);</span></span><br><span class="line"><span class="comment"> * 即容量满时，便会触发。数组实际大小便是阈值</span></span><br><span class="line"><span class="comment"> * 扩容算法会对实际容量扩容1.5倍（newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)）</span></span><br><span class="line"><span class="comment"> * grow算法保证newCapacity必然要大于或等于minCapacity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ArrayList非同步，要同步需在外加上同步代码或使用</span></span><br><span class="line"><span class="comment"> *  List list = Collections.synchronizedList(new ArrayList(...));进行封装</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * All Implemented Interfaces:</span></span><br><span class="line"><span class="comment"> * Serializable ， Cloneable ， Iterable &lt;E&gt;， Collection &lt;E&gt;， Deque &lt;E&gt;， List &lt;E&gt;， Queue &lt;E&gt;</span></span><br><span class="line"><span class="comment"> * 这里简单介绍一下每个接口实现的作用：</span></span><br><span class="line"><span class="comment"> * 1. Serializable ：实现对象序列化</span></span><br><span class="line"><span class="comment"> * 2. Cloneable ：实现深/浅拷贝</span></span><br><span class="line"><span class="comment"> * 3. Iterable ：实现迭代器功能</span></span><br><span class="line"><span class="comment"> * 4. Collection：提供公用的集合接口API</span></span><br><span class="line"><span class="comment"> * 5. List：Collection的深化</span></span><br><span class="line"><span class="comment"> * 6. Queue：提供公用的队列接口API</span></span><br><span class="line"><span class="comment"> * 7. Deque：Queue的深化，提供公用的双端队列接口API</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * LinkedList类实现了以上接口，即表示它具有这些接口的所有功能特性</span></span><br><span class="line"><span class="comment"> * LinkedList不支持同步，如果多线程同时访问并至少有一个线程造成结构修改，则</span></span><br><span class="line"><span class="comment"> * 需要在外部进行同步，或者使用  List list = Collections.synchronizedList(new LinkedList(...));</span></span><br><span class="line"><span class="comment"> * 这样的方式进行封装</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 迭代器 iterator：</span></span><br><span class="line"><span class="comment"> * 如果列表在迭代器创建之后的任何时间被结构化地修改，除了通过迭代器自己的remove或add方法之外，</span></span><br><span class="line"><span class="comment"> * 迭代器将会抛出一个ConcurrentModificationException 。 因此，面对并发修改，迭代器将快速而干净地失败</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大致与ArrayList一致</span></span><br><span class="line"><span class="comment">     * 不同处：</span></span><br><span class="line"><span class="comment">     * 1. 线程同步</span></span><br><span class="line"><span class="comment">     * 2. 扩容机制：</span></span><br><span class="line"><span class="comment">     * Vector向量为用户提供了一个可指定的扩容增量 capacityIncrement;</span></span><br><span class="line"><span class="comment">     * 若用户指定了扩容增量，则每次vector扩容时都扩容一个增量大小；</span></span><br><span class="line"><span class="comment">     * 若用户未指定扩容增量，则每次扩容增大为原来的两倍。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 注意synchronizedList的迭代器内部并没有同步操作，在使用时我们仍要在外面加锁！</span></span><br><span class="line">    List&lt;Integer&gt; synchronizedList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                vector.add(<span class="number">1</span>);</span><br><span class="line">                arrayList.add(<span class="number">1</span>);</span><br><span class="line">                synchronizedList.add(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  synchronized (synchronizedList)&#123;</span></span><br><span class="line"><span class="comment">        ListIterator&lt;Integer&gt; iterator = synchronizedList.listIterator();</span></span><br><span class="line"><span class="comment">        while(iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    System.out.println(vector.size()); <span class="comment">// 线程安全</span></span><br><span class="line">    System.out.println(arrayList.size()); <span class="comment">// 线程不安全</span></span><br><span class="line">    System.out.println(synchronizedList.size()); <span class="comment">// 线程安全</span></span><br><span class="line">    <span class="comment">//10000</span></span><br><span class="line">    <span class="comment">//9999</span></span><br><span class="line">    <span class="comment">//10000</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashMap源码解析：</span></span><br><span class="line"><span class="comment"> * 该类较为复杂这里先介绍关键字段：</span></span><br><span class="line"><span class="comment"> * threshold：阈值，表示散列表内桶的阈值，一旦达到桶的阈值便开始调整大小</span></span><br><span class="line"><span class="comment"> * size：存的数据个数</span></span><br><span class="line"><span class="comment"> * capacity：桶的个数</span></span><br><span class="line"><span class="comment"> * load_factor：负载因子,用于计算桶的阈值，threshold=capacity*load_factor</span></span><br><span class="line"><span class="comment"> * treerfy_capacity：树状阈值默认为8，一旦单链表长度&gt;=8，则单链表转为红黑树结构</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 关键：</span></span><br><span class="line"><span class="comment"> * 一、putVal方法过程解析：</span></span><br><span class="line"><span class="comment"> * 第一次put值时，触发resize()方法自动扩容。即将 capacity 设为16，load_factor设为0.75</span></span><br><span class="line"><span class="comment"> * 此时threshold=12。 Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]; // newCap:capacity</span></span><br><span class="line"><span class="comment"> * 若构造函数有设定容量值，则扩容经一下判断：</span></span><br><span class="line"><span class="comment"> * 情况1.如果传入的initialCapacity小于0，抛异常。</span></span><br><span class="line"><span class="comment"> * 情况2.如果initialCapacity大于最大容量，将最大容量赋予给initialCapacity。</span></span><br><span class="line"><span class="comment"> * 最后3.调用tableSizeFor方法，将initialCapacity转化为一个二次幂的值，然后赋予给threshold。</span></span><br><span class="line"><span class="comment"> * Tip：HashMap初始化时，使用threshold作为HashMap数组的长度。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * hashMap存放数据是以散列表的方式存放的，它根据用户指定的键值key计算对应的hash值，通过hash值作为桶的位置。</span></span><br><span class="line"><span class="comment"> * 1.当HashMap的数组长度为二次幂，能够将键值对均匀分散到数组的每一个位置上。</span></span><br><span class="line"><span class="comment"> * 2.index映射算法和%能够达成一样的效果，并且效率更高效。（index = (n-1)&amp;hash &lt;==&gt; hash%n）</span></span><br><span class="line"><span class="comment"> * 3.Hash算法在设计时利用移位和异或运算符“^”来避免Hash碰撞(将高位也参与到运算中)。（hash = (h = key.hashCode()) ^ </span></span><br><span class="line"><span class="comment"> * (h &gt;&gt;&gt; 16)）</span></span><br><span class="line"><span class="comment"> * 4.如果通过HashMap的构造函数传入的容量是一个非二次幂，HashMap会通过tableSizeFor方法将这个值转化为二次幂的值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 此时会有两种可能：</span></span><br><span class="line"><span class="comment"> * 1. 当前hash值下的桶已被其他键值占用，此时发生哈希碰撞，hashMap通过单链表的方式解决碰撞问题。</span></span><br><span class="line"><span class="comment"> * static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment"> *         final int hash;</span></span><br><span class="line"><span class="comment"> *         final K key;</span></span><br><span class="line"><span class="comment"> *         V value;</span></span><br><span class="line"><span class="comment"> *         Node&lt;K,V&gt; next;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 每个桶存储的就是这样一个Node节点，该结构又能表示单链表。发生碰撞时，它通过遍历这个单链表来put值。</span></span><br><span class="line"><span class="comment"> * 注意：当put上值后单链表的大小大于等于8h且ash桶大于等于64时，触发treeifyBin(tab, hash)方法，</span></span><br><span class="line"><span class="comment"> * 将单链表转为红黑树结构，小于等于6时红黑树转为单链表</span></span><br><span class="line"><span class="comment"> * 2. 未被其它键值占用，此时直接赋值即可：tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、扩容机制</span></span><br><span class="line"><span class="comment"> * putVal():</span></span><br><span class="line"><span class="comment"> *         if (++size &gt; threshold)</span></span><br><span class="line"><span class="comment"> *             resize();</span></span><br><span class="line"><span class="comment"> * 除第一次外：容量翻倍，阈值翻倍！</span></span><br><span class="line"><span class="comment"> * 这里除了第一次外就没有用到过负载因子了，那么负载因子有啥用呢？</span></span><br><span class="line"><span class="comment"> * 首先它是用来计算阈值的，threshold=capacity*load_factor 这么想容量翻倍是不是就意味着阈值翻倍；</span></span><br><span class="line"><span class="comment"> * 那么阈值的作用实际就是负载因子设计值的重要原因了。</span></span><br><span class="line"><span class="comment"> * 阈值决定了hashMap扩容的时机，由于hashMap存取值是散列表的形式，这样的情况下若负载因子取得很大，比如说1，</span></span><br><span class="line"><span class="comment"> * 这就意味着会频繁的发生哈希碰撞，造成性能的极大浪费！而如果阈值设的很小，那么对于散列表的空间利用率就会</span></span><br><span class="line"><span class="comment"> * 变得很低。官方告诉我们在负载因子为0.75的时候对两者的考虑是最契合的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、红黑树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 四、迭代无序</span></span><br><span class="line"><span class="comment"> * LinkedHashMap和TreeMap都可以实现键值迭代有序；其中LinkedHashMap保留了hashMap的性能优越，而</span></span><br><span class="line"><span class="comment"> * treeMap(红黑树)性能不及他们，但它能便捷的实现对其内部元素的各种排序。这里推荐使用LinkedHashMap</span></span><br><span class="line"><span class="comment"> * note: 这里的LinkedHashMap有序指的是按照记录的插入顺序输出；同时LinkedHashMap使用了双链表结构</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">hashMap.put(<span class="string">&quot;we&quot;</span>,<span class="string">&quot;xiniyan&quot;</span>);</span><br><span class="line">hashMap.put(<span class="string">&quot;we233&quot;</span>,<span class="string">&quot;xiniyan2&quot;</span>);</span><br><span class="line"><span class="comment">// 测试有序性</span></span><br><span class="line">hashMap.put(<span class="string">&quot;we133&quot;</span>,<span class="string">&quot;xiniyan3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = hashMap.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//we133</span></span><br><span class="line"><span class="comment">//we</span></span><br><span class="line"><span class="comment">//we233 ,hashMap结果无序(无序指的是取数没有按照放数时的顺序输出)</span></span><br><span class="line"></span><br><span class="line">LinkedHashMap&lt;String, String&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">linkedHashMap.put(<span class="string">&quot;we&quot;</span>,<span class="string">&quot;xiniyan&quot;</span>);</span><br><span class="line">linkedHashMap.put(<span class="string">&quot;we233&quot;</span>,<span class="string">&quot;xiniyan2&quot;</span>);</span><br><span class="line">linkedHashMap.put(<span class="string">&quot;we133&quot;</span>,<span class="string">&quot;xiniyan3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator1 = linkedHashMap.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator1.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//we</span></span><br><span class="line"><span class="comment">//we233</span></span><br><span class="line"><span class="comment">//we133 ,有序</span></span><br><span class="line"></span><br><span class="line">TreeMap&lt;String, String&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">treeMap.put(<span class="string">&quot;we&quot;</span>,<span class="string">&quot;xiniyan&quot;</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;we233&quot;</span>,<span class="string">&quot;xiniyan2&quot;</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;we133&quot;</span>,<span class="string">&quot;xiniyan3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator2 = treeMap.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator2.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator2.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//we</span></span><br><span class="line"><span class="comment">//we133</span></span><br><span class="line"><span class="comment">//we233 ,按键值升序排序</span></span><br></pre></td></tr></table></figure><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负载因子0.75，初始容量11</span></span><br><span class="line"><span class="comment"> * 线程安全</span></span><br><span class="line"><span class="comment"> * 方法体上加synchronize</span></span><br><span class="line"><span class="comment"> * 扩容机制：</span></span><br><span class="line"><span class="comment"> * rehash方法上</span></span><br><span class="line"><span class="comment"> * int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcurrentHashMap源码解析：</span></span><br><span class="line"><span class="comment"> * HashTable是线程安全的，因为在它的方法上加了synchronize关键字，但问题是我们知道同步会造成</span></span><br><span class="line"><span class="comment"> * 线程的阻塞。而当map中桶的容量很大时，任何一个更新操作都会导致其他多数的线程阻塞，造成极大地性能浪费！</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> * 1.7版本以前：通过segment将map中桶分成好几个段。对每个段上锁。这样可以减少线程阻塞的可能。</span></span><br><span class="line"><span class="comment"> * 1.8版本：取消了segment，采用volatile关键字修饰每一个桶（table），实现了table元素变化在所有</span></span><br><span class="line"><span class="comment"> * 线程可见。数据的更新操作采用CAS（乐观锁，不断重试而非阻塞）。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * *个人感觉1.8后HashTable没啥用了</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LinkedHashMap 继承了hashMap类，同时它还保证有序。即按照记录的插入顺序输出；</span></span><br><span class="line"><span class="comment"> * 同时LinkedHashMap使用了双链表结构，，它维护一个双向链表来遍历所有Entry而不是数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public LinkedHashMap(int initialCapacity,</span></span><br><span class="line"><span class="comment"> *                      float loadFactor,</span></span><br><span class="line"><span class="comment"> *                      boolean accessOrder //是否启用LRU)</span></span><br><span class="line"><span class="comment"> * 同时还设置了LRU，以实现一个LRU集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部基于hashMap实现，允许空值</span></span><br><span class="line"><span class="comment"> * 保证元素唯一的方式从hashMap键值对存储看不难理解。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于红黑树，数据存储在NavigableMap中</span></span><br><span class="line"><span class="comment"> * 是一个有序的集合，不允许放入null值</span></span><br><span class="line"><span class="comment"> * 实现NavigableSet接口，具有导航功能</span></span><br><span class="line"><span class="comment"> * 底层由TreeMap和keySet实现。其中TreeMap基于红黑树实现，它按key排序。通过compareTo()来判断重复元素。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">TreeSet&lt;Integer&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">SortedSet s = Collections.synchronizedSortedSet(treeSet);</span><br><span class="line"></span><br><span class="line">System.out.println(treeSet.add(<span class="number">1</span>));</span><br><span class="line">System.out.println(treeSet.add(<span class="number">1</span>));</span><br><span class="line">treeSet.add(<span class="number">5</span>);</span><br><span class="line">treeSet.add(<span class="number">3</span>);</span><br><span class="line">System.out.println(treeSet.ceiling(<span class="number">3</span>));<span class="comment">//返回大于等于给定值的最小值</span></span><br><span class="line">System.out.println(treeSet.floor(<span class="number">3</span>));<span class="comment">//返回小于等于给定值的最大值</span></span><br><span class="line">System.out.println(treeSet.higher(<span class="number">3</span>));<span class="comment">//返回大于给定值的最小值</span></span><br><span class="line">System.out.println(treeSet.lower(<span class="number">3</span>));<span class="comment">//返回小于给定值的最大值</span></span><br><span class="line"><span class="comment">// 默认:[)--[] ， 对应inclusive：headSet(false),tailSet(true)</span></span><br><span class="line">System.out.println(treeSet.headSet(<span class="number">3</span>));<span class="comment">//返回此集合的部分的视图，其元素严格小于toElement</span></span><br><span class="line">System.out.println(treeSet.tailSet(<span class="number">3</span>));<span class="comment">//返回此集合的部分的视图，其元素大于或等于fromElement</span></span><br><span class="line">System.out.println(treeSet);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> 集合类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码解读：包装类型</title>
      <link href="2021/03/07/Java/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/07/Java/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="源码解读：包装类型"><a href="#源码解读：包装类型" class="headerlink" title="源码解读：包装类型"></a>源码解读：包装类型</h1><blockquote><p>因为java是面向对象的，很多时候我们需要用到的是对象而非基本数据类型。因此我们就在每个基本数据类型上都建了一个包装类型，他们具有对象的性质，并添加有属性和方法。这里我们直接开始对包装类源码中的一些独特之处做出解析。</p></blockquote><p>在解读包装类的源码之前我们不妨先谈一谈java中与包装类型相关的语法糖[语法糖就是对现有语法的一个封装,通过编译器实现，可通过javap/jad 等反编译工具观察到]</p><blockquote><p>反编译：执行java之前，我们首先需要将java文件编译为class字节码文件(javac xx.java)，此时编译生成的字节码文件其实就是一个二进制文件，我们用文本编辑器将它打开可以观察到，里面存放了许多重要数据信息，具体可以参考相关文档了解这些二进制信息代表的含义。但问题是我们要想阅读这些二进制信息无疑是困难且繁琐的，这时候就可以<strong>通过反编译工具将字节码文件转为我们可以理解的信息</strong>。其中JDK有给我们自带的反编译工具<code>javap</code>，但它生成的信息更接近字节码，可以让我们更专业的了解到class文件内部的具体细节，jad则是直接生成我们熟知的java高级语法，在后文可以看到。</p></blockquote><h2 id="拆装箱"><a href="#拆装箱" class="headerlink" title="拆装箱"></a>拆装箱</h2><p>拆装箱就是一个简单常见的语法糖。我们在程序中直接对包装类以及基础数据类型操作时，在程序编译过程中编译器就会自动进行拆装箱操作。我们这里可以先通过jad工具进行反编译以更加简单直观的方式观察的拆装箱结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* valueOf():装箱</span></span><br><span class="line"><span class="comment">* intValue:拆箱</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Integer x1 = <span class="keyword">new</span> Integer(<span class="number">101</span>);</span><br><span class="line"><span class="keyword">int</span> x2 = <span class="number">101</span>;</span><br><span class="line">Integer x3 = <span class="number">101</span>;</span><br><span class="line"><span class="comment">// 反编译结果：// Method java/lang/Integer.intValue:()I；包装类自动拆箱</span></span><br><span class="line">System.out.println(x1+x2);</span><br><span class="line"><span class="comment">// Method java/lang/Integer.intValue:()I</span></span><br><span class="line">System.out.println(x1==x2);</span><br><span class="line"><span class="comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;基本类型自动装箱</span></span><br><span class="line">System.out.println(x1.equals(x2));</span><br><span class="line">System.out.println(x1==x3);</span><br></pre></td></tr></table></figure><p>jad反编译结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer x1 = <span class="keyword">new</span> Integer(<span class="number">101</span>);</span><br><span class="line"><span class="keyword">int</span> x2 = <span class="number">101</span>;</span><br><span class="line">Integer x3 = Integer.valueOf(<span class="number">101</span>);</span><br><span class="line">System.out.println(x1.intValue() + x2);</span><br><span class="line">System.out.println(x1.intValue() == x2);</span><br><span class="line">System.out.println(x1.equals(Integer.valueOf(x2)));</span><br><span class="line">System.out.println(x1 == x3);</span><br></pre></td></tr></table></figure><p>观察发现java编译过程确实为我们的代码添加了不少的”额外信息”。这里其实就是所谓的自动拆装箱了。</p><h2 id="字段分析"><a href="#字段分析" class="headerlink" title="字段分析"></a>字段分析</h2><p>在看源码中具体的方法实现之前，我们先看一下里面包含的一些重要字段，先从简单的Integer开始</p><blockquote><p>每个保证类中都存有一个基本数据类型值，它是实现拆箱操作的关键。</p></blockquote><p>在其他包装类中都能发现类似的字段：最大最小值，类对象，<strong>对应基本数据类型值</strong>，位大小等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the minimum value an &#123;<span class="doctag">@code</span> int&#125; can</span></span><br><span class="line"><span class="comment"> * have, -2&lt;sup&gt;31&lt;/sup&gt;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>   MIN_VALUE = <span class="number">0x80000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the maximum value an &#123;<span class="doctag">@code</span> int&#125; can</span></span><br><span class="line"><span class="comment"> * have, 2&lt;sup&gt;31&lt;/sup&gt;-1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>   MAX_VALUE = <span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> Class&#125; instance representing the primitive type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class="string">&quot;int&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * All possible chars for representing a number as a String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span>[] digits = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span> , <span class="string">&#x27;1&#x27;</span> , <span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;3&#x27;</span> , <span class="string">&#x27;4&#x27;</span> , <span class="string">&#x27;5&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span> , <span class="string">&#x27;7&#x27;</span> , <span class="string">&#x27;8&#x27;</span> , <span class="string">&#x27;9&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;d&#x27;</span> , <span class="string">&#x27;e&#x27;</span> , <span class="string">&#x27;f&#x27;</span> , <span class="string">&#x27;g&#x27;</span> , <span class="string">&#x27;h&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span> , <span class="string">&#x27;j&#x27;</span> , <span class="string">&#x27;k&#x27;</span> , <span class="string">&#x27;l&#x27;</span> , <span class="string">&#x27;m&#x27;</span> , <span class="string">&#x27;n&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span> , <span class="string">&#x27;p&#x27;</span> , <span class="string">&#x27;q&#x27;</span> , <span class="string">&#x27;r&#x27;</span> , <span class="string">&#x27;s&#x27;</span> , <span class="string">&#x27;t&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span> , <span class="string">&#x27;v&#x27;</span> , <span class="string">&#x27;w&#x27;</span> , <span class="string">&#x27;x&#x27;</span> , <span class="string">&#x27;y&#x27;</span> , <span class="string">&#x27;z&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The value of the &#123;<span class="doctag">@code</span> Integer&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of bits used to represent an &#123;<span class="doctag">@code</span> int&#125; value in two&#x27;s</span></span><br><span class="line"><span class="comment"> * complement binary form.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">32</span>;</span><br></pre></td></tr></table></figure><p>再比如Short类：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210307125534741.png" alt="image-20210307125534741"></p><h2 id="包装类的缓存机制"><a href="#包装类的缓存机制" class="headerlink" title="包装类的缓存机制"></a>包装类的缓存机制</h2><p>我们先来看一下这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法相信我们大家都不陌生，在装箱过程中使用的就是该方法。但在实际装箱之前还做了一个判断，其中的关键类IntegerCache的命名其实就已经为我们解释了它的作用。这里我们先点进去看一下它内部的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码并不难懂，前面的静态代码块做了个范围的调节功能，重点观察一下代码段</p><p><code>sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;)</code></p><p>它的意思我们仔细想想就能明白无非就是从<code>&quot;java.lang.Integer.IntegerCache.high&quot;</code>这个“地方”获取到要用的参数。它与我们熟悉的<code>System.getProperties()</code>方法类似，但要说出它们的具体区别还是得从源码角度深入分析。</p><p>首先我们要知道JVM的执行逻辑，程序启动时JVM会自动调用<code>initializeSystemClass</code>方法来初始化System类</p><p>在<code>java.lang.System</code>中我们可以看到它的执行逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the system class.  Called after thread initialization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initializeSystemClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VM might invoke JNU_NewStringPlatform() to set those encoding</span></span><br><span class="line">        <span class="comment">// sensitive properties (user.home, user.name, boot.class.path, etc.)</span></span><br><span class="line">        <span class="comment">// during &quot;props&quot; initialization, in which it may need access, via</span></span><br><span class="line">        <span class="comment">// System.getProperty(), to the related system encoding property that</span></span><br><span class="line">        <span class="comment">// have been initialized (put into &quot;props&quot;) at early stage of the</span></span><br><span class="line">        <span class="comment">// initialization. So make sure the &quot;props&quot; is available at the</span></span><br><span class="line">        <span class="comment">// very beginning of the initialization and all system properties to</span></span><br><span class="line">        <span class="comment">// be put into it directly.</span></span><br><span class="line">        props = <span class="keyword">new</span> Properties();</span><br><span class="line">        initProperties(props);  <span class="comment">// initialized by the VM</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// There are certain system configurations that may be controlled by</span></span><br><span class="line">        <span class="comment">// VM options such as the maximum amount of direct memory and</span></span><br><span class="line">        <span class="comment">// Integer cache size used to support the object identity semantics</span></span><br><span class="line">        <span class="comment">// of autoboxing.  Typically, the library will obtain these values</span></span><br><span class="line">        <span class="comment">// from the properties set by the VM.  If the properties are for</span></span><br><span class="line">        <span class="comment">// internal implementation use only, these properties should be</span></span><br><span class="line">        <span class="comment">// removed from the system properties.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// See java.lang.Integer.IntegerCache and the</span></span><br><span class="line">        <span class="comment">// sun.misc.VM.saveAndRemoveProperties method for example.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Save a private copy of the system properties object that</span></span><br><span class="line">        <span class="comment">// can only be accessed by the internal implementation.  Remove</span></span><br><span class="line">        <span class="comment">// certain system properties that are not intended for public access.</span></span><br><span class="line">        sun.misc.VM.saveAndRemoveProperties(props);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lineSeparator = props.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">        sun.misc.Version.init();</span><br><span class="line"></span><br><span class="line">        FileInputStream fdIn = <span class="keyword">new</span> FileInputStream(FileDescriptor.in);</span><br><span class="line">        FileOutputStream fdOut = <span class="keyword">new</span> FileOutputStream(FileDescriptor.out);</span><br><span class="line">        FileOutputStream fdErr = <span class="keyword">new</span> FileOutputStream(FileDescriptor.err);</span><br><span class="line">        setIn0(<span class="keyword">new</span> BufferedInputStream(fdIn));</span><br><span class="line">        setOut0(newPrintStream(fdOut, props.getProperty(<span class="string">&quot;sun.stdout.encoding&quot;</span>)));</span><br><span class="line">        setErr0(newPrintStream(fdErr, props.getProperty(<span class="string">&quot;sun.stderr.encoding&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load the zip library now in order to keep java.util.zip.ZipFile</span></span><br><span class="line">        <span class="comment">// from trying to use itself to load this library later.</span></span><br><span class="line">        loadLibrary(<span class="string">&quot;zip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Setup Java signal handlers for HUP, TERM, and INT (where available).</span></span><br><span class="line">        Terminator.setup();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize any miscellenous operating system settings that need to be</span></span><br><span class="line">        <span class="comment">// set for the class libraries. Currently this is no-op everywhere except</span></span><br><span class="line">        <span class="comment">// for Windows where the process-wide error mode is set before the java.io</span></span><br><span class="line">        <span class="comment">// classes are used.</span></span><br><span class="line">        sun.misc.VM.initializeOSEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The main thread is not added to its thread group in the same</span></span><br><span class="line">        <span class="comment">// way as other threads; we must do it ourselves here.</span></span><br><span class="line">        Thread current = Thread.currentThread();</span><br><span class="line">        current.getThreadGroup().add(current);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register shared secrets</span></span><br><span class="line">        setJavaLangAccess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Subsystems that are invoked during initialization can invoke</span></span><br><span class="line">        <span class="comment">// sun.misc.VM.isBooted() in order to avoid doing things that should</span></span><br><span class="line">        <span class="comment">// wait until the application class loader has been set up.</span></span><br><span class="line">        <span class="comment">// IMPORTANT: Ensure that this remains the last initialization action!</span></span><br><span class="line">        sun.misc.VM.booted();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体实现细节开发者已经在代码中给出了详细的解释，这里在对细节作简要说明：</p><p><code>initProperties(props);</code>初始化参数，我们点进该方法可以看到它是个本地方法，本地方法实现从操作系统中获取全局属性</p><blockquote><p>native 关键字作用？</p><p>首先我们知道java是跨平台的，作为跨平台的代价就是java对于底层操作系统的控制远不如c、c++这些。这个时候java必须开放一个“通道”实现java与操作系统之间的“沟通”，native便是该入口。当JVM要调用一个native方法时，JVM会从本地库中调用该方法，同时该方法通过c语言实现，c语言实现时调用JNI（java native interface）</p></blockquote><p><code>private static native Properties initProperties(Properties props);</code></p><p>接下来是<code>sun.misc.VM.saveAndRemoveProperties(props);</code> 同样点进去看一下源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveAndRemoveProperties</span><span class="params">(Properties var0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (booted) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;System initialization has completed&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        savedProps.putAll(var0);</span><br><span class="line">        String var1 = (String)var0.remove(<span class="string">&quot;sun.nio.MaxDirectMemorySize&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (var1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;-1&quot;</span>)) &#123;</span><br><span class="line">                directMemory = Runtime.getRuntime().maxMemory();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> var2 = Long.parseLong(var1);</span><br><span class="line">                <span class="keyword">if</span> (var2 &gt; -<span class="number">1L</span>) &#123;</span><br><span class="line">                    directMemory = var2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var1 = (String)var0.remove(<span class="string">&quot;sun.nio.PageAlignDirectMemory&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(var1)) &#123;</span><br><span class="line">            pageAlignDirectMemory = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var1 = var0.getProperty(<span class="string">&quot;sun.lang.ClassLoader.allowArraySyntax&quot;</span>);</span><br><span class="line">        allowArraySyntax = var1 == <span class="keyword">null</span> ? defaultAllowArraySyntax : Boolean.parseBoolean(var1);</span><br><span class="line">        var0.remove(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        var0.remove(<span class="string">&quot;sun.zip.disableMemoryMapping&quot;</span>);</span><br><span class="line">        var0.remove(<span class="string">&quot;sun.java.launcher.diag&quot;</span>);</span><br><span class="line">        var0.remove(<span class="string">&quot;sun.cds.enableSharedLookupCache&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>认真看一下这串代码，它的实际实现的是不是这样一个过程：</p><ol><li><code>savedProps.putAll(var0);</code>：系统参数备份到VM类中</li><li><code>var0.remove()</code> :  将系统类中某些指定参数移除</li><li><code>directMemory|pageAlignDirectMemory|allowArraySyntax</code>：对VM类中的特定属性赋值</li></ol><p>我们想一想这样做的目的是什么？</p><p>开发者告诉我们的是：保存只能由内部实现访问的系统属性对象的私有副本，删除某些不用于公共访问的系统属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save a private copy of the system properties object that</span></span><br><span class="line"><span class="comment">// can only be accessed by the internal implementation.  Remove</span></span><br><span class="line"><span class="comment">// certain system properties that are not intended for public access.</span></span><br><span class="line">sun.misc.VM.saveAndRemoveProperties(props);</span><br></pre></td></tr></table></figure><p>它这样设计主要还是为了安全考虑和隔离角度考虑，避免JVM的内部行为受到运行时用户代码对<code>System.properties</code>的修改所干扰。</p><p>所以我们在给JVM设置参数的时候往往写在运行时的 VM options 上。例如这里的<code>java.lang.Integer.IntegerCache.high</code></p><p>我们可以在VM options 上写<code>-Djava.lang.Integer.IntegerCache.high=xxx</code></p><p>这里可以自己试一试，看一下有没有效果：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210307141759023.png" alt="image-20210307141759023"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer x1 = <span class="number">222</span>;</span><br><span class="line">Integer x2 = <span class="number">222</span>;</span><br><span class="line">System.out.println(VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>));</span><br><span class="line">System.out.println(System.getProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>));</span><br><span class="line">System.out.println(x1 == x2);</span><br><span class="line"><span class="comment">//返回结果：</span></span><br><span class="line"><span class="comment">//300</span></span><br><span class="line"><span class="comment">//null</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><code>initializeSystemClass</code> 方法看到这里其实已经可以解释我们一开始的遇到的问题了，即<code>sun.misc.VM.getSavedProperty()</code> 方法与 <code>System.getProperties()</code>方法的区别。</p><p>至于后面代码块的内容与本篇内容无关，在这里不做过多解释。</p><p>我们继续回到<code>IntegerCache</code>类，后面的内容果然和我们一开始想的一致，它的实现就是类似于“缓存”的机制。该类在加载之初就已经自动实例化了默认范围[-128,127]的Integer对象。分别存储在cache[]数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">cache[k] = <span class="keyword">new</span> Integer(j++);</span><br></pre></td></tr></table></figure><p>这样一来我们在该范围内所获取的同一个指定值，是不是都是同一个对象了。</p><p>可是这么做又有什么好处呢？</p><p>它的作用其实就是类似于缓存的作用。我们在创建大量Integer对象时可以减少内存的分配（大量Integer对象就在指定范围内创建）。而内存分配少了，JVM gc 次数是不是就少了，gc 次数少了，程序执行效率自然也就提高了。</p><p>回过头来我们再看一下Short、Long、Byte、Character类，他们同样都有缓存机制，然而并不能手动调节缓存的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> 包装类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper深入理解</title>
      <link href="2021/03/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/zookeeper/"/>
      <url>2021/03/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/zookeeper/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘自：<a href="https://zhuanlan.zhihu.com/p/69114539">https://zhuanlan.zhihu.com/p/69114539</a></p><p>供参考：<a href="https://blog.csdn.net/zl1zl2zl3/article/details/103205460?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/zl1zl2zl3/article/details/103205460?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><p>集群搭建参考：<a href="https://www.cnblogs.com/ysocean/p/9860529.html">https://www.cnblogs.com/ysocean/p/9860529.html</a></p></blockquote><h1 id="为什么需要-Zookeeper"><a href="#为什么需要-Zookeeper" class="headerlink" title="为什么需要 Zookeeper"></a>为什么需要 Zookeeper</h1><p>很多中间件，比如Kafka、Hadoop、HBase，都用到了 Zookeeper，于是很多人就会去了解这个 Zookeeper 到底是什么，为什么它在分布式系统里有着如此无可替代的地位。</p><p>在踩了很多坑之后，我决定来回答下这个问题。</p><p><strong>其实学任何一项技术，首先都要弄明白，为什么需要这项技术。</strong></p><h2 id="为什么需要-Zookeeper-1"><a href="#为什么需要-Zookeeper-1" class="headerlink" title="为什么需要 Zookeeper"></a>为什么需要 Zookeeper</h2><p><strong>正经点来回答，就是我们需要一个用起来像单机但是又比单机更可靠的东西。</strong></p><p>下面开始不正经的回答。</p><p>一个团队里面，需要一个leader，leader是干嘛用的？管理什么的咱不说，就说如果外面的人，想问关于这个团队的一切事情，首先就会去找这个leader，因为他知道的最多，而且他的回答最靠谱。</p><p>比如产品经理小饼过来要人，作为leader，老吕发现小耀最近没有项目安排，于是把小耀安排给了小饼的项目；</p><p>过了一会，另一个产品小西也过来要人，老吕发现刚刚把小耀安排走了，已经没人，于是就跟小西说，人都被你们产品要走了，你们产品自己去协调去。</p><p><img src="https://pic2.zhimg.com/80/v2-a8680b2d25fdb1514a67b2a6c6ce29ad_720w.jpg" alt="img"></p><p>如果老吕这时候忘了小耀已经被安排走了，把小耀也分配给小西，那到时两个产品就要打架了。</p><p>这就是leader在团队里的<strong>协调作用</strong>。</p><p>同样的，在分布式系统中，也需要这样的协调者，来回答系统下各个节点的提问。</p><p>比如我们搭建了一个数据库集群，里面有一个Master，多个Slave，Master负责写，Slave只读，我们需要一个系统，来告诉客户端，哪个是Master。</p><p>有人说，很简单，我们把这个信息写到一个Java服务器的内存就好了，用一个map，key:master，value:master机器对应的ip</p><p><img src="https://pic3.zhimg.com/80/v2-0095c9a6e471cd92e80cd77a9909eba6_720w.jpg" alt="img"></p><p>但是别忘了，这是个单机，一旦这个机器挂了，就完蛋了，客户端将无法知道到底哪个是Master。</p><p>于是开始进行拓展，拓展成三台服务器的集群。</p><p><img src="https://pic1.zhimg.com/80/v2-ddfe9dbf5ae13ca335e804ae5124181c_720w.jpg" alt="img"></p><p>这下问题来了，如果我在其中一台机器修改了Master的ip，数据还没同步到其他两台，这时候客户端过来查询，如果查询走的是另外两台还没有同步到的机器，就会拿到旧的数据，往已经不是master的机器写数据。</p><p>所以我们需要这个存储master信息的服务器集群，做到当信息还没同步完成时，不对外提供服务，阻塞住查询请求，等待信息同步完成，再给查询请求返回信息。</p><p>这样一来，请求就会变慢，变慢的时间取决于什么时候这个集群认为数据同步完成了。</p><p>假设这个数据同步时间无限短，比如是1微妙，可以忽略不计，那么其实这个分布式系统，就和我们之前单机的系统一样，既可以保证数据的一致，又让外界感知不到请求阻塞，同时，又不会有SPOF（Single Point of Failure）的风险，即不会因为一台机器的宕机，导致整个系统不可用。</p><p><strong>这样的系统，就叫分布式协调系统。谁能把这个数据同步的时间压缩的更短，谁的请求响应就更快，谁就更出色，Zookeeper就是其中的佼佼者。</strong></p><p><strong>它用起来像单机一样，能够提供数据强一致性，但是其实背后是多台机器构成的集群，不会有SPOF。</strong></p><p>其实就是CAP理论中，满足CP，不满足A的那类分布式系统。</p><p>如果把各个节点比作各种小动物，那协调者，就是动物园管理员，这也就是Zookeeper名称的由来了，从名字就可以看出来它的雄心勃勃。</p><p>讲完了上面这些，现在再来看官网这句话，就很能理解了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper: A Distributed Coordination Service for Distributed Applications</span><br></pre></td></tr></table></figure><p>当然还有这句：</p><p><img src="https://pic3.zhimg.com/80/v2-cbf1a84a21a2a752246c7869159104ca_720w.jpg" alt="img"></p><p>而以往的很多ZK教程，上来就是“Zookeeper是开源的分布式应用协调系统”blabla，很多像我这样的小年轻看到就会很费解，到底什么是分布式协调，为什么分布式就需要协调 …</p><p>上面只是回答了我自己提出的问题，为什么需要Zookeeper，或者说，为什么需要分布式协调系统，如果想进一步学习 ZK，你还需要了解下 Zookeeper 的内部实现原理。</p><p>比如 ZK 的宏观结构：</p><p><img src="https://pic4.zhimg.com/80/v2-47dfeb81a0173717f73c429d9a790b2f_720w.jpg" alt="img"></p><p>到 ZK 的微观：</p><p><img src="https://pic2.zhimg.com/80/v2-f5580e0b031e713b72ac474d046dfe1d_720w.jpg" alt="img"></p><p>再到 ZK 是如何实现高性能的强一致的，即ZAB协议的原理，很多教程上来就开始介绍ZAB协议，很容易让人一头雾水，不知道为什么需要这样一个分布式一致性协议，有了上述介绍的背景，就好懂许多。</p><p>当然你还可以比较一下最近几年很火的 etcd 跟 ZK 的差别。</p><p>最后推荐两份 ZK 的学习资源：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//zookeeper.apache.org/doc/r3.5.5/zookeeperOver.html">ZK官网</a></li><li>《从 Paxos 到 Zookeeper》</li></ul><p>看完这篇文章之后，读者可能还有疑问，为什么就一定要用 Zookeeper，我用其他的也可以呀。</p><p>这点是我的锅，在写这篇文章时，我还是把 Zookeeper 等价成了分布式协调服务，把为什么需要 Zookeeper 这个问题，等价成了 「为什么需要分布式协调服务」，其实这样是有问题的，因为想做分布式协调服务，不一定需要ZK这种CP的中间件，用AP也可以。</p><p><strong>而到底是用AP还是CP，是由业务决定的。</strong></p><p>比如你是一个文件上传的服务器，用户可能上传几个g的文件，那么如果用一个AP的系统，拿到的可能是不可用的节点，这样返回给客户端重试，客户端肯定得疯掉，这时候就需要用CP。</p><p>而像 rpc 调用，调用失败了重试就好，成本代价都不大，这时候，用AP可能会更合适。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ 消息队列的使用</title>
      <link href="2021/03/02/%E4%B8%AD%E9%97%B4%E4%BB%B6/ActiveMQ/"/>
      <url>2021/03/02/%E4%B8%AD%E9%97%B4%E4%BB%B6/ActiveMQ/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/qq_43652509/article/details/83926758">https://blog.csdn.net/qq_43652509/article/details/83926758</a></p><h1 id="一、-ActiveMQ-消息队列的使用"><a href="#一、-ActiveMQ-消息队列的使用" class="headerlink" title="一、 ActiveMQ 消息队列的使用"></a>一、 ActiveMQ 消息队列的使用</h1><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><blockquote><p>三大特性：异步（也可以同步，在connectionFactory处设置，或url加参即可）、解耦、削峰</p></blockquote><p>MQ:Message Queue 消息队列，就是用来在系统之间进行消息传递的</p><p>这个队列有一系列具体的实现技术：ActiveMQ、rabbitMQ、kafka、RocketMQ(alibaba)</p><h3 id="HttpCilent和MQ的比较"><a href="#HttpCilent和MQ的比较" class="headerlink" title="HttpCilent和MQ的比较"></a>HttpCilent和MQ的比较</h3><p>1 HttpClient只能算是两个系统间调用的技术</p><p>HttpClient支持跨操作系统跨语言调用</p><p>2 MQ可以在两个系统间进行信息交互，并且支持高并发</p><p>ActiveMQ支持跨操作系统的java语言中通信<br>rabbitMQ支持跨操作系统跨编程语言间的通信   </p><h2 id="1、ActiveMQ简介"><a href="#1、ActiveMQ简介" class="headerlink" title="1、ActiveMQ简介"></a>1、ActiveMQ简介</h2><h3 id="什么是ActiveMQ"><a href="#什么是ActiveMQ" class="headerlink" title="什么是ActiveMQ"></a>什么是ActiveMQ</h3><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110094050394.jpg" alt="在这里插入图片描述"></p><h3 id="ActiveMQ工作原理：在本系统中的调用"><a href="#ActiveMQ工作原理：在本系统中的调用" class="headerlink" title="ActiveMQ工作原理：在本系统中的调用"></a>ActiveMQ工作原理：在本系统中的调用</h3><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/2018111009410152.jpg" alt="在这里插入图片描述"></p><p>1、 解决服务之间代码耦合</p><p>2、 使用消息队列，增加系统并发处理量</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110094111673.png" alt="在这里插入图片描述"></p><h3 id="ActiveMQ应用场景分析："><a href="#ActiveMQ应用场景分析：" class="headerlink" title="ActiveMQ应用场景分析："></a>ActiveMQ应用场景分析：</h3><p>1、 当系统使用短信平台、邮件平台的时候。</p><p>用户注册，重点使用用户信息数据库保存，而发短信、发邮件，增加业务处理复杂度，这时候使用MQ， 将发短信、发邮箱，通知MQ，由另外服务平台完成。解决了代码的耦合问题。</p><p>2、 当系统使用搜索平台、缓存平台的时候。</p><p>查询数据，建立缓存、索引 ，当再次查询相同数据的时候，不从数据库查询，从缓存或者索引库查询</p><p>当增加、修改、删除数据时，发送消息给MQ， 缓存平台、索引平台 从MQ获取到这个信息，更新缓存或者索引</p><p>总结：使用MQ作为系统间数据调用的中转站。</p><h2 id="2、ActiveMQ安装和使用"><a href="#2、ActiveMQ安装和使用" class="headerlink" title="2、ActiveMQ安装和使用"></a>2、ActiveMQ安装和使用</h2><h4 id="1、ActiveMQ安装"><a href="#1、ActiveMQ安装" class="headerlink" title="1、ActiveMQ安装"></a>1、ActiveMQ安装</h4><p>官网：<a href="http://activemq.apache.org/">http://activemq.apache.org/</a></p><p>访问：<a href="http://localhost:8161/">http://localhost:8161/</a> 点击：Manage ActiveMQ broker</p><p>用户名和密码 都是admin </p><p>ActiveMQ使用的是标准生产者和消费者模型</p><p>有两种数据结构 Queue、Topic (详见4.2)<br>1、Queue 队列（P2P消息模型） ，生产者生产了一个消息，只能由一个消费者进行消费 ：给微信好友发消息</p><p>2、Topic 主题/广播（Pub/Sub消息模型），生产者生产了一个消息，可以由多个消费者进行消费</p><p>微信公众号给粉丝发消息<br>JMS和ActiveMQ的对应</p><div class="table-container"><table><thead><tr><th>JMS消息模型</th><th>P2P模式</th><th>pub/sub模式</th></tr></thead><tbody><tr><td>ActiveMQ消息</td><td>Queue队列</td><td>Topic队列</td></tr><tr><td>特点</td><td>一对一，一个人发送，只允许一个人接收</td><td>一对多，一个人发送，允许多个人接收</td></tr></tbody></table></div><p>发送的人：生产者<br>接收的人：消费者 </p><h4 id="2、使用Java程序操作ActiveMQ"><a href="#2、使用Java程序操作ActiveMQ" class="headerlink" title="2、使用Java程序操作ActiveMQ"></a>2、使用Java程序操作ActiveMQ</h4><h5 id="2-1、Queue-HelloWorld"><a href="#2-1、Queue-HelloWorld" class="headerlink" title="2.1、Queue-HelloWorld"></a>2.1、Queue-HelloWorld</h5><h6 id="2-1-1、pom"><a href="#2-1-1、pom" class="headerlink" title="2.1.1、pom"></a>2.1.1、pom</h6><dependencies>    <dependency>        <groupId>org.apache.activemq</groupId>        <artifactId>activemq-all</artifactId>        <version>5.14.0</version>    </dependency></dependencies><h6 id="2-1-2、编写生产者"><a href="#2-1-2、编写生产者" class="headerlink" title="2.1.2、编写生产者"></a>2.1.2、编写生产者</h6><p>使用JMS原生API编写测试类，向消息中间件写入消息的开发步骤：</p><p>1 创建链接工厂<br>2 从链接工厂中获取链接<br>3 启动链接<br>4 获取会话<br>5 创建Queue队列<br>6 创建生产者<br>7 创建消息<br>8 发送消息<br>9 提交请求<br>10 关闭各种资源</p><p>第一步：在test/java包中，创建包activeMQ_helloworld，创建类ActiveMQProducter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQProducter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 连接工厂</span></span><br><span class="line">        <span class="comment">// 使用默认用户名、密码、路径</span></span><br><span class="line">        <span class="comment">// 因为：底层实现：final String defaultURL = &quot;tcp://&quot; + DEFAULT_BROKER_HOST + &quot;:&quot; + DEFAULT_BROKER_PORT;</span></span><br><span class="line">        <span class="comment">// 所以：路径 tcp://host:61616</span></span><br><span class="line">        <span class="comment">//1 创建连接工厂</span></span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory();</span><br><span class="line">        <span class="comment">//2 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3 打开连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4 创建会话</span></span><br><span class="line">        <span class="comment">//第一个参数：是否开启事务</span></span><br><span class="line">        <span class="comment">//第二个参数：消息是否自动确认</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        Queue queue = session.createQueue(<span class="string">&quot;hello1115&quot;</span>);</span><br><span class="line">        <span class="comment">//5 创建生产者</span></span><br><span class="line">        MessageProducer producer = session.createProducer(queue);</span><br><span class="line">         <span class="comment">// 更加细粒度的消息生产者可以提供更细节的发送请求（具备回调，保证可靠的异步发送）</span></span><br><span class="line"><span class="comment">//            ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(queue);</span></span><br><span class="line">        <span class="comment">//6 创建消息</span></span><br><span class="line">        Message message = session.createTextMessage(<span class="string">&quot;hi i am boy&quot;</span>);</span><br><span class="line">        <span class="comment">//7 发送消息</span></span><br><span class="line">        producer.send(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8 关闭消息</span></span><br><span class="line">        session.commit();</span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息生产成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：运行代码，在控制台提示：</p><p>第三步：查看页面效果，默认tcp连接activeMQ端口 61616 ！！！</p><h6 id="2-1-3、编写消费者"><a href="#2-1-3、编写消费者" class="headerlink" title="2.1.3、编写消费者"></a>2.1.3、编写消费者</h6><p>使用JMS原生API编写测试类，向消息中间件消费消息的开发步骤：</p><p>1 创建链接工厂<br>2 创建链接<br>3 启动链接<br>4 获取会话<br>5 创建队列<br>6 创建消费者<br>7 消费消息<br>8 提交<br>9 关闭资源</p><p>第一步：使用MessageConsumer完成消费ActiveMQConsumer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory();</span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//开启连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//创建会话</span></span><br><span class="line">        <span class="comment">/** 第一个参数，是否使用事务</span></span><br><span class="line"><span class="comment">         如果设置true，操作消息队列后，必须使用 session.commit();</span></span><br><span class="line"><span class="comment">         如果设置false，操作消息队列后，不使用session.commit();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        Queue queue = session.createQueue(<span class="string">&quot;hello1115&quot;</span>);</span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//失效时间，如果10秒内没有收到新的消息，说明没有消息存在，此时可以退出当前循环</span></span><br><span class="line">            TextMessage message = (TextMessage) consumer.receive(<span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">if</span>(message!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(message.getText());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消费结束0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：查看控制台，发现信息已经被消费</p><p>第三步：查看页面效果</p><p>访问：<a href="http://localhost:8161/">http://localhost:8161/</a> 点击：Manage ActiveMQ broker</p><p>用户名和密码 都是admin </p><p>消费前：表示没有消费</p><p>消费后：表示已经消费</p><h6 id="2-1-4、监听器消费消息"><a href="#2-1-4、监听器消费消息" class="headerlink" title="2.1.4、监听器消费消息"></a>2.1.4、监听器消费消息</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用监听器消费</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 连接工厂</span></span><br><span class="line">    <span class="comment">// 使用默认用户名、密码、路径</span></span><br><span class="line">    <span class="comment">// 路径 tcp://host:61616</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory();</span><br><span class="line">    <span class="comment">// 获取一个连接</span></span><br><span class="line">    Connection connection = connectionFactory.createConnection();</span><br><span class="line">    <span class="comment">// 开启连接</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">// 建立会话</span></span><br><span class="line">    <span class="comment">// 第一个参数，是否使用事务，如果设置true，操作消息队列后，必须使用 session.commit();</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">// 创建队列或者话题对象</span></span><br><span class="line">    Queue queue = session.createQueue(<span class="string">&quot;Hello1115&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建消费者</span></span><br><span class="line">    MessageConsumer messageConsumer = session.createConsumer(queue);</span><br><span class="line">    messageConsumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">        <span class="comment">// 每次接收消息，自动调用 onMessage</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">            TextMessage textMessage = (TextMessage) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(textMessage.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//此时，不能让程序结束，如果结束，监听就结束了</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 目的：不能让程序死掉</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 或者System.in.read();</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>重复测试生成和消费的过程。实现一边生产，一边消费的系统。</p><h5 id="2-2、多消费者模式-queue"><a href="#2-2、多消费者模式-queue" class="headerlink" title="2.2、多消费者模式-queue"></a>2.2、多消费者模式-queue</h5><p>P2P消息模型中的多消费者模式，得出结论如下：</p><p>一个消息只能被一个消费者消费，不可重复消费<br>多个消费者均分消息(负载均衡策略)<br>当消费者在消费某个消息的时候，mq一定要等到它的成功回执，才会分发下一个消息</p><p>注意：测试的时候一定先启动消费者，然后再启动生产者</p><h4 id="3、Topic-HelloWorld"><a href="#3、Topic-HelloWorld" class="headerlink" title="3、Topic-HelloWorld"></a>3、Topic-HelloWorld</h4><p>Topic：主题模式、广播模式、pus/sub模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4 获取会话</span></span><br><span class="line"><span class="comment">// 第一个参数：是否开启事务  true 开启事务，后面一定要提交commit</span></span><br><span class="line"><span class="comment">// 第二个参数：是否自动确认消息已经被消费</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">true</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5 创建Topic主题模式</span></span><br><span class="line"><span class="comment">//Queue queue = session.createQueue(&quot;java1.0913&quot;);</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">&quot;java1.0319&quot;</span>);</span><br><span class="line"><span class="comment">//6 创建生产者</span></span><br><span class="line">MessageProducer producer = session.createProducer(topic);</span><br></pre></td></tr></table></figure><p>3.1、多消费者模式-topic</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110094542861.png" alt="在这里插入图片描述"></p><h4 id="4、queue和topic模式的比较"><a href="#4、queue和topic模式的比较" class="headerlink" title="4、queue和topic模式的比较"></a>4、queue和topic模式的比较</h4><h5 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h5><p>1、都只有一个生产者</p><p>2、都可以有多个消费者</p><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><p>1、queue队列模式，一个消息只能被一个消费者消费，不能重复消费</p><p>当消费者消费某个消息的时候，一定要得到这个消息被成功消费的回执，才会分发下一个消息<br>queue入队之后，无论等待多久，消息都会一直等待消费者来处理</p><p>2、topic广播模式，一个消息可以被多个消费者消费</p><p>这个消息无法被成功消费与否，都无所谓</p><p>topic要求时间要一致，我正好发，你正好收</p><h4 id="5、SpringBoot整合ActiveMQ"><a href="#5、SpringBoot整合ActiveMQ" class="headerlink" title="5、SpringBoot整合ActiveMQ"></a>5、SpringBoot整合ActiveMQ</h4><p>在Spring Boot中集成ActiveMQ相对还是比较简单的，都不需要安装什么服务，默认使用内存的activeMQ，当然配合外置ActiveMQ Server会更好。</p><p>我们采用外置ActiveMQ。<br>1、在common_parent中导入activeMQ的启动器</p><!-- ActiveMQ的启动器 --><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-activemq</artifactId></dependency><p>2、创建boot-mq子模块</p><p>3、添加项目依赖</p><p><dependencies><br>    <dependency><br>        <groupId>org.springframework.boot</groupId><br>        <artifactId>spring-boot-starter</artifactId>    </dependency><br>    <!-- ActiveMQ的启动器 --><br>    <dependency><br>        <groupId>org.springframework.boot</groupId><br>        <artifactId>spring-boot-starter-activemq</artifactId>    </dependency></dependencies><br>4、创建程序入口</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BosMqApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BosMqApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、创建application.properties，具体配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.activemq.broker-url</span>=<span class="string">tcp://127.0.0.1:61616</span></span><br><span class="line"><span class="comment"># 在考虑结束之前等待的时间</span></span><br><span class="line"><span class="comment">#spring.activemq.close-timeout=15s </span></span><br><span class="line"><span class="comment"># 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。</span></span><br><span class="line"><span class="meta">spring.activemq.in-memory</span>=<span class="string">true </span></span><br><span class="line"><span class="comment"># 是否在回滚回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。</span></span><br><span class="line"><span class="meta">spring.activemq.non-blocking-redelivery</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="meta">spring.activemq.password</span>=<span class="string">admin</span></span><br><span class="line"><span class="comment"># 等待消息发送响应的时间。设置为0等待永远。</span></span><br><span class="line"><span class="meta">spring.activemq.user</span>=<span class="string">admin</span></span><br><span class="line"><span class="comment"># 是否信任所有包</span></span><br><span class="line"><span class="comment">#spring.activemq.packages.trust-all=</span></span><br><span class="line"><span class="comment"># 要信任的特定包的逗号分隔列表（当不信任所有包时）</span></span><br><span class="line"><span class="comment">#spring.activemq.packages.trusted=</span></span><br><span class="line"><span class="comment"># 当连接请求和池满时是否阻塞。设置false会抛“JMSException异常”。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.block-if-full=true</span></span><br><span class="line"><span class="comment"># 如果池仍然满，则在抛出异常前阻塞时间。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.block-if-full-timeout=-1ms</span></span><br><span class="line"><span class="comment"># 是否在启动时创建连接。可以在启动时用于加热池。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.create-connection-on-startup=true</span></span><br><span class="line"><span class="comment"># 是否用Pooledconnectionfactory代替普通的ConnectionFactory。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.enabled=false </span></span><br><span class="line"><span class="comment"># 连接过期超时。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.expiry-timeout=0ms</span></span><br><span class="line"><span class="comment"># 连接空闲超时</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.idle-timeout=30s</span></span><br><span class="line"><span class="comment"># 连接池最大连接数</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.max-connections=1</span></span><br><span class="line"><span class="comment"># 每个连接的有效会话的最大数目。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.maximum-active-session-per-connection=500</span></span><br><span class="line"><span class="comment"># 当有&quot;JMSException&quot;时尝试重新连接</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.reconnect-on-exception=true</span></span><br><span class="line"><span class="comment"># 在空闲连接清除线程之间运行的时间。当为负数时，没有空闲连接驱逐线程运行。</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.time-between-expiration-check=-1ms</span></span><br><span class="line"><span class="comment"># 是否只使用一个MessageProducer</span></span><br><span class="line"><span class="comment">#spring.activemq.pool.use-anonymous-producers=true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、创建config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czxy.config;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.command.ActiveMQTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(<span class="string">&quot;Armyman.queue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Topic <span class="title">topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActiveMQTopic(<span class="string">&quot;Armyman.topic&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-1、编写消费者和生产者"><a href="#5-1、编写消费者和生产者" class="headerlink" title="5.1、编写消费者和生产者"></a>5.1、编写消费者和生产者</h5><p>1、编写生产者QueueProducer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 消息的生产者 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueProducer</span> </span>&#123;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Autowired // 也可以注入JmsTemplate，JmsMessagingTemplate对JmsTemplate进行了封装</span></span><br><span class="line"><span class="comment"> * private JmsMessagingTemplate jmsTemplate; //</span></span><br><span class="line"><span class="comment"> * 发送消息，destination是发送到的队列，message是待发送的消息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @Scheduled(fixedDelay=3000)//每3s执行1次 </span></span><br><span class="line"><span class="comment">   public void sendMessage(Destination destination, final String message)&#123;</span></span><br><span class="line"><span class="comment">      jmsTemplate.convertAndSend(destination, message); </span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay=3000)</span><span class="comment">//每3s执行1次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">   MapMessage mapMessage = <span class="keyword">new</span> ActiveMQMapMessage();</span><br><span class="line">   mapMessage.setString(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;你还在睡觉&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">this</span>.jmsMessagingTemplate.convertAndSend(<span class="keyword">this</span>.queue, mapMessage);</span><br><span class="line">   </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、编写消费者QueueConsumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息的消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConsumer</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//使用JmsListener配置消费者监听的队列，其中Message是接收到的消息  </span></span><br><span class="line"><span class="meta">@JmsListener(destination = &quot;Armyman.queue&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueue</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MapMessage mapMessage = (MapMessage) message;</span><br><span class="line">String info = mapMessage.getString(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">System.out.println(info);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、启动，测试，OK</p><h5 id="5-2-使用内置ActiveMQ"><a href="#5-2-使用内置ActiveMQ" class="headerlink" title="5.2 使用内置ActiveMQ"></a>5.2 使用内置ActiveMQ</h5><p>只需要改变properties配置文件，即可运行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MQ所在的服务器的地址</span></span><br><span class="line"><span class="comment"># spring.activemq.broker-url=tcp://127.0.0.1:61616</span></span><br><span class="line"><span class="comment"># 是否使用SpringBoot内置的MQ， true  使用； fale  不使用</span></span><br><span class="line"><span class="meta">spring.activemq.in-memory</span>=<span class="string">true </span></span><br><span class="line"><span class="comment"># 是否在回滚回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。</span></span><br><span class="line"><span class="meta">spring.activemq.non-blocking-redelivery</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="comment">#spring.activemq.user=admin</span></span><br><span class="line"><span class="comment"># spring.activemq.password=admin</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-应用场景："><a href="#3-应用场景：" class="headerlink" title="3 应用场景："></a>3 应用场景：</h2><p>用在高并发的请求中</p><ul><li>注册短信的发送</li><li>注册邮件的发送</li><li>秒杀</li><li>两个系统间进行消息传递</li></ul><h3 id="3-1、消息队列应用场景"><a href="#3-1、消息队列应用场景" class="headerlink" title="3.1、消息队列应用场景"></a>3.1、消息队列应用场景</h3><p>以下介绍消息队列在实际应用中常用的使用场景。</p><p>异步处理，应用解耦，流量削锋和消息通讯四个场景</p><h4 id="3-1-1异步处理"><a href="#3-1-1异步处理" class="headerlink" title="3.1.1异步处理"></a>3.1.1异步处理</h4><p>场景说明：用户注册后，需要发注册邮件和注册短信。传统的做法有两种:</p><p>1.串行方式；2.并行方式</p><p>（1）串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端</p><p>（2）并行方式：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110095350161.jpg" alt="在这里插入图片描述"></p><p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。</p><p>因为CPU在单位时间内处理的请求数是一定的，假设CPU在1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）</p><p>小结：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p><p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110095403937.jpg" alt="在这里插入图片描述"></p><p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20 QPS。比串行提高了3倍，比并行提高了2倍</p><h4 id="3-1-2应用解耦"><a href="#3-1-2应用解耦" class="headerlink" title="3.1.2应用解耦"></a>3.1.2应用解耦</h4><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。</p><p>传统模式的缺点：</p><p>l 假如库存系统无法访问，则订单减库存将失败，从而导致订单失败</p><p>l 订单系统与库存系统耦合</p><p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110095423736.jpg" alt="在这里插入图片描述"></p><p>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</p><p>库存系统：订阅下单的消息，采用pub/sub(发布/订阅)的方式，获取下单信息，库存系统根据下单信息，进行库存操作</p><p>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦</p><h4 id="3-1-3流量削锋"><a href="#3-1-3流量削锋" class="headerlink" title="3.1.3流量削锋"></a>3.1.3流量削锋</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛</p><p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p><p>可以控制活动的人数</p><p>可以缓解短时间内高流量压垮应用</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/2018111009543822.jpg" alt="在这里插入图片描述"></p><p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面</p><p>秒杀业务根据消息队列中的请求信息，再做后续处理</p><h4 id="3-1-4日志处理"><a href="#3-1-4日志处理" class="headerlink" title="3.1.4日志处理"></a>3.1.4日志处理</h4><p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20181110095454192.jpg" alt="在这里插入图片描述"></p><p>日志采集客户端，负责日志数据采集，定时写受写入Kafka队列</p><p>Kafka消息队列，负责日志数据的接收，存储和转发</p><p>日志处理应用：订阅并消费kafka队列中的日志数据[外链图片转存失败(img-gzmTdxhA-1567492404919)(assets/wps3257.tmp.jpg)]</p><p>(1)Kafka：接收用户日志的消息队列</p><p>(2)Logstash：做日志解析，统一成JSON输出给Elasticsearch</p><p>(3)Elasticsearch：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能</p><p>(4)Kibana：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因</p><h4 id="3-1-5消息通讯"><a href="#3-1-5消息通讯" class="headerlink" title="3.1.5消息通讯"></a>3.1.5消息通讯</h4><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等</p><p>点对点通讯：</p><p>客户端A和客户端B使用同一队列，进行消息通讯。</p><p>聊天室通讯：</p><p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p><p>以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。</p><h3 id="3-2、JMS消息服务"><a href="#3-2、JMS消息服务" class="headerlink" title="3.2、JMS消息服务"></a>3.2、JMS消息服务</h3><p>消息队列的JAVAEE规范JMS 。JMS（Java Message Service,java消息服务）API是一个消息服务的标准/规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。</p><h4 id="3-2-1-消息模型"><a href="#3-2-1-消息模型" class="headerlink" title="3.2.1 消息模型"></a>3.2.1 消息模型</h4><p>在JMS标准中，有两种消息模型P2P（Point to Point）,Publish/Subscribe(Pub/Sub)。</p><h4 id="3-2-2-P2P模式-队列模式"><a href="#3-2-2-P2P模式-队列模式" class="headerlink" title="3.2.2 P2P模式-队列模式"></a>3.2.2 P2P模式-队列模式</h4><p>P2P模式包含三个角色：消息队列（Queue），发送者(Sender)，接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p><p>P2P的特点</p><p>每个消息只能被一个消费者（Consumer）消费(即一旦被消费，消息就不再存在于消息队列中)</p><p>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</p><p>接收者在成功接收消息之后需向队列应答成功</p><p>如果希望发送的每个消息都会被成功处理的话，那么需要P2P模式。</p><h4 id="3-2-3-Pub-Sub模式–广播-主题模式"><a href="#3-2-3-Pub-Sub模式–广播-主题模式" class="headerlink" title="3.2.3 Pub/Sub模式–广播/主题模式"></a>3.2.3 Pub/Sub模式–广播/主题模式</h4><p>包含三个角色主题（Topic），发布者（Publisher），订阅者（Subscriber） 多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p><p>Pub/Sub的特点</p><p>每个消息可以有多个消费者</p><p>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息</p><p>为了消费消息，订阅者必须保持运行的状态</p><p>为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</p><p>如果希望发送的消息可以被多个消费者处理的话，那么可以采用Pub/Sub模型。</p><h3 id="3-3-消息消费方式"><a href="#3-3-消息消费方式" class="headerlink" title="3.3.消息消费方式"></a>3.3.消息消费方式</h3><p>在JMS中，消息的产生和消费都是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。</p><h4 id="（1）同步"><a href="#（1）同步" class="headerlink" title="（1）同步"></a>（1）同步</h4><p>订阅者或接收者通过receive方法来接收消息，receive方法在接收到消息之前（或超时之前）将一直阻塞；</p><h4 id="（2）异步"><a href="#（2）异步" class="headerlink" title="（2）异步"></a>（2）异步</h4><p>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。</p><h1 id="二、ActiveMQ-配置"><a href="#二、ActiveMQ-配置" class="headerlink" title="二、ActiveMQ 配置"></a>二、ActiveMQ 配置</h1><blockquote><p>异常问题：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303133753898.png" alt="image-20210303133753898"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303133731900.png" alt="image-20210303133731900"></p></blockquote><h2 id="1、ActiveMQ持久化的内部配置"><a href="#1、ActiveMQ持久化的内部配置" class="headerlink" title="1、ActiveMQ持久化的内部配置"></a>1、ActiveMQ持久化的内部配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置事务模式以及应答模式。两种方式实现ActiveMQ内部持久化</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置队列存储是否持久化。（对于队列的数据，消费者只能接受一次）</span></span><br><span class="line">producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br></pre></td></tr></table></figure><h2 id="2、ActiveMQ持久化的外部配置"><a href="#2、ActiveMQ持久化的外部配置" class="headerlink" title="2、ActiveMQ持久化的外部配置"></a>2、ActiveMQ持久化的外部配置</h2><p>官方文档：<a href="http://activemq.apache.org/persistence.html">http://activemq.apache.org/persistence.html</a></p><blockquote><p>1.From 5.3 onwards - we recommend you use <a href="http://activemq.apache.org/kahadb">KahaDB</a></p><p>2.In ActiveMQ 5.8, the <a href="http://activemq.apache.org/leveldb-store">LevelDB Store</a> was introduced.</p><p>3.In ActiveMQ 5.9, the <a href="http://activemq.apache.org/replicated-leveldb-store">Replicated LevelDB Store</a> is introduced. It handles using <a href="http://zookeeper.apache.org/">Apache ZooKeeper</a> to pick a master from a set of broker nodes configured to replicate single LevelDB Store. </p><p>For long term persistence we recommend using JDBC coupled with our high performance journal. You can use just JDBC if you wish but its quite slow.</p></blockquote><p>根据官方文档可知，自5.3版本之后，ActiveMQ持久化基于KahaDB。自5.8版本后又出现了一个新的存储方式LevelDB，它相较于KahaDB有更好的性能，但尚处于未成熟阶段，使用时需要谨慎考虑。同时若只使用JDBC实现持久化，mq的运行会变得相当慢，但可以保证的是长久的存储，这里官方推荐我们使用 <strong>JDBC+high performance journal</strong> 的方式来提高性能。</p><h3 id="KahaDB配置"><a href="#KahaDB配置" class="headerlink" title="KahaDB配置"></a>KahaDB配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">&quot;$&#123;activemq.data&#125;/kahadb&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用kahaDB后在data/kahadb下自动生成以下文件：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303120632062.png" alt="image-20210303120632062"></p><p>①db.data</p><p>它是消息的索引文件。本质上是<a href="http://www.cnblogs.com/hapjin/p/5616927.html">B-Tree</a>的实现，使用B-Tree作为索引指向db-*.log里面存储的消息。</p><p>②db.redo</p><p>主要用来进行消息恢复。</p><p>③db-*.log 存储消息的内容。对于一个消息而言，不仅仅有消息本身的数据(message data)，而且还有(Destinations、订阅关系、事务…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the data logs contain all of the message data and all of the information about destinations, subscriptions, transactions, etc.. </span><br></pre></td></tr></table></figure><p>data log以<strong>日志形式存储</strong>消息，而且新的数据总是以APPEND的方式追加到日志文件末尾。因此，<strong>消息的存储是很快</strong>的。比如，对于持久化消息，Producer把消息发送给Broker，Broker先把消息存储到磁盘中(<em>enableJournalDiskSyncs配置选项</em>)，然后再向Producer返回Acknowledge。Append方式在一定程度上减少了Broker向Producer返回Acknowledge的时间。</p><p>④lock文件</p><p>当前正在使用的 broker(activemq实例) 信息</p><h3 id="JDBC的配置"><a href="#JDBC的配置" class="headerlink" title="JDBC的配置"></a>JDBC的配置</h3><p>1.导jdbc连接的驱动包(除dbcp2以外的连接池包若没有也需要导入)</p><p>2.在activemq.xml中修改配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">&quot;#mysql-ds&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:amq</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://activemq.apache.org/schema/core </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://activemq.apache.org/schema/core/activemq-core.xsd&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">broker</span> <span class="attr">useJmx</span>=<span class="string">&quot;true&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">networkConnectors</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- &lt;networkConnector uri=&quot;multicast://default?initialReconnectDelay=100&quot; /&gt; &lt;networkConnector uri=&quot;static://(tcp://localhost:61616)&quot; /&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">networkConnectors</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">persistenceFactory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">journalPersistenceAdapterFactory</span> <span class="attr">journalLogFiles</span>=<span class="string">&quot;5&quot;</span> <span class="attr">dataDirectory</span>=<span class="string">&quot;$&#123;basedir&#125;/target&quot;</span> /&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- To use a different dataSource, use the following syntax : --&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- &lt;journalPersistenceAdapterFactory journalLogFiles=&quot;5&quot; dataDirectory=&quot;$&#123;basedir&#125;/activemq-data&quot; dataSource=&quot;#mysql-ds&quot;/&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistenceFactory</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">uri</span>=<span class="string">&quot;tcp://localhost:61636&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">transportConnectors</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">broker</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- MySql DataSource Sample Setup --&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  &lt;bean id=&quot;mysql-ds&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot; destroy-method=&quot;close&quot;&gt; </span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; </span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost/activemq?relaxAutoCommit=true&quot;/&gt; </span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;username&quot; value=&quot;activemq&quot;/&gt; </span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;password&quot; value=&quot;activemq&quot;/&gt; </span></span><br><span class="line"><span class="comment">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt; </span></span><br><span class="line"><span class="comment">  &lt;/bean&gt; </span></span><br><span class="line"><span class="comment">  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.远程数据库新建指定库(activemq)</p><p>4.activemq 重启</p><p>结果如下图所示：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303132008757.png" alt="image-20210303132008757"></p><p>5.java 中实现消息入队操作后（注意生产者需设置持久化模式）</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303132650698.png" alt="image-20210303132650698"></p><h3 id="high-performance-journal-高速缓存日志配置"><a href="#high-performance-journal-高速缓存日志配置" class="headerlink" title="high performance journal 高速缓存日志配置"></a>high performance journal 高速缓存日志配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceFactory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">journalPersistenceAdapterFactory</span> </span></span><br><span class="line"><span class="tag"><span class="attr">journalLogFiles</span>=<span class="string">&quot;5&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">journalLogFileSize</span>=<span class="string">&quot;32768&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">useJournal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">useQuickJournal</span>=<span class="string">&quot;true&quot;</span>                                   </span></span><br><span class="line"><span class="tag">    <span class="attr">dataDirectory</span>=<span class="string">&quot;activemq-data&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">dataSource</span>=<span class="string">&quot;#mysql-ds&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceFactory</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>此时消息首先同步到journal中 ，若干时间（10min左右）后journal同步到mysql数据库中</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303135508554.png" alt="image-20210303135508554"></p><h3 id="Replicated-LevelDB-Store-配置"><a href="#Replicated-LevelDB-Store-配置" class="headerlink" title="Replicated LevelDB Store 配置"></a>Replicated LevelDB Store 配置</h3><h4 id="zookeeper-服务协调"><a href="#zookeeper-服务协调" class="headerlink" title="zookeeper 服务协调"></a>zookeeper 服务协调</h4><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303142516763.png" alt="image-20210303142516763"></p><h2 id="3、ActiveMQ-延迟投递和定时投递配置"><a href="#3、ActiveMQ-延迟投递和定时投递配置" class="headerlink" title="3、ActiveMQ 延迟投递和定时投递配置"></a>3、ActiveMQ 延迟投递和定时投递配置</h2><ol><li>配置文件修改</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span> <span class="attr">brokerName</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">dataDirectory</span>=<span class="string">&quot;$&#123;activemq.data&#125;&quot;</span> <span class="attr">schedulerSupport</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><ol><li>java 消息设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Message message = session.createTextMessage(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line"><span class="comment">// 设置延迟投递、定时投递           </span></span><br><span class="line"><span class="comment">// 延迟3秒每4秒发一次，总共发3次</span></span><br><span class="line">textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY,<span class="number">3</span>*<span class="number">1000</span>);</span><br><span class="line">textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD,<span class="number">4</span>*<span class="number">1000</span>);</span><br><span class="line">textMessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="4、ActiveMQ-的消息协议"><a href="#4、ActiveMQ-的消息协议" class="headerlink" title="4、ActiveMQ 的消息协议"></a>4、ActiveMQ 的消息协议</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    The transport connectors expose ActiveMQ over a given protocol to</span></span><br><span class="line"><span class="comment">    clients and other brokers. For more information, see:</span></span><br><span class="line"><span class="comment">    http://activemq.apache.org/configuring-transports.html</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;openwire&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;tcp://0.0.0.0:61616?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;amqp&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;amqp://0.0.0.0:5672?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;stomp&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;stomp://0.0.0.0:61613?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;mqtt&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;mqtt://0.0.0.0:1883?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;ws&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;ws://0.0.0.0:61614?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transportConnectors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>openwire 表示默认使用该消息协议</p><blockquote><p>Same as the TCP transport, except that the <a href="http://en.wikipedia.org/wiki/New_I/O">New I/O (NIO)</a> package is used, which may provide better performance. The Java NIO package should not be confused with IBM’s <a href="http://java.sys-con.com/read/46658.htm">AIO4J</a> package.</p></blockquote><p>ActiveMQ 默认使用tcp消息协议，但tcp协议传输效率低下，往往不适合实际生产中使用，这里推荐使用nio</p><p>配置如下即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;nio&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;nio://0.0.0.0:61618?trace=true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、ActiveMQ-消息重发机制"><a href="#5、ActiveMQ-消息重发机制" class="headerlink" title="5、ActiveMQ 消息重发机制"></a>5、ActiveMQ 消息重发机制</h2><blockquote><p><a href="http://activemq.apache.org/redelivery-policy">http://activemq.apache.org/redelivery-policy</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://xxxx:61616&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置消费者重发机制</span></span><br><span class="line">RedeliveryPolicy redeliveryPolicy = <span class="keyword">new</span> RedeliveryPolicy();</span><br><span class="line">redeliveryPolicy.setMaximumRedeliveries(<span class="number">3</span>); <span class="comment">// 设置最大重发次数</span></span><br><span class="line">connectionFactory.setRedeliveryPolicy(redeliveryPolicy);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303162023347.png" alt="image-20210303162023347"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303162243668.png" alt="image-20210303162243668"></p><h2 id="6、死信队列DLQ配置"><a href="#6、死信队列DLQ配置" class="headerlink" title="6、死信队列DLQ配置"></a>6、死信队列DLQ配置</h2><blockquote><p><a href="http://activemq.apache.org/message-redelivery-and-dlq-handling">http://activemq.apache.org/message-redelivery-and-dlq-handling</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">broker</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">destinationPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">policyMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">policyEntries</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Set the following policy on all queues using the &#x27;&gt;&#x27; wildcard --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">              Use the prefix &#x27;DLQ.&#x27; for the destination name, and make</span></span><br><span class="line"><span class="comment">              the DLQ a queue rather than a topic</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">individualDeadLetterStrategy</span> <span class="attr">queuePrefix</span>=<span class="string">&quot;DLQ.&quot;</span> <span class="attr">useQueueForQueueMessages</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">policyEntries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">policyMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">destinationPolicy</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">broker</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三、实际问题"><a href="#三、实际问题" class="headerlink" title="三、实际问题"></a>三、实际问题</h1><p>1、如何保证消息不被重复消费，解决幂等性问题</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210303163801838.png" alt="image-20210303163801838"></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="2021/02/19/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"/>
      <url>2021/02/19/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="一、Nginx-介绍"><a href="#一、Nginx-介绍" class="headerlink" title="一、Nginx 介绍"></a>一、Nginx 介绍</h2><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/1870574-20191127165930944-1887207645.png" alt="img"></p><h2 id="二、正向代理和反向代理"><a href="#二、正向代理和反向代理" class="headerlink" title="二、正向代理和反向代理"></a>二、正向代理和反向代理</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>​    反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><blockquote><p>正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</p></blockquote><p>​    正向代理（Forward Proxy）通常都被简称为代理，就是在用户无法正常访问外部资源，比方说受到GFW的影响无法访问twitter的时候，我们可以通过代理的方式，让用户绕过防火墙，从而连接到目标网络或者服务。</p><p>​    <strong>正向代理的工作原理就像一个跳板</strong>，比如：我访问不了<a href="https://link.zhihu.com/?target=http%3A//google.com">http://google.com</a>，但是我能访问一个代理服务器A，A能访问<a href="https://link.zhihu.com/?target=http%3A//google.com">http://google.com</a>，于是我先连上代理服务器A，告诉他我需要<a href="https://link.zhihu.com/?target=http%3A//google.com">http://google.com</a>的内容，A就去取回来，然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</p><p>​    <strong>结论就是，正向代理是一个位于客户端和原始服务器(origin server)之间的服务器</strong>。为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p><h2 id="三、-负载均衡"><a href="#三、-负载均衡" class="headerlink" title="三、 负载均衡"></a>三、 负载均衡</h2><p>我们已经明确了所谓代理服务器的概念，那么接下来，nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p><p>这里提到的客户端发送的、nginx反向代理服务器接收到的请求数量，就是我们说的负载量</p><p>请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则</p><p>所以~将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p><p>负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制</p><p>nginx支持的负载均衡调度算法方式如下：</p><ol><li>weight轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li><li>ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li><li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块</li><li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率。同样要注意nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包</li></ol><h2 id="四、Nginx-工作流程"><a href="#四、Nginx-工作流程" class="headerlink" title="四、Nginx 工作流程"></a>四、Nginx 工作流程</h2><ol><li>用户通过域名发出访问Web服务器的请求，该域名被DNS服务器解析为反向代理服务器的IP地址；</li><li>反向代理服务器接受用户的请求；</li><li>反向代理服务器在本地缓存中查找请求的内容，找到后直接把内容发送给用户；</li><li>如果本地缓存里没有用户所请求的信息内容，反向代理服务器会代替用户向源服务器请求同样的信息内容，并把信息内容发给用户，如果信息内容是缓存的还会把它保存到缓存中。</li></ol><h2 id="五、Nginx-配置模块化"><a href="#五、Nginx-配置模块化" class="headerlink" title="五、Nginx 配置模块化"></a>五、Nginx 配置模块化</h2><p>Nginx有五大优点：<strong>模块化、事件驱动、异步、非阻塞、多进程单线程</strong>。由内核和模块组成的，其中内核完成的工作比较简单，仅仅<strong>通过查找配置文件将客户端请求映射到一个location block，然后又将这个location block中所配置的每个指令将会启动不同的模块去完成相应的工作。</strong></p><h3 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h3><p><strong>Nginx的模块从结构上分为核心模块、基础模块和第三方模块：</strong></p><blockquote><p><strong>核心模块：</strong>HTTP模块、EVENT模块和MAIL模块<br><strong>基础模块：</strong>HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块，<br><strong>第三方模块：</strong>HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块。</p></blockquote><p><strong>Nginx的模块从功能上分为如下四类：</strong></p><blockquote><p><strong>Core(核心模块)：</strong>构建nginx基础服务、管理其他模块。<br><strong>Handlers（处理器模块）：</strong>此类模块直接处理请求，并进行输出内容和修改headers信息等操作。<br><strong>Filters （过滤器模块）：</strong>此类模块主要对其他处理器模块输出的内容进行修改操作，最后由Nginx输出。<br><strong>Proxies （代理类模块）：</strong>此类模块是Nginx的HTTP Upstream之类的模块，这些模块主要与后端一些服务比如FastCGI等进行交互，实现服务代理和负载均衡等功能。</p></blockquote><p><strong>Nginx的核心模块主要负责建立nginx服务模型、管理网络层和应用层协议、以及启动针对特定应用的一系列候选模块。其他模块负责分配给web服务器的实际工作：</strong></p><blockquote><p>(1) 当Nginx发送文件或者转发请求到其他服务器，由Handlers(处理模块)或Proxies（代理类模块）提供服务；<br>(2) 当需要Nginx把输出压缩或者在服务端加一些东西，由Filters(过滤模块)提供服务。</p></blockquote><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/v2-2c0e080cf03bd03b278ed6c2fa1dae14_720w.jpg" alt="img"></p><p>Nginx本身做的工作实际很少，当它接到一个HTTP请求时，它仅仅是通过查找配置文件将此次请求映射到一个location block，而此location中所配置的各个指令则会启动不同的模块去完成工作，因此模块可以看做Nginx真正的劳动工作者。通常一个location中的指令会涉及一个handler模块和多个filter模块（当然，多个location可以复用同一个模块）。handler模块负责处理请求，完成响应内容的生成，而filter模块对响应内容进行处理。</p><h2 id="六、Docker-安装"><a href="#六、Docker-安装" class="headerlink" title="六、Docker 安装"></a>六、Docker 安装</h2><ol><li><p>随便启动一个nginx实例以获取配置</p><p><code>docker run -p 80:80 --name nginx -d nginx:1.10</code></p></li></ol><p>容器运行时自动检查镜像是否存在。若不存在docker会自动进行下载</p><ol><li><p>将容器内的配置文件拷贝到当前目录:</p><p><code>docker container cp nginx:/etc/nginx .</code></p></li><li><p>修改文件名称: <code>mv nginx conf</code>  将这个conf移到<code>/mydata/nginx</code>下</p></li><li><p>终止原容器: <code>docker stop nginx</code></p></li><li><p>执行命令删除原容器：<code>docker rm $Containerid</code></p></li><li><p>创建新的nginx；执行以下命令</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v &#x2F;mydata&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">-v &#x2F;mydata&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \</span><br><span class="line">-v &#x2F;mydata&#x2F;nginx&#x2F;conf:&#x2F;etc&#x2F;nginx \</span><br><span class="line">-d nginx:1.10</span><br></pre></td></tr></table></figure><h2 id="七、Nginx-的优势"><a href="#七、Nginx-的优势" class="headerlink" title="七、Nginx 的优势"></a>七、Nginx 的优势</h2><ol><li><strong>轻量级</strong></li></ol><ul><li>功能模块少 - Nginx仅保留了HTTP需要的模块，其他都用插件的方式，后天添加</li><li>代码模块化 - 更适合二次开发，如阿里巴巴Tengine</li></ul><ol><li><strong>保护了真实的web服务器，保证了web服务器的资源安全</strong></li></ol><p>通常的代理服务器，只用于代理内部网络对Internet外部网络的连接请求，客户机必须指定代理服务器，并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。不支持外部网络对内部网络的连接请求，因为内部网络对外部网络是不可见的。当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务的方式称为反向代理服务。此时代理服务器对外就表现为一个Web服务器，外部网络就可以简单把它当作一个标准的Web服务器而不需要特定的配置。不同之处在于，这个服务器没有保存任何网页的真实数据，所有的静态网页或者CGI程序，都保存在内部的Web服务器上。因此对反向代理服务器的攻击并不会使得网页信息遭到破坏，这样就增强了Web服务器的安全性。</p><ol><li><strong>节约了有限的IP地址资源</strong></li></ol><p>企业内所有的网站共享一个在internet中注册的IP地址，这些服务器分配私有地址，采用虚拟主机的方式对外提供服务。</p><ol><li><strong>减少WEB服务器压力，提高响应速度</strong></li></ol><p>反向代理就是通常所说的web服务器加速，它是一种通过在繁忙的web服务器和外部网络之间增加一个高速的web缓冲服务器来降低实际的web服务器的负载的一种技术。反向代理是针对web服务器提高加速功能，作为代理缓存，它并不是针对浏览器用户，而针对一台或多台特定的web服务器，它可以代理外部网络对内部网络的访问请求。</p><p>反向代理服务器会强制将外部网络对要代理的服务器的访问经过它，这样反向代理服务器负责接收客户端的请求，然后到源服务器上获取内容，把内容返回给用户，并把内容保存到本地，以便日后再收到同样的信息请求时，它会把本地缓存里的内容直接发给用户，以减少后端web服务器的压力，提高响应速度。因此Nginx还具有缓存功能。</p><ol><li><p><strong>其他优点</strong></p><p>（1）请求的统一控制，包括设置权限、过滤规则等；</p><p>（2）区分动态和静态可缓存内容；</p><p>（3）实现负载均衡，内部可以采用多台服务器来组成服务器集群，外部还是可以采用一个地址访问；</p><p>（4）解决Ajax跨域问题；</p><p>（5）作为真实服务器的缓冲，解决瞬间负载量大的问题；</p><p>（6）支持其他插件广泛应用 自带丰富的库文件lib 底层C语言编写，所以异常强大。</p></li></ol><h2 id="八、Nginx配置实战"><a href="#八、Nginx配置实战" class="headerlink" title="八、Nginx配置实战"></a>八、Nginx配置实战</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">main                                # 全局配置</span><br><span class="line"></span><br><span class="line">events &#123;                            # nginx工作模式配置</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http &#123;                                # http设置</span><br><span class="line">    ....</span><br><span class="line">    server &#123;                        # 服务器主机配置</span><br><span class="line">        ....</span><br><span class="line">        location &#123;                    # 路由配置</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">        location path &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">        location otherpath &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        ....</span><br><span class="line">        location &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream name &#123;                    # 负载均衡配置</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述配置文件所示，主要由6个部分组成：</p><ol><li>main：用于进行nginx全局信息的配置</li><li>events：用于nginx工作模式的配置</li><li>http：用于进行http协议信息的一些配置</li><li>server：用于进行服务器访问信息的配置</li><li>location：用于进行访问路由的配置</li><li>upstream：用于进行负载均衡的配置</li></ol><h3 id="main模块"><a href="#main模块" class="headerlink" title="main模块"></a>main模块</h3><p>观察下面的配置代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># user nobody nobody;</span><br><span class="line">worker_processes 2;</span><br><span class="line"># error_log logs&#x2F;error.log</span><br><span class="line"># error_log logs&#x2F;error.log notice</span><br><span class="line"># error_log logs&#x2F;error.log info</span><br><span class="line"># pid logs&#x2F;nginx.pid</span><br><span class="line">worker_rlimit_nofile 1024;</span><br></pre></td></tr></table></figure><p>上述配置都是存放在main<strong>全局配置</strong>模块中的配置项</p><ul><li>user用来指定nginx worker进程运行用户以及用户组，默认nobody账号运行</li><li>worker_processes指定nginx要开启的子进程数量，运行过程中监控每个进程消耗内存(一般几M~几十M不等)根据实际情况进行调整，通常数量是CPU内核数量的整数倍</li><li>error_log定义错误日志文件的位置及输出级别【debug / info / notice / warn / error / crit】</li><li>pid用来指定进程id的存储文件的位置</li><li>worker_rlimit_nofile用于指定一个进程可以打开最多文件数量的描述</li></ul><h3 id="event-模块"><a href="#event-模块" class="headerlink" title="event 模块"></a>event 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">    multi_accept on;</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置是针对nginx服务器的<strong>工作模式</strong>的一些操作配置</p><ul><li>worker_connections 指定最大可以同时接收的连接数量，这里一定要注意，最大连接数量是和worker processes共同决定的。</li><li>multi_accept 配置指定nginx在收到一个新连接通知后尽可能多的接受更多的连接</li><li>use epoll 配置指定了线程轮询的方法，如果是linux2.6+，使用epoll，如果是BSD如Mac请使用Kqueue</li></ul><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>作为web服务器，http模块是nginx最核心的一个模块，配置项也是比较多的，项目中会设置到很多的实际业务场景，<strong>需要根据硬件信息进行适当的配置</strong>，常规情况下，使用默认配置即可！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ##</span><br><span class="line">    # 基础配置</span><br><span class="line">    ##</span><br><span class="line">    </span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    # server_tokens off;</span><br><span class="line"></span><br><span class="line">    # server_names_hash_bucket_size 64;</span><br><span class="line">    # server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # SSL证书配置</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # 日志配置</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # Gzip 压缩配置</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line">    # gzip_vary on;</span><br><span class="line">    # gzip_proxied any;</span><br><span class="line">    # gzip_comp_level 6;</span><br><span class="line">    # gzip_buffers 16 8k;</span><br><span class="line">    # gzip_http_version 1.1;</span><br><span class="line">    # gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript</span><br><span class="line"> text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # 虚拟主机配置</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;</span><br></pre></td></tr></table></figure><p>1) 基础配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sendfile on：配置on让sendfile发挥作用，将文件的回写过程交给数据缓冲去去完成，而不是放在应用中完成，这样的话在性能提升有好处</span><br><span class="line">tc_nopush on：让nginx在一个数据包中发送所有的头文件，而不是一个一个单独发</span><br><span class="line">tcp_nodelay on：让nginx不要缓存数据，而是一段一段发送，如果数据的传输有实时性的要求的话可以配置它，发送完一小段数据就立刻能得到返回值，但是不要滥用哦</span><br><span class="line"></span><br><span class="line">keepalive_timeout 10：给客户端分配连接超时时间，服务器会在这个时间过后关闭连接。一般设置时间较短，可以让nginx工作持续性更好</span><br><span class="line">client_header_timeout 10：设置请求头的超时时间</span><br><span class="line">client_body_timeout 10:设置请求体的超时时间</span><br><span class="line">send_timeout 10：指定客户端响应超时时间，如果客户端两次操作间隔超过这个时间，服务器就会关闭这个链接</span><br><span class="line"></span><br><span class="line">limit_conn_zone $binary_remote_addr zone&#x3D;addr:5m ：设置用于保存各种key的共享内存的参数，</span><br><span class="line">limit_conn addr 100: 给定的key设置最大连接数</span><br><span class="line"></span><br><span class="line">server_tokens：虽然不会让nginx执行速度更快，但是可以在错误页面关闭nginx版本提示，对于网站安全性的提升有好处哦</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;mime.types：指定在当前文件中包含另一个文件的指令</span><br><span class="line">default_type application&#x2F;octet-stream：指定默认处理的文件类型可以是二进制</span><br><span class="line">type_hash_max_size 2048：混淆数据，影响三列冲突率，值越大消耗内存越多，散列key冲突率会降低，检索速度更快；值越小key，占用内存较少，冲突率越高，检索速度变慢</span><br></pre></td></tr></table></figure><p>2) 日志配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log logs&#x2F;access.log：设置存储访问记录的日志</span><br><span class="line">error_log logs&#x2F;error.log：设置存储记录错误发生的日志</span><br></pre></td></tr></table></figure><p>3) SSL证书加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_protocols：指令用于启动特定的加密协议，nginx在1.1.13和1.0.12版本后默认是ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2，TLSv1.1与TLSv1.2要确保OpenSSL &gt;&#x3D; 1.0.1 ，SSLv3 现在还有很多地方在用但有不少被攻击的漏洞。</span><br><span class="line">ssl prefer server ciphers：设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件</span><br></pre></td></tr></table></figure><p>4) 压缩配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip 是告诉nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量。</span><br><span class="line">gzip_disable 为指定的客户端禁用gzip功能。我们设置成IE6或者更低版本以使我们的方案能够广泛兼容。</span><br><span class="line">gzip_static 告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。这要求你预先压缩你的文件（在这个例子中被注释掉了），从而允许你使用最高压缩比，这样nginx就不用再压缩这些文件了（想要更详尽的gzip_static的信息，请点击这里）。</span><br><span class="line">gzip_proxied 允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。</span><br><span class="line">gzip_min_length 设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。</span><br><span class="line">gzip_comp_level 设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。我们设置为4，这是一个比较折中的设置。</span><br><span class="line">gzip_type 设置需要压缩的数据格式。上面例子中已经有一些了，你也可以再添加更多的格式。</span><br></pre></td></tr></table></figure><p>5) 文件缓存配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open_file_cache 打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。</span><br><span class="line">open_file_cache_valid 在open_file_cache中指定检测正确信息的间隔时间。</span><br><span class="line">open_file_cache_min_uses 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。</span><br><span class="line">open_file_cache_errors 指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。</span><br></pre></td></tr></table></figure><h3 id="server模块"><a href="#server模块" class="headerlink" title="server模块"></a>server模块</h3><p>server模块配置是http模块中的一个子模块，用来定义一个<strong>虚拟访问主机</strong>，也就是一个虚拟服务器的配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen        80;</span><br><span class="line">    server_name localhost    192.168.1.100;</span><br><span class="line">    root        &#x2F;nginx&#x2F;www;</span><br><span class="line">    index        index.php index.html index.html;</span><br><span class="line">    charset        utf-8;</span><br><span class="line">    access_log    logs&#x2F;access.log;</span><br><span class="line">    error_log    logs&#x2F;error.log;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心配置信息如下：</p><ul><li>server：一个虚拟主机的配置，一个http中可以配置多个server</li><li>server_name：指定ip地址或者域名，多个配置之间用空格分隔</li><li>root：表示整个server虚拟主机内的根目录，所有当前主机中web项目的根目录</li><li>index：用户访问web网站时的全局首页</li><li>charset：用于设置www/路径中配置的网页的默认编码格式</li><li>access_log：用于指定该虚拟主机服务器中的访问记录日志存放路径</li><li>error_log：用于指定该虚拟主机服务器中访问错误日志的存放路径</li></ul><h3 id="location模块"><a href="#location模块" class="headerlink" title="location模块"></a>location模块</h3><p>location模块是nginx配置中出现最多的一个配置，主要用于配置路由访问信息</p><p>在路由访问信息配置中关联到反向代理、负载均衡等等各项功能，所以location模块也是一个非常重要的配置模块</p><p>基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    root    &#x2F;nginx&#x2F;www;</span><br><span class="line">    index    index.php index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location /：表示匹配访问根目录</p><p>root：用于指定访问根目录时，访问虚拟主机的web目录</p><p>index：在不指定访问具体资源时，默认展示的资源文件列表</p><p><strong>反向代理配置方式</strong></p><p>通过反向代理代理服务器访问模式，通过proxy_set配置让客户端访问透明化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;localhost:8888;</span><br><span class="line">    proxy_set_header X-real-ip $remote_addr;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>uwsgi配置</strong></p><p>wsgi模式下的服务器配置访问方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass localhost:8888</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="upstream模块"><a href="#upstream模块" class="headerlink" title="upstream模块"></a>upstream模块</h3><p>upstream模块主要负责负载均衡的配置，通过默认的轮询调度方式来分发请求到后端服务器</p><p>简单的配置方式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">upstream name &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.1.100:8000;</span><br><span class="line">    server 192.168.1.100:8001 down;</span><br><span class="line">    server 192.168.1.100:8002 max_fails&#x3D;3;</span><br><span class="line">    server 192.168.1.100:8003 fail_timeout&#x3D;20s;</span><br><span class="line">    server 192.168.1.100:8004 max_fails&#x3D;3 fail_timeout&#x3D;20s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心配置信息如下</p><ul><li>ip_hash：指定请求调度算法，默认是weight权重轮询调度，可以指定</li><li>server host:port：分发服务器的列表配置</li><li>— down：表示该主机暂停服务</li><li>— max_fails：表示失败最大次数，超过失败最大次数暂停服务</li><li>— fail_timeout：表示如果请求受理失败，暂停指定的时间之后重新发起请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="2021/02/18/%E4%B8%AD%E9%97%B4%E4%BB%B6/ElasticSearch/"/>
      <url>2021/02/18/%E4%B8%AD%E9%97%B4%E4%BB%B6/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><blockquote><p>Elasticsearch是一个基于<a href="https://baike.baidu.com/item/Lucene/6753302">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的<a href="https://baike.baidu.com/item/全文搜索引擎/7847410">全文搜索引擎</a>，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。Elasticsearch用于<a href="https://baike.baidu.com/item/云计算/9969353">云计算</a>中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p></blockquote><h2 id="一、Docker-安装"><a href="#一、Docker-安装" class="headerlink" title="一、Docker 安装"></a>一、Docker 安装</h2><h3 id="1、下载镜像文件"><a href="#1、下载镜像文件" class="headerlink" title="1、下载镜像文件"></a>1、下载镜像文件</h3><p><code>docker pull elasticsearch:7.4.2</code></p><p><code>docker pull kibana:7.4.2</code> : 客户端提供可视化界面</p><h3 id="2、创建实例"><a href="#2、创建实例" class="headerlink" title="2、创建实例"></a>2、创建实例</h3><ol><li><p><code>mkdir -p /mydata/elasticsearch/config</code></p></li><li><p><code>mkdir -p /mydata/elasticsearch/data</code></p></li><li><p><code>echo &quot;http.host: 0.0.0.0&quot; &gt;&gt;/mydata/elasticsearch/config/elasticsearch.yml</code></p></li><li><p>```cmd<br>docker run —name elasticsearch -p 9200:9200 -p 9300:9300 \<br>-e “discovery.type=single-node” \<br>-e ES_JAVA_OPTS=”-Xms64m -Xmx512m” \<br>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \<br>-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \<br>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \<br>-d elasticsearch:7.4.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">ps：若出现 **AccessDenied** 异常，则可以检查文件权限，使用&#96;chmod -R 777 &#x2F;mydata&#x2F;elasticsearch&#x2F;&#96;修改</span><br><span class="line"></span><br><span class="line">5. &#96;&#96;&#96;cmd</span><br><span class="line">   &#x2F;&#x2F;kibana 建立客户端</span><br><span class="line">   docker run --name kibana -e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;114.215.200.131:9200 -p 5601:5601 \</span><br><span class="line">   -d kibana:7.4.2</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1-Query-DSL"><a href="#1-Query-DSL" class="headerlink" title="1.Query DSL"></a>1.Query DSL</h3><blockquote><p>结构解析：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">QUERY_NAME:&#123;</span><br><span class="line">FIELD_NAME:&#123;</span><br><span class="line">ARGUMENT:VALUE,</span><br><span class="line">ARGUMENT:VALUE,....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>sort</code> ：排序</p><p><code>query</code>：查询条件设置</p><p><code>from</code>  <code>size</code>  : 分页</p><p><code>_source: [&quot;field1&quot;,&quot;field2&quot;...]</code> : 返回指定字段</p><h3 id="2-SearchApi"><a href="#2-SearchApi" class="headerlink" title="2.SearchApi"></a>2.SearchApi</h3><h4 id="search-查询"><a href="#search-查询" class="headerlink" title="_search 查询"></a>_search 查询</h4><blockquote><p>ES 支持两种方式检索</p><ol><li><p>通过使用 REST request URI 发送搜索参数（uri+检索参数）</p><p><code>GET customer/_search?q=*&amp;sort=_id:asc</code></p></li><li><p>通过使用 REST request body 来发送他们 （uri+请求体）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// Query DSL</span><br><span class="line">GET customer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125; // &quot;match&quot; 选择匹配规则实现全文检索！</span><br><span class="line">    &quot;match&quot;:&#123; // 分词匹配，按相关信得分排序</span><br><span class="line">    &quot;field&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;term&quot; :&#123; // 精确检索，往往用于非文本字段</span><br><span class="line">    &quot;field&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &quot;match_phrase&quot;:&#123; // 短语匹配：替代&quot;match&quot;，实现完整单词匹配而不进行分词。使用 field.keyword 也能有类似效果</span><br><span class="line">  &quot;field&quot;: &quot;xxx&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  &quot;multi_match&quot;:&#123; // 多字段匹配：同样分词，看做&quot;match&quot;的多次操作</span><br><span class="line">  &quot;query&quot;: &quot;condition&quot;,</span><br><span class="line">  &quot;fields&quot;: [&quot;xx&quot;,...]</span><br><span class="line">  &#125;</span><br><span class="line">  &quot;bool&quot;:&#123; // 符合查询</span><br><span class="line">  &quot;must&quot;:[ //要求必须符合某些查询条件</span><br><span class="line">  &#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;field&quot;: &quot;xx&quot;,...</span><br><span class="line">                &#125;</span><br><span class="line">  &#125;,...</span><br><span class="line">  ],</span><br><span class="line">  &quot;must_not&quot;:[ //要求不准符合某些查询条件</span><br><span class="line">  &#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;field&quot;: &quot;xx&quot;,...</span><br><span class="line">                &#125;</span><br><span class="line">  &#125;,...</span><br><span class="line">  ],</span><br><span class="line">  &quot;should&quot;:[ // 要求最好能符合某些查询条件（不符合也可以）。加分用的</span><br><span class="line">  &#123;</span><br><span class="line">                &quot;match&quot;:&#123;</span><br><span class="line">                    &quot;field&quot;: &quot;xx&quot;,...</span><br><span class="line">                &#125;</span><br><span class="line">  &#125;,...</span><br><span class="line">  ],</span><br><span class="line">  &quot;filter&quot;:[ // 不会提供相关性得分</span><br><span class="line">  &quot;range&quot;:&#123;</span><br><span class="line">  &quot;gte&quot;: ,</span><br><span class="line">  &quot;lte&quot;: </span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;<span class="built_in">sort</span>&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="3-aggregation-执行聚合"><a href="#3-aggregation-执行聚合" class="headerlink" title="3.aggregation 执行聚合"></a>3.aggregation 执行聚合</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;:&#123;</span><br><span class="line">&quot;&lt;aggregation_name&gt;&quot;: &#123;</span><br><span class="line">&quot;&lt;aggregation_type&gt;&quot;: &#123;</span><br><span class="line">&lt;aggregation_body&gt;</span><br><span class="line">&#125;</span><br><span class="line">[,&quot;meta&quot;: &#123;[&lt;meta_data_body&gt;]&#125;]?</span><br><span class="line">[,&quot;aggregations&quot;:&#123;[sub_aggregation]+&#125;]?</span><br><span class="line">&#125;</span><br><span class="line">[,&quot;&lt;aggregation_name_2&gt;&quot;:&#123;...&#125;]*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;sales_per_month&quot; : &#123;</span><br><span class="line">            &quot;date_histogram&quot; : &#123;</span><br><span class="line">                &quot;field&quot; : &quot;date&quot;,</span><br><span class="line">                &quot;interval&quot; : &quot;month&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;aggs&quot;: &#123;</span><br><span class="line">                &quot;sales&quot;: &#123;</span><br><span class="line">                    &quot;sum&quot;: &#123;</span><br><span class="line">                        &quot;field&quot;: &quot;price&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;sales_deriv&quot;: &#123;       &#x2F;&#x2F;对每个月销售总和 sales 求导</span><br><span class="line">                    &quot;derivative&quot;: &#123;</span><br><span class="line">                        &quot;buckets_path&quot;: &quot;sales&quot;  &#x2F;&#x2F;用于计算均值的权值路径，同级，直接用metric值</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-映射Mapping"><a href="#4-映射Mapping" class="headerlink" title="4.映射Mapping"></a>4.映射Mapping</h3><h4 id="mapping-映射"><a href="#mapping-映射" class="headerlink" title="_mapping 映射"></a>_mapping 映射</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建索引</span><br><span class="line">PUT &#x2F;test</span><br><span class="line">&#123;</span><br><span class="line">&quot;mappings&quot;: &#123; &#x2F;&#x2F; 默认所有字段的index为true,</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;name&quot;: &#123;&quot;type&quot;: &quot;text&quot;&#125; &#x2F;&#x2F; 自动分词检索</span><br><span class="line">&quot;age&quot;: &#123;&quot;type&quot;: &quot;integer&quot;&#125;</span><br><span class="line">&quot;email&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;&#125; &#x2F;&#x2F; 精确检索</span><br><span class="line">&quot;hobbys&quot;:&#123;</span><br><span class="line">&quot;type&quot;: &quot;nested&quot; &#x2F;&#x2F; 设置为嵌入式属性,防止出现扁平化错误</span><br><span class="line">&#x2F;*</span><br><span class="line">扁平化过程：</span><br><span class="line">&quot;user&quot;:[</span><br><span class="line">&#123;                         </span><br><span class="line">&quot;first&quot;: &quot;John&quot;,&#123;</span><br><span class="line">&quot;last&quot;: &quot;Smith&quot;       &quot;user.first&quot;: [&quot;John&quot;,&quot;Alice&quot;],</span><br><span class="line">&#125;,               -----&gt; &quot;user.last&quot;: [&quot;Smith&quot;,&quot;White&quot;]</span><br><span class="line">&#123;&#125;</span><br><span class="line">&quot;first&quot;: &quot;Alice&quot;,</span><br><span class="line">&quot;last&quot;: &quot;White&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">ES 分词检索时默认通过扁平化处理的结果进行查询，此时针对</span><br><span class="line">&#123;</span><br><span class="line">&quot;first&quot;: &quot;Alice&quot;,</span><br><span class="line">&quot;last&quot;: &quot;Smith&quot;         ,仍然可以查询到对应结果，从而发生扁平化导致的检索错误！使用嵌入式类型可以避免扁平化，</span><br><span class="line">&#125;但也会因此丧失一些性能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在创建索引上新增字段</span><br><span class="line">PUT &#x2F;test&#x2F;_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;person_id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false, &#x2F;&#x2F; 默认为true，若为false则此时该字段无法被索引，视为冗余字段</span><br><span class="line">        &quot;doc_values&quot;: false &#x2F;&#x2F; 默认为true,若为false则此时该字段无法使用聚合</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对于已存在的索引不能再更新字段，只能通过数据迁移实现！</span><br><span class="line">&#x2F;&#x2F;1.创建新索引，指定字段类型与旧索引一致，newIndex</span><br><span class="line">&#x2F;&#x2F;2.数据迁移到新索引</span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">&quot;source&quot;: &#123;</span><br><span class="line">&quot;index&quot;: &quot;oldIndex&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dest&quot;: &#123;</span><br><span class="line">&quot;index&quot;: &quot;newIndex&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-分词"><a href="#5-分词" class="headerlink" title="5.分词"></a>5.分词</h3><h4 id="tokenizer-分词器"><a href="#tokenizer-分词器" class="headerlink" title="tokenizer 分词器"></a>tokenizer 分词器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;standard&quot;, &#x2F;&#x2F; 分词模式</span><br><span class="line">&quot;test&quot;: &quot;xxxxx&quot; &#x2F;&#x2F; 待分词文本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ik插件实现中文分词"><a href="#ik插件实现中文分词" class="headerlink" title="ik插件实现中文分词"></a>ik插件实现中文分词</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;, &#x2F;&#x2F; 智能检索最优词组</span><br><span class="line">  &quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;, &#x2F;&#x2F; 检索出所有可能的中文词组情况</span><br><span class="line">  &quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分词自定义"><a href="#分词自定义" class="headerlink" title="分词自定义"></a>分词自定义</h4><p>在 ik config包下的<code>IKAnalyzer.cfg.xml</code>文件下自定义分词</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改相应注释下的配置后重启ES即可生效</p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全文检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础学习</title>
      <link href="2021/02/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/docker/"/>
      <url>2021/02/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-基础学习"><a href="#Docker-基础学习" class="headerlink" title="Docker 基础学习"></a>Docker 基础学习</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><blockquote><p>Docker 容器不使用硬件虚拟化，它的守护进程是宿主机上的一个进程，换句话说，应用直接运行在宿主机内核上。因为容器中运行的程序和计算机的操作系统之间没有额外的中间层，没有资源被冗余软件的运行或虚拟硬件的模拟而浪费掉。        </p></blockquote><h3 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1. 镜像"></a>1. 镜像</h3><p>简单类比为电脑的系统盘，只读。包含有操作环境以及其他应用。</p><h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2. 容器"></a>2. 容器</h3><p>简单类比为电脑的硬件环境。它是真正跑项目，提供服务的东西。基于镜像启动，每个容器之间相互隔离。注意的是，容器在启动的时候基于镜像创建一层可写层作为最上层。</p><h3 id="3-仓库"><a href="#3-仓库" class="headerlink" title="3. 仓库"></a>3. 仓库</h3><p>Docker 的仓库用于存放镜像。这一点，和 Git 非常类似。我们可以从中心仓库下载镜像，也可以从自建仓库下载。同时，我们可以把制作好的镜像 commit 到本地，然后 push 到远程仓库。仓库分为公开仓库和私有仓库，最大的公开仓库是官方仓库 Dock Hub，国内的公开仓库也有很多选择，例如阿里云等。</p><h2 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h2><h3 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h3><p><code>docker pull [image]</code> :  image 镜像在<a href="https://hub.docker.com/官网仓库上获取。">https://hub.docker.com/官网仓库上获取。</a></p><h3 id="2-创建实例并启动"><a href="#2-创建实例并启动" class="headerlink" title="2. 创建实例并启动"></a>2. 创建实例并启动</h3><p>以运行一个redis为例：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">6379</span>:<span class="number">6379</span> --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p><code>docker run</code>  ： 创建一个新的容器并运行一个命令</p><p>执行过程：通过镜像生成容器</p><p>1、查询本地是否存在所需镜像。</p><p>2、不存在则前往仓库（registry）下载镜像(pull)</p><p>3、通过镜像生成容器</p><p>options：</p><ul><li><p>-p 端口映射：表示linux下的端口与容器内端口完成映射</p></li><li><p>—name 设置容器名</p></li></ul><blockquote><p>文件挂载时要注意系统可能回家文件当做是目录，所以在挂载前尽可能先用<code>touch</code>命令创建好文件</p></blockquote><ul><li><p>-v 目录挂载，实现linux下的文件与容器内文件的同步，方便更新查看。</p></li><li><p>-d 后台运行容器，并返回容器ID</p></li></ul><h4 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h4><p><code>docker ps</code> : 查看正在运行的容器</p><p><code>docker ps -a</code> ：查看所有容器</p><p><code>docker images</code> ：查看所有镜像</p><p><code>docker rm 容器id/容器名</code> ：删除容器</p><p><code>docker rmi imageId</code> ：删除镜像</p><p><code>docker restart 容器id/容器名</code>：重启容器</p><p><code>docker logs 容器id/容器名</code>：查看容器日志 </p><p><code>docker update 容器id/容器名 --restart=always</code> ：设置自动重启</p><p><code>docker inspect 容器id</code> ：查看容器元数据</p><p><code>docker cp 容器id</code>  ：容器内文件拷到主机上</p><p><code>docker commit 容器id [tag]</code> ：提交容器成为一个镜像</p><ul><li>-m：填写描述信息</li><li>-a ：作者名</li></ul><p><code>docker build .</code> ：通过dockerFile 生成镜像，最后的 <code>.</code>代表本次执行的上下文路径</p><ul><li>-f  path：指定构建的 dockerFile 文件地址</li><li>-t  镜像名：设置镜像名</li></ul><p><code>docker login</code> ：远程仓库登录</p><p><code>docker tag</code> ：镜像重命名</p><p><code>docker push imageId</code> ：发布镜像到仓库</p><p><code>docker history imageId</code> ：查看镜像构建过程</p><ol><li><p>使用实例</p><p><code>docker exec -it [容器] /bin/bash</code> ：启动容器,转至容器内控制台</p><p><code>docker attach 容器id</code> ：进入容器正在执行的终端，不会启动新的进程。</p><p>-it ：交互模式下启动</p></li><li><p>创建网络</p><blockquote><p>实现ip-&gt;host间的映射</p></blockquote><p><code>docker network create</code> ：网络创建</p><p><code>docker network connect mynet mynginx</code> ：网路建立连接</p></li></ol><h3 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3. Dockerfile"></a>3. Dockerfile</h3><p>相信我们现在都已经学会如何使用镜像了。但这些镜像又是怎么来的呢，我们从仓库里拉取的到底是什么？</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210419122547366.png" alt="image-20210419122547366"></p><p>我们看到拉取文件中就有一个Dockerfile文件。这个文件是干什么的呢？</p><p>举个例子如下就是一个Dockerfile文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget</span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br><span class="line">以上执行会创建 3 层镜像。可简化为以下格式：</span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><p>我们看到这个文件中有多个指令，<code>FROM</code> <code>RUN</code> 。除此之外当然还有其他指令。这些指令有什么用？实质上这与镜像的创建有关。一个镜像包含有操作环境和应用。docker将镜像内部分为多个层级。最下层为基础层，提供基本的操作环境，其上的每一个指令都会构建出新的一层。这多个docker层共同实现了这一个镜像。</p><h4 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h4><ul><li><code>FROM</code> ：from 后面跟着的是镜像，它将作为我们要创建镜像的基础镜像。同样的若本机没有该镜像将会从仓库远程下载。</li><li><code>MAINTAINER</code> ：指明镜像维护者及其联系方式（一般是邮箱地址）</li><li><code>RUN</code> ：执行后面跟着的命令，<code>RUN [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;]</code> 等价于 <code>RUN 可执行文件 参数1 参数2</code></li><li><code>COPY src des</code> ：从上下文路径中复制文件到容器指定路径中（目标路径若不存在会自动创建）</li><li><code>ADD src des</code> ：功能与COPY类似。区别：源文件若为tar压缩文件，会自动复制并解压到目标路径中。</li></ul><blockquote><p><code>CMD</code> 和 <code>ENTRYPOINT</code> 指令若有多条，仅最后一条有效！</p></blockquote><ul><li><code>CMD</code> ：类似RUN，但二者运行时间点不同，RUN执行在<code>docker build</code>时，CMD执行在<code>docker run</code>时。 因此一般用于为启动容器指定默认运行的程序。</li><li><code>ENTRYPOINT</code> ：类似CMD，但不会被<code>docker run</code> 额外的指定命令所覆盖，而是追加。</li><li><code>ENV key value</code> ：设置环境变量。后续指令可使用该变量。作用域包含整个容器。</li><li><code>ARG</code> ：构建参数。作用域仅Dockerfile文件内。</li><li><code>VOLUME [&quot;path1&quot;,&quot;path2&quot;...]</code> ：定义匿名数据卷。</li><li><code>EXPOSE</code> ：仅申明端口。注意非端口映射，仅为镜像使用者提供一个查看守护端口的途径。在run中若加入<code>-P</code> 设置随机端口映射时，会指定连接到容器内该端口。</li><li><code>WORKDIR</code> ：指定工作目录，注意必须提前创建好。它将在镜像的每一个层级中都存在。</li><li><code>ONBUILD 其他指令</code> ：用于延迟构建命令的执行。当其他镜像设置本镜像为基础镜像时才会触发<code>ONBUILD</code> 后续的指令。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs快速构建工程</title>
      <link href="2021/01/23/Web/nodejs%20%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/01/23/Web/nodejs%20%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs-快速搭建工程"><a href="#nodejs-快速搭建工程" class="headerlink" title="nodejs 快速搭建工程"></a>nodejs 快速搭建工程</h1><blockquote><p>中文文档：<a href="http://nodejs.cn/api/">http://nodejs.cn/api/</a></p></blockquote><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210123142624235.png" alt="image-20210123142624235"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210123142651211.png" alt="image-20210123142651211"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210123142737127.png" alt="image-20210123142737127"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210123142809173.png" alt="image-20210123142809173"></p><h3 id="webpack-打包加密资源文件"><a href="#webpack-打包加密资源文件" class="headerlink" title="webpack 打包加密资源文件"></a>webpack 打包加密资源文件</h3><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210123144853866.png" alt="image-20210123144853866"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InooDB深入理解</title>
      <link href="2021/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93/InooDB/"/>
      <url>2021/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93/InooDB/</url>
      
        <content type="html"><![CDATA[<h1 id="InnoDB存储引擎深入理解"><a href="#InnoDB存储引擎深入理解" class="headerlink" title="InnoDB存储引擎深入理解"></a>InnoDB存储引擎深入理解</h1><blockquote><p>很多参考自《MySQL技术内幕 InnoDB 存储引擎》、《高性能MySQL》以及大佬博客</p></blockquote><h2 id="一、InnoDB-存储引擎概述"><a href="#一、InnoDB-存储引擎概述" class="headerlink" title="一、InnoDB 存储引擎概述"></a><strong>一、InnoDB 存储引擎概述</strong></h2><p>InnoDB 存储引擎中有多个内存块，可以认为这些内存块组成了一个大的内存池，负责如下工作：</p><p>\1.   维护所有进程/线程需要访问的多个内部数据结构</p><p>\2.   缓存磁盘上的数据，方便快速地读取，同时在对磁盘文件的数据修改前在这里缓存</p><p>\3.   重做日志缓冲(redo buffer)</p><p>下图所示为 InnoDB 存储引擎内存块大致分布情况</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101172820.jpg" alt="img"></p><p>……</p><h2 id="二、InnoDB-关键特性"><a href="#二、InnoDB-关键特性" class="headerlink" title="二、InnoDB 关键特性"></a><strong>二、InnoDB 关键特性</strong></h2><p>为了使InnoDB 存储引擎具有<strong>更好的性能和更高的可靠性</strong>，InnoDB 需要有以下<strong>关键特性</strong>:</p><p>\1.   插入缓冲(Insert Buffer)</p><p>\2.   两次写(Double Write)</p><p>\3.   自适应哈希索引(Adaptive Hash Index)</p><p>\4.   异步IO(Async IO)</p><p>\5.   刷新邻接页(Flush Neighbor Page)</p><p>现在让我们逐条分析这五个关键特性：</p><h3 id="一、-插入缓冲-Insert-Buffer-——-非唯一辅助索引（非聚集索引）的插入"><a href="#一、-插入缓冲-Insert-Buffer-——-非唯一辅助索引（非聚集索引）的插入" class="headerlink" title="一、     插入缓冲(Insert Buffer) —— 非唯一辅助索引（非聚集索引）的插入"></a><strong>一、</strong>     <strong>插入缓冲(Insert Buffer) —— 非唯一辅助索引（非聚集索引）的插入</strong></h3><p><strong>原理说明：</strong></p><p>首先我们应该明确的是<strong>插入缓冲并不作为缓冲池</strong>中的一部分(虽然从 InnoDB 概述中的那张图里可以看出缓冲池中存在插入缓冲的信息)。它和数据页一样也是物理页的一个组成部分，以B+树的形式存放在共享表空间中。那它有什么作用呢？我们不妨先假设这样一个情景：</p><p>​    假如现在我们要往一张表上插入数据，我们知道在 InnoDB 存储引擎中主键是行的唯一标识符，也就是说我们只需要通过主键就可以查找到对应的行的位置。若主键是自动递增的，那我们就可以了解到主键的位置就在当前页中<strong>顺序存放</strong>，可以直接获得并插入，速度很快。但如果主键并非自动递增的呢？（或者含多个非聚集索引的情况）此时我们无法准确得知主键(索引)的位置，只能通过<strong>随机读取</strong>其他页的记录。而随机读取将会大大降低插入操作的性能。（这里不对非聚集索引和聚集索引的结构做过多说明）</p><p>​    插入缓冲就是针对这一情况设计的。它的原理其实不难理解：核心就是通过插入缓冲与非聚集索引页之间的合并实现多次插入操作转化为单次插入操作。这其实也跟索引页的数据结构相关，即<strong>减少 B+Tree 的重排</strong>。</p><p>​    针对插入操作，InnoDB 在1.0x版本后又引入了 <strong>Change Buffer</strong> ，在原来的基础上对DML操作有了扩充。大体思想与原来差不多。</p><p>实现流程说明：图片引自<a href="https://blog.csdn.net/luqiang81191293/article/details/109364255">https://blog.csdn.net/luqiang81191293/article/details/109364255</a></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101172828.jpg" alt="img"></p><h3 id="二、-两次写-Double-Write"><a href="#二、-两次写-Double-Write" class="headerlink" title="二、     两次写(Double Write)"></a><strong>二、</strong>     <strong>两次写(Double Write)</strong></h3><p><strong>两次写过程主要为了提高数据页的可靠性</strong>。</p><p>在我们的实际应用过程中可能出现 Inorb 存储引擎正在将某个页写入到表的情况，若这个页仅写了部分而数据库突然发生宕机。此时，写入的这一部分失效，可能导致数据丢失。当然我们可以通过redo日志来恢复这些数据。但是这里有个问题需要明确的是，redo 日志修复的是数据创建的过程，即在偏移量为：xxx 的物理块上做相应操作。这时如果物理块本身（也就是页）出现问题（例如MySQL服务异常，硬件磁盘损坏等情况），那么redo日志将无法成功恢复失效数据。</p><p>​    两次写的目的就是为了解决页损坏这个问题。在使用redo日志前，他会先创建一个页的副本，当发生数据失效时它会立刻还原为当前页，并对该副本进行重做，这时就不用考虑页损坏问题了。</p><p>​    <strong>两次写过程展示</strong>：图片引自: <a href="http://blog.itpub.net/29018063/viewspace-2086098/">http://blog.itpub.net/29018063/viewspace-2086098/</a></p><p>​    首先，我们知道内存中更新的页要同步到磁盘(文件)中，必须先将活动页传到缓冲区，此时形成”脏页”，当发生某种机制(主进程或checkpoint等)时，它会将一定数量的脏页更新到磁盘中。但是在加入了二次写特性后，脏页不会立刻同步到磁盘中。他会先通过memcopy复制到 doublewrite buffer 中，再由 doublewrite buffer 将数据(脏页信息)分别写入共享表空间和磁盘中。从这里就可以体现它二次写得名的由来。</p><p>​    如果操作系统在将页写入磁盘的过程中发生崩溃，在恢复过程中，InnoDB存储引擎可以从共享表空间的doublewrite中找到该页的一个最近的副本，将其复制到表空间文件，再应用redo log，就完成了恢复过程。因为有副本所以也不担心表空间中数据页是否损坏。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101172838.jpg" alt="img"></p><h3 id="三、-自适应哈希索引-Adaptive-Hash-Index"><a href="#三、-自适应哈希索引-Adaptive-Hash-Index" class="headerlink" title="三、     自适应哈希索引(Adaptive Hash Index)"></a><strong>三、</strong>     <strong>自适应哈希索引(Adaptive Hash Index)</strong></h3><p>我们知道哈希索引的查找时间复杂度为O(1),而根据B+tree的索引结构往往需要3-4次</p><p>查找次数。自适应的意思就是表示InnoDB 引擎会自动帮我们建立哈希索引以提高对热点数据的访问速度。</p><p>​    AHI 建立的条件：</p><p>\1.   对页的连续访问模式相同</p><p>\2.   以该模式访问多次</p><p>\3.   访问次数可以表示为N=页中记录数*1/16</p><p><strong>AHI更多的是一种优化模式，无需认为调整。</strong></p><h3 id="四、-异步IO-Async-IO"><a href="#四、-异步IO-Async-IO" class="headerlink" title="四、     异步IO(Async IO)"></a><strong>四、</strong>     <strong>异步IO(Async IO)</strong></h3><p>异步自然是对数据处理的一种优化，<strong>它免去了同步带来的阻塞问题</strong>。同时它还可以实现请求合并，即<strong>IO Merge</strong>。</p><p>它在InnoDB 存储引擎中无处不在，无论是预读(read ahead)、脏页刷新还是磁盘写入操作，都是由异步IO完成的。</p><h3 id="五、-刷新邻接页-Flush-Neighbor-Page"><a href="#五、-刷新邻接页-Flush-Neighbor-Page" class="headerlink" title="五、     刷新邻接页(Flush Neighbor Page)"></a><strong>五、</strong>     <strong>刷新邻接页(Flush Neighbor Page)</strong></h3><p>本质就是<strong>局部性原理</strong>。实际应用在脏页刷新时。当刷新一个脏页时，InnoDB 会检测该页所在区的所有页，若发现是脏页则<strong>一起刷新</strong>。通常临接页中会存在大量脏页可供刷新，根据刷新临接页特性<strong>，AIO 可以将多个IO请求合并为一个IO操作</strong>。</p><h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a><strong>三、数据结构</strong></h2><p>先从<strong>数据页</strong>开始，数据页结构如下图所示：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101172843.jpg" alt="img"></p><p><strong>变长字段长度</strong>：记录了某个属性的长度，方便快速读取</p><p><strong>Null值列表</strong>：记录可为空的值是否为空</p><p><strong>记录头信息</strong>：包含许多标记信息，<strong>delete_mask</strong>:标记记录是否被删除,<strong>record_type</strong>:表示记录类型。</p><p><strong>数据表项</strong>：存储记录信息，即用户输入的实际数据。</p><p><strong>隐藏项</strong>：<strong>row_id:</strong>数据库自动生成的行标识ID；<strong>Transaction_id:</strong>事务ID；<strong>Roll_pointer</strong>:回滚指针</p><p>数据页中存储有多个数据行，其中包含有两个特殊行即最大记录和最小纪录。数据页内部记录通过单链表形式存储，头尾放特殊记录。数据页与数据页之间通过双链接连接，方便快速定位。</p><p>记录中不只包括普通数据，肯定也有索引，而索引存储在索引页中。索引页存储需要考虑索引的数据结构。</p><p>InnoDB 存储引擎中索引的数据结构是 B+Tree</p><p>InnoDB索引数据结构参考：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><p><strong>聚簇索引</strong></p><p>InnoDB 的数据文件本身就是索引文件，与MyISAM不同。在 InnoDB 中，表数据文件本身就是B+Tree组织的一个索引结构，此时该树的节点就是完整的数据记录，key则为该表的主键。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101172846.jpg" alt="img"></p><p><strong>非聚簇索引</strong></p><p>叶子节点并不包含行记录的全部数据。叶子节点除了包含键值以外，每个叶子结点中的索引行中还包含了一个书签。该书签用来告诉 InnoDB 存储引擎找到与索引相对应的行数据。由于InnoDB 存储引擎表是索引组织表，因此InnoDB 存储引擎的辅助索引的书签就是相应行数据的聚集索引键。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101172849.jpg" alt="img"></p><h2 id="四、索引以及算法"><a href="#四、索引以及算法" class="headerlink" title="四、索引以及算法"></a><strong>四、索引以及算法</strong></h2><p>讲到索引算法必须先了解到<strong>多路查找平衡树</strong></p><p>多路：多条子树。查找：左子树&lt;节点&lt;右子树。平衡：树高相差不大，不成链。</p><p>官方解释：</p><p> 每个结点孩子个数可以 &gt; 2；</p><p> 每个结点可以存储多个数据元素；</p><p>B-Tree 和B+Tree就都属于多路查找平衡树，而数据库中的索引存储方式是B+树。</p><p>这里阐述下两者的区别：</p><p><strong>B-Tree(B**</strong>树)**</p><p>讲到B树的时候，我们需要给他定义一个阶数。实际应用过程中使用的2-3树其实就是B树阶数为3时候的实例。</p><p>- 树高一致，即每个节点的子树高度都相等。</p><p>- 节点数据个数限定。对于任意m阶的B-Tree，它的根节点的数据个数在[1,m-1]这个范围内，非根节点范围在[(m-1)/2,m-1]这个范围内。</p><p>- 节点内的数据是有序的。</p><p>B-Tree查找算法伪代码：</p><p>\1. BTree_Search(node, key) {</p><p>\2. if(node == null) return null;</p><p>\3. foreach(node.key)</p><p>\4. {</p><p>\5. if(node.key[i] == key) return node.data[i];</p><p>\6. if(node.key[i] &gt; key) return BTree_Search(point[i]-&gt;node);</p><p>\7. }</p><p>\8. return BTree_Search(point[i+1]-&gt;node);</p><p>\9. }</p><p>\10. data = BTree_Search(root, my_key);</p><p>B树增删改内容引自：<a href="https://blog.ouyangsihai.cn/mian-shi-guan-wen-ni-b-shu-he-b-shu-jiu-ba-zhe-pian-wen-zhang-diu-gei-ta.html">https://blog.ouyangsihai.cn/mian-shi-guan-wen-ni-b-shu-he-b-shu-jiu-ba-zhe-pian-wen-zhang-diu-gei-ta.html</a></p><p><strong>树在插入、删除过程中的分裂</strong>，结合情况描述：</p><p>以5阶B树为例：</p><p>插入18，70，50,40</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173333.png" alt="img"></p><p>插入22</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173332.png" alt="img"></p><p>插入22时，发现这个节点的关键字已经大于4了，所以需要进行分裂，分裂的规则在上面已经讲了，分裂之后，如下。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173329.png" alt="img"></p><p>接着插入23，25，39</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173327.png" alt="img"></p><p>分裂，得到下面的。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173317.png" alt="img"></p><p>更过的插入的过程就不多介绍了，相信有这个例子你已经知道怎么进行插入操作了。</p><p><strong>1.3 B树的删除操作</strong></p><p>现在有一个初始状态是下面这样的B树，然后进行删除操作。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173315.png" alt="img"></p><p>删除15，这种情况是删除叶子节点的元素，如果删除之后，节点数还是大于 m/2，这种情况只要直接删除即可。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173312.png" alt="img"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173310.png" alt="img"></p><p>接着，我们把22删除，这种情况的规则：22是非叶子节点，<strong>对于非叶子节点的删除，我们需要用后继key（元素）覆盖要删除的key，然后在后继key所在的子支中删除该后继key</strong>。对于删除22，需要将后继元素24移到被删除的22所在的节点。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173308.png" alt="img"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173305.png" alt="img"></p><p>此时发现26所在的节点只有一个元素，小于2个（m/2），这个节点不符合要求，这时候的规则（向兄弟节点借元素）：<strong>如果删除叶子节点，如果删除元素后元素个数少于（m/2），并且它的兄弟节点的元素大于（m/2），也就是说兄弟节点的元素比最少值m/2还多，将先将父节点的元素移到该节点，然后将兄弟节点的元素再移动到父节点</strong>。这样就满足要求了。</p><p>我们看看操作过程就更加明白了。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173303.png" alt="img"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173257.png" alt="img"></p><p>接着删除28，<strong>删除叶子节点</strong>，删除后不满足要求，所以，我们需要考虑向兄弟节点借元素，但是，兄弟节点也没有多的节点（2个），借不了，怎么办呢？如果遇到这种情况，<strong>首先，还是将先将父节点的元素移到该节点，然后，将当前节点及它的兄弟节点中的key合并，形成一个新的节点</strong>。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173252.png" alt="img"></p><p>移动之后，跟兄弟节点合并。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173250.png" alt="img"></p><p><strong>B+Tree**</strong>相较B-Tree多了几个不同的性质：**</p><p>\1.   每个节点的指针上限为2d而不是2d+1。</p><p>\2.   内节点不存储data，只存储key；叶子节点不存储指针。</p><p>同时经典数据库系统会对B+Tree进行优化，即在叶子节点上加上访问指针。能有效提高区间访问的性能。</p><p>B+树增删改内容引自：<a href="https://blog.ouyangsihai.cn/mian-shi-guan-wen-ni-b-shu-he-b-shu-jiu-ba-zhe-pian-wen-zhang-diu-gei-ta.html">https://blog.ouyangsihai.cn/mian-shi-guan-wen-ni-b-shu-he-b-shu-jiu-ba-zhe-pian-wen-zhang-diu-gei-ta.html</a></p><p><strong>插入操作</strong></p><p><strong>下面以一颗5阶B+树的插入过程为例，5阶B+树的节点最少2个元素，最多4个元素。</strong></p><ul><li><strong>插入5，10，15，20</strong></li></ul><p><strong><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173239.png" alt="img"></strong></p><ul><li><strong>插入25，此时元素数量大于4个了，分裂</strong></li></ul><p><strong><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173237.png" alt="img"></strong></p><ul><li><strong>接着插入26，30，继续分裂</strong></li></ul><p><strong><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173234.png" alt="img"></strong></p><p><strong><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173232.png" alt="img"></strong></p><p><strong>有了这几个例子，相信插入操作没什么问题了，下面接着看看删除操作。</strong></p><p><strong>2.3 删除操作</strong></p><p><strong>对于删除操作是比B树简单一些的，因为叶子节点有指针的存在，向兄弟节点借元素时，不需要通过父节点了，而是可以直接通过兄弟节移动即可（前提是兄弟节点的元素大于m/2），然后更新父节点的索引；如果兄弟节点的元素不大于m/2（兄弟节点也没有多余的元素），则将当前节点和兄弟节点合并，并且删除父节点中的key，下面我们看看具体的实例。</strong></p><ul><li><strong>初始状态</strong></li></ul><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173229.png" alt="img"></p><ul><li><strong>删除10，删除后，不满足要求，发现左边兄弟节点有多余的元素，所以去借元素，最后，修改父节点索引</strong></li></ul><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173226.png" alt="img"></p><ul><li><strong>删除元素5，发现不满足要求，并且发现左右兄弟节点都没有多余的元素，所以，可以选择和兄弟节点合并，最后修改父节点索引</strong></li></ul><p><strong><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173222.png" alt="img"></strong></p><ul><li><strong>发现父节点索引也不满足条件，所以，需要做跟上面一步一样的操作</strong></li></ul><p><strong><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173219.png" alt="img"></strong></p><h2 id="五、锁"><a href="#五、锁" class="headerlink" title="五、锁"></a><strong>五、锁</strong></h2><p><strong>锁与数据库事务之间有不可分割的关系。</strong></p><p>我们知道数据库事务需要满足ACID，其中隔离性与一致性要求我们必须保障事务的安全。而这些很大一部分都是通过锁来实现的。锁机制能有效的管理用户对共享资源的并发访问。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173209.jpg" alt="img"></p><p>如上图所示为我们展示了InnoDB中锁的类型。我们先从<strong>锁的机制</strong>开始介绍：</p><p><strong>乐观锁与悲观锁</strong>是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p><p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p><p>同时InnoDB 还<strong>支持多种粒度</strong>下的锁，<strong>默认使用的是行锁</strong>，粒度最小。因此InnoDB 能对行进行加锁操作，以确保不同用户事务对同一行的操作满足ACID原则。</p><p>共享锁和排它锁就是InnoDB 实现的两种标准的行锁。这里对这两种不做过多介绍。</p><p><strong>MVCC</strong> <strong>基于锁的并发控制</strong></p><p>它决定了读不加任何锁，读写不冲突，因此在对于读操作多于写操作的应用时，能极大地增加系统的并发性能。</p><p>在《高性能MySQL》一书中对此有以下介绍：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173401.png" alt="这里写图片描述"></p><p>行锁算法实现，内容参考：<a href="https://segmentfault.com/a/1190000014133576">https://segmentfault.com/a/1190000014133576</a></p><p><strong>InnoDB 主要实现了三种行锁算法</strong>：</p><p>·    <strong>Record Lock</strong>：记录锁，锁定一个行记录</p><p>·    <strong>Gap Lock</strong>：间隙锁，锁定一个区间</p><p>·    <strong>Next-Key Lock</strong>：记录锁+间隙锁，锁定行记录和区间</p><p>这里需要主要的是在InnoDB 中各行记录本质都存储在数据页或索引页中。记录本身是通过主键即索引来确定的，因此InnoDB 所有的行锁算法其实都是基于对索引的加锁来实现的。</p><p>以下这张图可以很好地了解到InnoDB 对当前记录下的不同索引采取相应的行锁算法</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173204.jpg" alt="img"></p><p><strong>等值查询样例说明：</strong></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173157.jpg" alt="img"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173154.jpg" alt="img"></p><p>其中关于Gap Lock ，从上图中可以看到它锁定的是索引记录之间的间隙，而这其实是防止”幻读”产生的关键。因为当其他用户在新插入一行记录时会先检测间隙中是否已被加锁，若已被加锁则阻塞等待，详细应用可以参考文章：<a href="https://yq.aliyun.com/articles/108095?t=t1">https://yq.aliyun.com/articles/108095?t=t1</a></p><p><strong>最后说明一下意向锁</strong></p><p>我们都知道意向锁是InnoDB 为支持多粒度锁并存而建立的。那么意向锁又是如何来实现这一点的呢？</p><p>在解决这一个问题之前，我们可以先思考意向锁应当具备的功能。</p><p>·    既然它是为了实现多粒度锁并存，那么必然存在不同粒度下锁与锁之间的转化。而这种过程需要数据引擎自己维护。</p><p>·    锁不可能直接转换粒度，InnoDB 应当对它进行某种判定。</p><p>·    意向锁起“中间桥梁”的作用，由InnoDB 对其赋予一套规则，来保证兼容、可靠性等。</p><p><strong>InnoDB中的实际应用流程</strong></p><p>在为数据行添加共享或者排他锁之前，InnoDB 会先获取该数据行所在在数据表的对应意向锁。</p><p>官方解释：如果另一个任务试图在该表级别上应用共享或排它锁，则受到由第一个任务控制的表级别意向锁的阻塞。第二个任务在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。</p><p><strong>意向锁具有的特定规则</strong>：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173147.jpg" alt="img"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173150.jpg" alt="img"></p><p>特注：意向锁并不会与行级的锁发生互斥，因此上述表示为表锁。</p><p>该文章对获取锁的流程给出了很通俗的解释：<a href="https://juejin.cn/post/6844903666332368909">https://juejin.cn/post/6844903666332368909</a></p><p>以下摘取其中部分：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20210101173112.jpg" alt="img"></p><h2 id="六、-备份和恢复"><a href="#六、-备份和恢复" class="headerlink" title="六、    备份和恢复"></a><strong>六、</strong>    <strong>备份和恢复</strong></h2><p>参考链接：<a href="https://blog.csdn.net/zhangfeng1133/article/details/76696680">https://blog.csdn.net/zhangfeng1133/article/details/76696680</a></p><p>对于数据库来说备份与恢复是一项最基本的操作与工作。在意外状态下要保证数据不丢失，或者最小程度地丢失，我们必须时刻关心数据库的备份情况。</p><p>InnoDB存储引擎给我们提供了七种备份与恢复方式：（仅简略说明）</p><p><strong>1.mysqldump</strong><br> 这种方式不仅适用于InnoDB，还适用于其它类型的存储引擎，如MyISAM。备份的时候将数据库备份成SQL(包含drop，create，insert等语句)，恢复的时候直接导入即可。属于逻辑备份。</p><p><strong>2.copy file</strong></p><p>我们知道InnoDB底层存储的时候会将数据和元信息存在下列文件中：</p><p>ibdata<em>, </em>.ibd, <em>.frm, </em>.ib_logfile*，所以备份这些文件即可备份InnoDB的数据。</p><p>a. 停止任何关于这个表的写，lock tables customers write;</p><p>b. 删除这个表的空间，alter table customers discard tablespace;</p><p>c. 将你备份的. ibd文件拷贝到相应的目录下。</p><p>d. 重新建立表空间，alter table customers import tablespace;</p><p>e. 释放写锁，unlock tables customers;</p><p><strong>3.ibbackup</strong></p><p>将你线上的my.cnf配置文件复制一份出来到比如说/etc/my.backup.cnf，更改里边的datadir等比如说到/data/backup，然后运行 ibbackup /etc/my.cnf /etc/my.backup.cnf, ibbackup就会讲my.cnf所指向的数据内容备份到my.backup.cnf指向的数据目录。恢复的时候也很奇葩，因为你现在等于说是拥有了两个数据目录，所以你重新运行MySQL，safe_mysqld —defaults-file=/etc/my.backup.cnf. 这种方式仅局限于你的数据库全部使用InnoDB存储引擎。</p><p><strong>4.innobackup</strong></p><p>如果你还有其它数据表用的是MyISAM，那么你可以使用innobackup，它不但会将InnoDB的相关文件备份起来，还会将MyISAM的比如MYI, MYD文件也备份起来。innobackup使用了ibbackup作为InnoDB的备份子工具。</p><p><strong>5.利用MySQL Administrator</strong></p><p><strong>6.XtraBackup</strong></p><p>对InnoDB做数据备份的开源工具，支持在线热备，备份时不影响数据读写。属于物理备份。项目地址<a href="https://github.com/percona/percona-xtrabackup，可以结合使用Innobackupex进行全备，xtrabackup进行增量备份。">https://github.com/percona/percona-xtrabackup，可以结合使用Innobackupex进行全备，xtrabackup进行增量备份。</a></p><p><strong>7.binary logs</strong></p><p>利用binary logs, 需要开启log-bin, 所有的更新操作都会被写到binary file里。恢复的时候mysqlbinlog binlog_file | MySQL，这种方式基本上可以用在在线备份上。属于逻辑备份。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InnoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 首次使用</title>
      <link href="2020/12/25/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/"/>
      <url>2020/12/25/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>数据库命名要求：</p><ul><li>不能是空字符串</li><li>不得含有转义字符</li><li>全部小写</li><li>最多64字节</li></ul><p>保留库名：</p><ul><li>admin</li></ul><p>root 数据库，用户继承所有数据库的权限。比如列出所有数据库或者关闭服务器。</p><ul><li>local</li></ul><p>该数据库里的内容永远不会被复制，可用来存储本地单台服务器任意集合</p><ul><li>config</li></ul><p>用于保存分片相关信息</p><p><strong>数据库命令：</strong></p><p><strong>数据库连接：</strong></p><ul><li>mongo 192.168.1.100：使用默认端口连接MongoDB</li><li>mongo 192.168.1.100:27017：连接MongoDB并指定端口</li><li>mongo 192.168.1.200:27017/test -u user -p password：指定用户名和密码连接到指定的MongoDB数据库</li></ul><p><strong>针对数据库操作：</strong></p><ul><li>use [dbname] : 创建或跳转，刚创建时并不显式存在于数据库列表中，需要插入数据</li><li>db.dropDatabase() : 删除数据库</li><li>show dbs ： 查看所有数据库</li></ul><p><strong>针对集合操作：</strong></p><p>options:</p><p><img src="C:/Users/37889/Pictures/Camera%20Roll/image-20201226094447149.png" alt="image-20201226094447149"></p><ul><li>db.createCollection(“name”,[options]) : 显式创建集合</li></ul><p><img src="C:/Users/37889/Pictures/Camera%20Roll/image-20201226100027783.png" alt="image-20201226100027783"></p><p>find() 还可以写正则表达~</p><ul><li><p>db.[collection].drop() : 删除</p></li><li><p>db.[collection].insert/insertmany(“bson”) : 插入文档</p></li><li><p>db.[collection].find({bson},{key1:1,key2:0……}) : （隐式创建）文档查找所有，后面跟的bson格式表示key是否显示，1表示显示，0表示不显示（投影查询）</p></li><li><p>db.[collection].findOne({bson})：文档查询到第一条</p></li><li><p>db.[collection].insert/save({bson}) : 插入，含隐式创建</p></li><li><p>db.[collection].insertmany([{bson},{bson}……])：批量插入</p></li><li><pre><code>db.[collection].remove(   &lt;query&gt;,   &#123;     justOne: &lt;boolean&gt;,//1或者true表示只删除一个文档，默认false删除所有匹配文档     writeConcern: &lt;document&gt;//抛出异常的级别   &#125;)</code></pre></li></ul><p><strong>集合更新操作：db.[collection].update(query,update,options)</strong></p><ul><li>db.[collection].update({bson1（表示条件）},{bson2（表示修改})：覆盖更新(默认只更新一条数据)</li><li>db.[collection].update({bson1（表示条件）},{<strong>$set:</strong>{bson2（表示修改）}})：局部更新(默认只更新一条数据)</li><li>db.[collection].update(query,update,multi:true)：批量更新</li></ul><p><strong>聚合操作</strong></p><ul><li>db.[collection].find().count({bson})：查找条数</li><li>db.[collection].find().limit(num)：查找结果数量限制</li><li>db.[collection].find().skip(num)：跳过前num条数据</li><li>db.[collection].find().sort({key:1,key2:-1……})：按key值升序(1)或降序(-1)排</li></ul><p><strong>索引操作</strong>（Btree）</p><ul><li>db.[collection].getIndexes()：查找当前集合所有的索引</li><li>db.[collection].creatIndex({key1:1,key2:-1……}, options)：options:”unique”/“name”(索引名称)</li><li>db.[collection].dropIndex(index/{bson})</li><li>db.[collection].dropIndexes()：删除所有索引（不包括_id）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习框图</title>
      <link href="2020/12/04/%E5%85%B6%E4%BB%96/%E5%AD%A6%E4%B9%A0%E6%A1%86%E5%9B%BE/"/>
      <url>2020/12/04/%E5%85%B6%E4%BB%96/%E5%AD%A6%E4%B9%A0%E6%A1%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.hdslb.com/bfs/article/4fe4287bba0eb4ce10c3646bf10872335cd92878.png@1320w_2740h.webp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础理解</title>
      <link href="2020/12/03/Web/Vue%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3/"/>
      <url>2020/12/03/Web/Vue%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础理解"><a href="#Vue基础理解" class="headerlink" title="Vue基础理解"></a>Vue基础理解</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><blockquote><p>现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong></p><p>注意只有当实例被创建时就已经存在于 <code>data</code> 中的 property 才是<strong>响应式</strong>的</p><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="动态添加响应式属性问题"><a href="#动态添加响应式属性问题" class="headerlink" title="动态添加响应式属性问题"></a>动态添加响应式属性问题</h4><blockquote><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p></blockquote><h5 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h5><blockquote><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但我们可以对嵌套对象进行动态添加</p></blockquote><ul><li><code>this.$set(this.someObject,&#39;b&#39;,2)</code> : 单独添加属性</li><li><code>this.someObject = Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</code> ：批量添加属性</li></ul><h5 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a>对于数组</h5><p><code>vm.$set(vm.items, indexOfItem, newValue)</code> : 修改对于下标下的元素值</p><h4 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h4><p>Vue 在更新 DOM 时是<strong>异步</strong>执行的。只要侦听到数据变化，Vue 将开启一个队列，<strong>并缓冲在同一事件循环中发生的所有数据变更</strong>。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时<strong>去除重复数据</strong>对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p><p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，该组件<strong>不会立即重新渲染</strong>。当刷新队列时，组件<strong>会在下一个事件循环“tick”中更新</strong>。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数将在 DOM 更新完成后被调用。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.message = <span class="string">&#x27;new message&#x27;</span> <span class="comment">// 更改数据</span></span><br><span class="line">vm.$el.textContent === <span class="string">&#x27;new message&#x27;</span> <span class="comment">// false</span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  vm.$el.textContent === <span class="string">&#x27;new message&#x27;</span> <span class="comment">// true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="设计思考"><a href="#设计思考" class="headerlink" title="设计思考"></a>设计思考</h4><p>由于 Vue 不允许动态添加根级响应式 property，所以你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值。这其实就是处于设计的考虑。</p><p><strong>消除了在依赖项跟踪系统中的一类边界情况</strong>，也使 Vue 实例能更好地<strong>配合类型检查系统工作</strong>。但与此同时在代码可维护性方面也有一点重要的考虑：<code>data</code> 对象就像组件状态的结构 (schema)。<strong>提前声明所有的响应式 property，可以让组件代码在未来修改或给其他开发人员阅读时更易于理解</strong>。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote><p>指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute</p></blockquote><p>指令集包含如下：</p><ol><li><code>v-bind:[attribute] = ‘data’</code> : 动态绑定 DOM 属性</li><li><code>v-if=true/false</code> : DOM结构是否显示</li><li><code>v-for=&quot;num in array&quot;</code> : 绑定数组的数据来渲染一个项目列表</li><li><code>v-on:[action]=&quot;运算/vue方法&quot;</code> ：在 DOM 元素上添加一个事件监听器，通过它调用在 Vue 实例中定义的方法或运算</li><li><code>v-model = &quot;data&quot;</code> : 实现表单输入和应用状态之间的双向绑定</li></ol><h2 id="Vue-属性"><a href="#Vue-属性" class="headerlink" title="Vue 属性"></a>Vue 属性</h2><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p>Vue 实例的数据对象。Vue 将会递归将 data 的 property 转换为 getter/setter，从而让 data 的 property 能够响应数据变化。<strong>对象必须是纯粹的对象 (含有零个或多个的 key/value 对)</strong>：浏览器 API 创建的原生对象，原型上的 property 会被忽略。大概来说，data 应该只能是数据 - 不推荐观察拥有状态行为的对象。</p><p>一旦观察过，你就无法在根数据对象上添加响应式 property。因此推荐在创建实例之前，就声明所有的根级响应式 property。</p><p>实例创建之后，可以通过 <code>vm.$data</code> 访问原始数据对象。Vue 实例也代理了 data 对象上所有的 property，因此访问 <code>vm.a</code> 等价于访问 <code>vm.$data.a</code>。</p><p>以 <code>_</code> 或 <code>$</code> 开头的 property <strong>不会</strong>被 Vue 实例代理，因为它们可能和 Vue 内置的 property、API 方法冲突。你可以使用例如 <code>vm.$data._property</code> 的方式访问这些 property。</p><p>当一个<strong>组件</strong>被定义，<code>data</code> 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 <code>data</code> 仍然是一个纯粹的对象，则所有的实例将<strong>共享引用</strong>同一个数据对象！通过提供 <code>data</code> 函数，每次创建一个新实例后，我们能够调用 <code>data</code> 函数，从而返回初始数据的一个全新副本数据对象。</p><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。在上述模板中，你会发现我们能够在组件实例中访问这个值，就像访问 <code>data</code> 中的值一样。</p><p>一个 prop 被注册之后，你就可以像这样把数据作为一个自定义 attribute 传递进来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post title=<span class="string">&quot;My journey with Vue&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=<span class="string">&quot;Blogging with Vue&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=<span class="string">&quot;Why Vue is so fun&quot;</span>&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><p>同时我们也可以<strong>使用 <code>v-bind</code> 来动态传递 prop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#blog-post-demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    posts: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;My journey with Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Blogging with Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Why Vue is so fun&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并想要为每篇博文渲染一个组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">&quot;post in posts&quot;</span></span><br><span class="line">  v-bind:key=<span class="string">&quot;post.id&quot;</span></span><br><span class="line">  v-bind:title=<span class="string">&quot;post.title&quot;</span></span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="propsData"><a href="#propsData" class="headerlink" title="propsData"></a>propsData</h4><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><h4 id="生命周期钩子，如-mounted、updated-和-destroyed"><a href="#生命周期钩子，如-mounted、updated-和-destroyed" class="headerlink" title="生命周期钩子，如 mounted、updated 和 destroyed"></a>生命周期钩子，如 <a href="https://cn.vuejs.org/v2/api/#mounted"><code>mounted</code></a>、<a href="https://cn.vuejs.org/v2/api/#updated"><code>updated</code></a> 和 <a href="https://cn.vuejs.org/v2/api/#destroyed"><code>destroyed</code></a></h4><h2 id="Vue-实例方法-属性"><a href="#Vue-实例方法-属性" class="headerlink" title="Vue 实例方法/属性"></a>Vue 实例方法/属性</h2><ol><li><code>vm.$watch(&#39;data&#39;,function(newValue,oldValue)&#123;&#125;)</code> : 监听data数据变化，若发生变化则函数回调（data 可以是一个表达式或者函数计算结果 来表达变化）</li><li></li></ol><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><blockquote><p>每用一次组件，就会有一个它的新<strong>实例</strong>被创建。</p></blockquote><p>这里有一个 Vue 组件的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <code>&lt;button-counter&gt;</code>。我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;components-demo&quot;</span>&gt;</span><br><span class="line">  &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">&#x27;#components-demo&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Vue 没有这条规则，点击<strong>一个按钮就可能会影响到其它所有实例</strong>.</p><h3 id="Vue新建工程"><a href="#Vue新建工程" class="headerlink" title="Vue新建工程"></a>Vue新建工程</h3><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201106110216974.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS相关指令</title>
      <link href="2020/12/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/DOS%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/"/>
      <url>2020/12/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/DOS%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="DOS指令"><a href="#DOS指令" class="headerlink" title="DOS指令"></a>DOS指令</h2><ul><li>netstat -ano|findstr “ ” ：查找进程</li><li>taskkill -f -pid “” ：关闭pid为指定值得进程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务理解</title>
      <link href="2020/12/03/Spring/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%A7%A3/"/>
      <url>2020/12/03/Spring/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><blockquote><p>项目—-&gt;多个服务构成</p><p>服务提供者（服务注册）、服务消费者（服务发现）、注册中心（管理、监控服务）</p></blockquote><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><h4 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h4><p>消费者—-&gt;提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SimpleClientHttpRequestFactory requestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">    requestFactory.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">    requestFactory.setReadTimeout(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(requestFactory);</span><br><span class="line">    <span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体应用</span></span><br><span class="line">MultiValueMap&lt;String, String&gt; bodyMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;String, String&gt;();<span class="comment">//参数</span></span><br><span class="line">bodyMap.setAll(urlVariables);</span><br><span class="line"><span class="comment">//CAR_CES_URL : 服务地址：host+restful</span></span><br><span class="line">ResponseClass responseClass = restTemplate.postForObject(CAR_CES_URL, bodyMap, ResponseClass.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更完整的：</span></span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.add(<span class="string">&quot;X-Auth-Token&quot;</span>, <span class="string">&quot;e348bc22-5efa-4299-9142-529f07a18ac9&quot;</span>);</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; postParameters = <span class="keyword">new</span> LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class="line">postParameters.add(<span class="string">&quot;owner&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">postParameters.add(<span class="string">&quot;subdomain&quot;</span>, <span class="string">&quot;aoa&quot;</span>);</span><br><span class="line">postParameters.add(<span class="string">&quot;comment&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity  = </span><br><span class="line">    <span class="keyword">new</span> HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(postParameters, headers);</span><br><span class="line">ParseResultVo exchange = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    exchange = restTemplate.postForObject(<span class="string">&quot;http://demo&quot;</span>,  requestEntity, ParseResultVo.class);</span><br><span class="line">    logger.info(exchange.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><h5 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h5><p>基于REST的服务，用于定位服务以实现云端中间层服务发现和故障转移，即<strong>服务注册和服务发现</strong>。只需要使用服务的标识符就可以访问到服务，而不需要修改服务调用的配置文件。</p><ul><li>包含两个组件：Eureka Server 和 Eureka Client</li><li>Eureka Server 提供服务注册服务，注册服务时可直观显示各服务节点信息</li><li>Eureka Client Java客户端，内置一个轮询负载算法的负载均衡器。应用启动时，将会向EurekaServer发送心跳(默认周期30s)，若EurekaServer在多个心跳周期内没有接受到某个节点的心跳，EurekaServer将会从服务注册表中把这个节点移除(默认周期90s)</li></ul><h5 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h5><p>它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。 </p><p>上面的解释有点抽象，简单来说<strong>zookeeper=文件系统+监听通知机制。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中各种锁详解</title>
      <link href="2020/12/03/Java/%E5%90%84%E7%A7%8D%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>2020/12/03/Java/%E5%90%84%E7%A7%8D%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Java各种锁"><a href="#Java各种锁" class="headerlink" title="Java各种锁"></a>Java各种锁</h2><blockquote><p>参考：<strong><a href="https://www.cnblogs.com/jyroy/p/11365935.html">https://www.cnblogs.com/jyroy/p/11365935.html</a></strong></p></blockquote><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p><p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p><p><img src="https://img-blog.csdnimg.cn/20181122101753671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h3><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p><p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p><p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p><p>CAS算法涉及到三个操作数：</p><ul><li>需要读写的内存值 V。</li><li>进行比较的值 A。</li><li>要写入的新值 B。</li></ul><p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p><p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：</p><p><img src="https://img-blog.csdnimg.cn/20181122102030461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>根据定义我们可以看出各属性的作用：</p><ul><li>unsafe： 获取并操作内存的数据。</li><li>valueOffset： 存储value在AtomicInteger中的偏移量。</li><li>value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。</li></ul><p>接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：</p><p><img src="https://img-blog.csdnimg.cn/20181122102047431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>根据OpenJDK  8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v +  delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p><p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B  存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值  A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p><p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p><ol><li><p>ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p><p>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</p></li><li><p>循环时间长开销大。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p></li><li><p>只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p><p>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</p></li></ol><h3 id="自旋锁-VS-适应性自旋锁"><a href="#自旋锁-VS-适应性自旋锁" class="headerlink" title="自旋锁 VS 适应性自旋锁"></a>自旋锁 VS 适应性自旋锁</h3><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p><img src="https://img-blog.csdnimg.cn/2018112210212894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><p><img src="https://img-blog.csdnimg.cn/20181122104052869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><h3 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h3><blockquote><p>通过AQS实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>公平锁</p><p>​        公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p></li><li><p>非公平锁</p><p>​        非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p><strong>ReentrantLock 默认为非公平锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Synchronized 也为非公平锁</strong></p></li></ul><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><blockquote><p>非公平锁</p></blockquote><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p><p><img src="https://img-blog.csdnimg.cn/20181122104329631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="Synchronized-底层原理"><a href="#Synchronized-底层原理" class="headerlink" title="Synchronized 底层原理"></a>Synchronized 底层原理</h2><p><a href="https://www.zhihu.com/question/55075763">https://www.zhihu.com/question/55075763</a></p><blockquote><p>Synchronized 在jdk1.6时发生了极大地优化，在它的底层引入了偏向锁和轻量级锁</p><p><strong>锁清除</strong></p><p>编译器会清除一些使用了同步，但同步块中没有涉及共享数据的锁，从而减少多余的同步。</p><p><strong>锁粗化</strong></p><p>若有一系列操作，反复地对同一把锁进行上锁和解锁操作，编译器会扩大这部分代码的同步块的边界，从而只使用一次上锁和解锁操作。</p></blockquote><p>底层的实现可以通过JVM选项设置，视具体的应用场景选择合适的锁膨胀过程。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>刚开始并发量可能并不大时，Synchronized 底层实现为偏向锁。它的本质是乐观锁，即认为不会出现资源竞争。线程获得锁的时候会在锁上加一个标志码01，表示当前为偏向模式。此时线程不会进入CAS操作更不会进行互斥同步。它的实现就类似于未加锁的状态。一旦有第二个线程尝试获取锁，偏向锁便会立刻升级为轻量级锁。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>本质为乐观锁，底层实现为CAS，不同的是它使用的是自适应自旋。即当自旋过程成功获得锁时，自旋尝试次数扩大；反之，自旋尝试次数减少。同样当多个线程竞争统一资源时，轻量级锁会膨胀为重量级锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>本质为悲观锁，实现互斥同步。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 相关指令</title>
      <link href="2020/12/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Git%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/"/>
      <url>2020/12/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Git%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote><p>Git Bash</p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote><p>本质是C盘的用户文件下的gitconfig文件配置</p></blockquote><ul><li>git config —global user.name “名称”</li><li>git config —global user.email 邮箱</li></ul><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li>git config —system（—global当前用户） —list ：显示配置内容</li><li>Linux命令类似</li></ul><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201114100354931.png" alt="image-20201114100354931"></p><h4 id="git相关命令"><a href="#git相关命令" class="headerlink" title="git相关命令"></a>git相关命令</h4><ul><li><p><strong>git remote add origin</strong> [url] ：远程连接</p></li><li><p>git init：初始化git项目，生成.git隐藏文件</p></li><li>git clone [url] ：克隆远程仓库</li><li>git status：查看当前文件状态</li><li>git add ：git项目下初始文件为未暂存文件，需要add到暂存区(stage)</li><li>git commit -m “消息内容”：将暂存区中的文件存储到本地，附带更新消息</li><li>git push origin [master] (-f)：本地上传到远程仓库</li></ul><h4 id="gitignore文件过滤"><a href="#gitignore文件过滤" class="headerlink" title=".gitignore文件过滤"></a>.gitignore文件过滤</h4><p>语法规则：<br>以斜杠“/”开头表示目录；<br>以星号“*”通配多个字符；<br>以问号“?”通配单个字符<br>以方括号“[]”包含单个字符的匹配列表；<br>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p><h4 id="ssh公钥设置"><a href="#ssh公钥设置" class="headerlink" title="ssh公钥设置"></a>ssh公钥设置</h4><p>本机用户文件夹下有个.ssh文件夹，在.ssh文件夹下建立公钥</p><p>可使用 Git Bash 下的命令  <code>ssh-keygen -t rsa</code> 自动生成公钥和秘钥</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC 并发包详解</title>
      <link href="2020/12/03/Java/JUC%E5%B9%B6%E5%8F%91%E5%8C%85%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/03/Java/JUC%E5%B9%B6%E5%8F%91%E5%8C%85%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h3><blockquote><p>java.util.concurrent 简称</p><p>提供Lock,Condition 等类，完善Synchronize关键字部分功能，如精准唤醒等</p></blockquote><h4 id="消费者和生产者"><a href="#消费者和生产者" class="headerlink" title="消费者和生产者"></a>消费者和生产者</h4><p>高并发：线程操纵资源类。判断资源，生产者操作资源，唤醒通知消费者。严防多线程并发状态下的虚假唤醒。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130172733352.png" alt="image-20201130172733352"></p><h4 id="八锁现象"><a href="#八锁现象" class="headerlink" title="八锁现象"></a>八锁现象</h4><blockquote><p>不同锁之间不互斥</p></blockquote><h5 id="Synchronized-锁定的是方法的调用者-对象"><a href="#Synchronized-锁定的是方法的调用者-对象" class="headerlink" title="Synchronized 锁定的是方法的调用者(对象)"></a>Synchronized 锁定的是方法的调用者(对象)</h5><blockquote><p>只锁定调用同步方法的对象，不同对象之间并不互斥。（对象锁）</p></blockquote><h5 id="Static-Synchronize-锁定的是当前类（-class-类加载时创建，全局唯一）"><a href="#Static-Synchronize-锁定的是当前类（-class-类加载时创建，全局唯一）" class="headerlink" title="Static Synchronize 锁定的是当前类（**.class,类加载时创建，全局唯一）"></a>Static Synchronize 锁定的是当前类（**.class,类加载时创建，全局唯一）</h5><blockquote><p>锁定类，同一类下的对象都互斥（类锁）</p></blockquote><h4 id="集合类安全"><a href="#集合类安全" class="headerlink" title="集合类安全"></a>集合类安全</h4><blockquote><p>多个线程对同一个集合资源操作，输出时出现ConcurrentModification异常，表明给集合类不安全。</p></blockquote><h5 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h5><blockquote><p>ArrayList 不是线程安全的，高并发环境下需要使用其他类来替代</p></blockquote><ul><li><p>使用 list 下的 Vector 类，它使用Synchronize 保证线程安全。</p></li><li><p>使用Collocations工具类下的synchronizeList方法将ArrayList转化为线程安全的类。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130195342486.png" alt="image-20201130195342486"></p><p>发现本质就是对 mutex 同步操作来实现线程安全。</p><p><strong>注意迭代器处未加锁，说明此时对list的循环过程仍然不是线程安全！</strong></p></li><li><p>JUC 下的 CopyOnWriteArrayList 类，通过 Lock 实现线程安全</p></li></ul><h6 id="fail-fast-快速失败-机制"><a href="#fail-fast-快速失败-机制" class="headerlink" title="fail-fast 快速失败 机制"></a>fail-fast 快速失败 机制</h6><blockquote><p>这是一种在高并发环境下对集合进行操作时所产生的一种错误机制，报ConcurrentModification异常</p></blockquote><p>在高并发环境下对 ArrayList 类使用迭代器输出时，出现ConcurrentModification异常，即触发fail-fast机制</p><p>观察 ArrayList 类 迭代器 Iterator 下的next和remove方法，发现他们都有一个验证方法：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130192617589.png" alt="image-20201130192617589"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130192855260.png" alt="image-20201130192855260"></p><p>关键在于 modCount 的变化，层层分析后发现</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130194325731.png" alt="image-20201130194325731"></p><p>即在对集合进行操作时（add、remove等），modCount 自增，此时若在高并发环境下就会出现 modCount！=expectedModCount 的情况（变化未同步），从而抛出ConcurrentModification异常</p><p>实验发现当不使用迭代器时，不抛出异常，符合预期结果。</p><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><blockquote><p>同上分析即可</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130212313168.png" alt="image-20201130212313168"></p><p>底层 HashMap 实现</p></blockquote><ul><li>Collections.synchronizedSet(new HashSet&lt;&gt;());</li><li>CopyOnWriteArraySet&lt;&gt;()</li></ul><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><ul><li>HashTable</li><li>ConcurrentHashMap</li></ul><h4 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h4><blockquote><p>可以有返回值，存在缓存机制，获取结果过程需要等待可能发生阻塞</p></blockquote><p>Thread 通过 Runnable 实现类 FutureTask 来完成对Callable实现类的调用。</p><h5 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h5><p>内部执行过程分7中状态，且 state 多线程可见（实现类似缓存功能）</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130224806459.png" alt="image-20201130224806459"></p><p>实现对 Callable 类（包括它的实现类）的调用</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130224925150.png" alt="image-20201130224925150"></p><p>线程首先进入 FutureTask 类下的run方法，run方法中实现对Callable类中的call方法调用。完成后 state 状态转移。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201130225226986.png" alt="image-20201130225226986"></p><h4 id="各种常见的数据结构"><a href="#各种常见的数据结构" class="headerlink" title="各种常见的数据结构"></a>各种常见的数据结构</h4><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201201122936339.png" alt="image-20201201122936339"></p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote><p>池化技术，优先资源的使用，实现线程复用和控制最大并发数。</p><p>线程池、连接池、内存池、对象池。。。</p></blockquote><h5 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//固定大小</span></span><br><span class="line">ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//可伸缩</span></span><br><span class="line">ExecutorService threadPool1 =Executors.newCachedThreadPool();</span><br><span class="line">ExecutorService threadPool3 = Executors.newSingleThreadExecutor();<span class="comment">//单例</span></span><br></pre></td></tr></table></figure><h5 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//核心池大小（一开始就开启的大小）</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,//最大允许线程量</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,//核心池不足以满足就绪线程数时，开启新的线程池大小（-&gt;maximunPoolSize）,当不在需要时即time达到设定值时仍有线程未被使用则未使用线程开放关闭。</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,// 单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue// 线程等待区,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler // 线程使用完时，拒绝新线程的策略</span></span></span><br><span class="line"><span class="function"><span class="params">                         )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="四大拒绝策略"><a href="#四大拒绝策略" class="headerlink" title="四大拒绝策略"></a>四大拒绝策略</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大承载：maximumPoolSize + BlockingQueue.size() : 这里为5+3=8</span></span><br><span class="line"><span class="comment"> * 即一旦线程数超过8，则开启拒绝策略RejectedExecutionHandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> RejectedExecutionHandler 它有多个实现类</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@impl</span> DiscardOldestPolicy 尝试与最早线程竞争，有可能是可以获取到线程的，同时也不会抛出异常</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@impl</span> DiscardPolicy 直接丢弃任务，但不抛出异常</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@impl</span> AbortPolicy 超过最大承载时，抛出异常java.util.concurrent.RejectedExecutionException</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@impl</span> CallerRunsPolicy 交由主线程执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="CPU密集型、IO密集型"><a href="#CPU密集型、IO密集型" class="headerlink" title="CPU密集型、IO密集型"></a>CPU密集型、IO密集型</h5><blockquote><p>设置线程池的最大大小</p></blockquote><ol><li>CPU密集型，根据CPU处理器核数设置</li><li>IO密集型，根据程序中十分耗IO的线程数量设置，一般设为它的两倍。</li></ol><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>降低资源的消耗</li><li>提高响应的速度</li><li>统一在线程池中方便管理</li></ul><h4 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h4><blockquote><p>@FunctionalInterface 注解+接口 +有且仅有一个抽象方法</p><p>有效简化了代码</p><p>实现：new object class ({….}) —-&gt; (参数)-&gt;{执行}</p></blockquote><ul><li><p>Function 函数型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>Predicate 断定型接口</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluates this predicate on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the input argument matches the predicate,</span></span><br><span class="line"><span class="comment">     * otherwise &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>Consumer 消费型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>supplier 供给型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h4><blockquote><p>集合、MySQL负责存储，计算交由流来操作</p><p>内部有特殊的优化方法，在大数据下能有效提高效率</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//链式编程-&gt;流式计算-&gt;函数式接口-&gt;lamda表达式</span></span><br><span class="line">list.stream().sorted()</span><br><span class="line">        .limit(<span class="number">4</span>)</span><br><span class="line">        .filter((a)-&gt;&#123;<span class="keyword">return</span> a&gt;<span class="number">2</span>;&#125;)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line"><span class="comment">//不改变原来的数据</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h4 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h4><blockquote><p>ForkJoin 框架，本质就是将一个大作业分配给多个线程完成</p></blockquote><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201202131240863.png" alt="image-20201202131240863"></p><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><p>从结构图中可以看到 ForkJoin 需要一个连接池ForkJoinPool，该连接池内部含有一个ForkJoinWorkerThreadFactory 工厂接口可以选择不同的工厂模式，它用来创建新的线程 ForkJoinWorkerThread 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultForkJoinWorkerThreadFactory</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ForkJoinWorkerThreadFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinWorkerThread <span class="title">newThread</span><span class="params">(ForkJoinPool pool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinWorkerThread(pool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该工作进程创建同时还会新建该进程的工作队列 WorkQueue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ForkJoinWorkerThread</span><span class="params">(ForkJoinPool pool)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Use a placeholder until a useful name can be set in registerWorker</span></span><br><span class="line">    <span class="keyword">super</span>(<span class="string">&quot;aForkJoinWorkerThread&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.pool = pool;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = pool.registerWorker(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察 ForkJoinTask 源码可以发现 exec 抽象方法，根据语义可知它为任务的执行方法。</p><p>他有两个具体的重写方法，这里指列一个：RecursiveTask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The main computation performed by this task.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the result of the computation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> V <span class="title">compute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements execution conventions for RecursiveTask.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    result = compute();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续查找 compute 抽象类的重写方法，发现竟然没有。说明该方法需要用户自定义编写。我们通过继承 RecursiveTask 类，重写 compute 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTest</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    Long start = <span class="number">1L</span>;</span><br><span class="line">    Long end = <span class="number">10_0000_0000L</span>;</span><br><span class="line">    Long temp = <span class="number">1_0000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinTest</span><span class="params">(Long start, Long end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end-start&lt;temp)&#123;</span><br><span class="line">            Long sum = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (Long i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Long mid = (start+end)/<span class="number">2</span>;</span><br><span class="line">            ForkJoinTest task1 = <span class="keyword">new</span> ForkJoinTest(start,mid);</span><br><span class="line">            ForkJoinTest task2 = <span class="keyword">new</span> ForkJoinTest(mid+<span class="number">1</span>,end);</span><br><span class="line">            task1.fork();</span><br><span class="line">            task2.fork();</span><br><span class="line">            <span class="keyword">return</span> task1.join()+task2.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中fork方法负责将当前任务放入线程池中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多线程环境下：通过原子操作实现</span><br><span class="line">U.putOrderedObject(a, ((m &amp; s) &lt;&lt; ASHIFT) + ABASE, task);</span><br></pre></td></tr></table></figure><p>join方法，根据源码注释显示返回的是计算后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@return</span> the computed result</span><br><span class="line"> */</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">        reportException(s);</span><br><span class="line">    <span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找 getRawResult 抽象方法的重写，发现源码符合预期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getRawResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解了任务和线程之间的关系，接下来需要考虑线程池如何启动线程，从ForkJoinPool中查找，发现有submit、execution和invoke三个方法可以实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    externalPush(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">ForkJoinTask&lt;T&gt; <span class="title">submit</span><span class="params">(ForkJoinTask&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    externalPush(task);</span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invoke</span><span class="params">(ForkJoinTask&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    externalPush(task);</span><br><span class="line">    <span class="keyword">return</span> task.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execute和submit唯一的差别就是有无返回值，invoke返回值为结果。同时他们都有一个 externalPush 的动作，即将用户自定义的任务压入任务队列中，压入过程同样是原子操作。</p><p>push完成后还需要externalSubmit，开始执行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">externalSubmit(task);</span><br></pre></td></tr></table></figure><p>使用展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//创建线程池</span></span><br><span class="line">    ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();</span><br><span class="line">    <span class="comment">//创建自定义的任务方法</span></span><br><span class="line">    ForkJoinTest forkJoinTest = <span class="keyword">new</span> ForkJoinTest(ss,ee);</span><br><span class="line">    <span class="comment">//开始执行</span></span><br><span class="line">    forkJoinPool.execute(forkJoinTest);<span class="comment">//也可以用submit替代</span></span><br><span class="line">    <span class="keyword">long</span> result = forkJoinPool.join();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    long result = forkJoinPool.invoke();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">    System.out.println(result+<span class="string">&quot;---&quot;</span>+(e-s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><blockquote><p>参考<a href="https://www.cnblogs.com/gc65/p/10652300.html">https://www.cnblogs.com/gc65/p/10652300.html</a></p></blockquote><p>简单地说 - 空闲线程试图从繁忙线程的deques中“窃取”工作。</p><p>默认情况下，工作线程从其自己的双端队列中获取任务。</p><p>当它为空时，线程从另一个忙线程的双端队列尾部或全局入口队列中获取任务，因为这是待完成任务可能位于的位置。</p><p>这种方法最大限度地减少了线程竞争任务的可能性。它还减少了线程必须寻找工作的次数，因为它首先在最大可用工作块上工作。</p><p>找了一下源码以供参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If present, removes from queue and executes the given task,</span></span><br><span class="line"><span class="comment"> * or any other cancelled task. Used only by awaitJoin.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if queue empty and task not known to be done</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRemoveAndExec</span><span class="params">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;</span><br><span class="line">    ForkJoinTask&lt;?&gt;[] a; <span class="keyword">int</span> m, s, b, n;</span><br><span class="line">    <span class="keyword">if</span> ((a = array) != <span class="keyword">null</span> &amp;&amp; (m = a.length - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">        task != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((n = (s = top) - (b = base)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ForkJoinTask&lt;?&gt; t;;) &#123;      <span class="comment">// traverse from s to b</span></span><br><span class="line">                <span class="keyword">long</span> j = ((--s &amp; m) &lt;&lt; ASHIFT) + ABASE;</span><br><span class="line">                <span class="keyword">if</span> ((t = (ForkJoinTask&lt;?&gt;)U.getObject(a, j)) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> s + <span class="number">1</span> == top;     <span class="comment">// shorter than expected</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (t == task) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (s + <span class="number">1</span> == top) &#123;      <span class="comment">// pop</span></span><br><span class="line">                        <span class="keyword">if</span> (U.compareAndSwapObject(a, j, task, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                            U.putOrderedInt(<span class="keyword">this</span>, QTOP, s);</span><br><span class="line">                            removed = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (base == b)      <span class="comment">// replace with proxy</span></span><br><span class="line">                        removed = U.compareAndSwapObject(</span><br><span class="line">                            a, j, task, <span class="keyword">new</span> EmptyTask());</span><br><span class="line">                    <span class="keyword">if</span> (removed)</span><br><span class="line">                        task.doExec();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (t.status &lt; <span class="number">0</span> &amp;&amp; s + <span class="number">1</span> == top) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapObject(a, j, t, <span class="keyword">null</span>))</span><br><span class="line">                        U.putOrderedInt(<span class="keyword">this</span>, QTOP, s);</span><br><span class="line">                    <span class="keyword">break</span>;                  <span class="comment">// was cancelled</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--n == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (task.status &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h4><blockquote><p>异步执行：成功执行，失败回调</p></blockquote><h5 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture completedFuture = CompletableFuture.supplyAsync(</span><br><span class="line">        ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//int x = 1/0; // 任务失败开启回调</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;任务成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line">System.out.println(completedFuture.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 无论成功还是失败都会执行</span></span><br><span class="line">    System.out.println(t);<span class="comment">//正确时返回的信息</span></span><br><span class="line">    System.out.println(u);<span class="comment">//异常时返回的信息</span></span><br><span class="line">&#125;).exceptionally((e) -&gt; &#123;</span><br><span class="line"><span class="comment">//  失败时才会执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务失败&quot;</span>;</span><br><span class="line">&#125;).get());</span><br></pre></td></tr></table></figure><h4 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h4><blockquote><p>参考文章<a href="https://blog.csdn.net/starbxx/article/details/98742858">https://blog.csdn.net/starbxx/article/details/98742858</a></p><p>Java 内存模型，是一种概念模型</p></blockquote><p>java内存模型中规定了所有变量都存贮到主内存（如虚拟机物理内存中的一部分）中。每一个线程都有一个自己的工作内存(如cpu中的高速缓存)。线程中的工作内存保存了该线程使用到的变量的主内存的副本拷贝。线程对变量的所有操作（读取、赋值等）必须在该线程的工作内存中进行。不同线程之间无法直接访问对方工作内存中变量。线程间变量的值传递均需要通过主内存来完成。</p><p><img src="https://img-blog.csdnimg.cn/20190807134933227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0YXJieHg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="同步约定"><a href="#同步约定" class="headerlink" title="同步约定"></a>同步约定</h5><ul><li>线程解锁前，必须把共享变量立即刷回内存</li><li>线程加锁前，必须读取主存中的最新值到工作内存中</li><li>加锁和解锁是同一把锁</li></ul><h5 id="八种原子操作"><a href="#八种原子操作" class="headerlink" title="八种原子操作"></a>八种原子操作</h5><ul><li>lock(锁定)：作用于主内存，它把一个变量标记为一条线程独占状态；</li><li>read(读取)：作用于主内存，它把变量值从主内存传送到线程的工作内存中，以便随后的load动作使用；</li><li>load(载入)：作用于工作内存，它把read操作的值放入工作内存中的变量副本中；</li><li>use(使用)：作用于工作内存，它把工作内存中的值传递给执行引擎，每当虚拟机遇到一个需要使用这个变量的指令时候，将会执行这个动作；</li><li>assign(赋值)：作用于工作内存，它把从执行引擎获取的值赋值给工作内存中的变量，每当虚拟机遇到一个给变量赋值的指令时候，执行该操作；</li><li>store(存储)：作用于工作内存，它把工作内存中的一个变量传送给主内存中，以备随后的write操作使用；</li><li>write(写入)：作用于主内存，它把store传送值放到主内存中的变量中。</li><li>unlock(解锁)：作用于主内存，它将一个处于锁定状态的变量释放出来，释放后的变量才能够被其他线程锁定；</li></ul><h4 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h4><blockquote><p>JVM提供的轻量级的锁机制</p></blockquote><ul><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ul><h6 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h6><p>用户自定义程序的在计算机中的执行顺序不完全是顺序的，具体执行的指令会发生重排，重排时将考虑数据之间的依懒性。</p><h4 id="单例模式-关于饿汉式和懒汉式"><a href="#单例模式-关于饿汉式和懒汉式" class="headerlink" title="单例模式 (关于饿汉式和懒汉式)"></a>单例模式 (关于饿汉式和懒汉式)</h4><blockquote><p>参考：<a href="https://blog.csdn.net/yeyazhishang/article/details/90445330">https://blog.csdn.net/yeyazhishang/article/details/90445330</a></p><p>单例模式是比较常见的一种设计模式，目的是保证一个类只能有一个实例，而且自行实例化并向整个系统提供这个实例，避免频繁创建对象，节约内存。</p></blockquote><h5 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h5><p>在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><blockquote><p>重点</p></blockquote><p>在类加载时不初始化，等到第一次被使用时才初始化。</p><p><strong>普通的懒汉式 (线程不安全，不可用)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步方法的懒汉式 (可用)</strong></p><blockquote><p>锁方法，效率低</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双重检查懒汉式 (可用，推荐)</strong></p><blockquote><p>锁对象，同时双重检查能够使程序在实例化完成后对后续操作避免同步，有效提高效率</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态内部类 (可用，推荐)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>枚举 (可用、推荐)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法在《Effective JAVA》中大为推崇，它可以解决两个问题：</p><ul><li><p>线程安全问题。因为Java虚拟机在加载枚举类的时候会使用ClassLoader的方法，这个方法使用了同步代码块来保证线程安全。</p></li><li><p>避免反序列化破坏对象，因为枚举的反序列化并不通过反射实现。</p></li></ul><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><blockquote><p>参考：<strong><a href="https://www.cnblogs.com/jyroy/p/11365935.html">https://www.cnblogs.com/jyroy/p/11365935.html</a></strong></p></blockquote><hr><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p><p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p><p><img src="https://img-blog.csdnimg.cn/20181122101753671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><h5 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h5><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p><p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p><p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p><h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p><p>CAS算法涉及到三个操作数：</p><ul><li>需要读写的内存值 V。</li><li>进行比较的值 A。</li><li>要写入的新值 B。</li></ul><p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p><p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：</p><p><img src="https://img-blog.csdnimg.cn/20181122102030461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>根据定义我们可以看出各属性的作用：</p><ul><li>unsafe： 获取并操作内存的数据。</li><li>valueOffset： 存储value在AtomicInteger中的偏移量。</li><li>value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。</li></ul><p>接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：</p><p><img src="https://img-blog.csdnimg.cn/20181122102047431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>根据OpenJDK  8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v +  delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p><p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B  存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值  A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p><p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p><ol><li><p>ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p><p>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</p></li><li><p>循环时间长开销大。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p></li><li><p>只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p><p>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</p></li></ol><h5 id="自旋锁-VS-适应性自旋锁"><a href="#自旋锁-VS-适应性自旋锁" class="headerlink" title="自旋锁 VS 适应性自旋锁"></a>自旋锁 VS 适应性自旋锁</h5><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p><img src="https://img-blog.csdnimg.cn/2018112210212894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><p><img src="https://img-blog.csdnimg.cn/20181122104052869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p><p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><h5 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h5><blockquote><p>通过AQS实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>公平锁</p><p>​        公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p></li><li><p>非公平锁</p><p>​        非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p><strong>ReentrantLock 默认为非公平锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Synchronized 也为非公平锁</strong></p></li></ul><h5 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h5><blockquote><p>非公平锁</p></blockquote><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p><p><img src="https://img-blog.csdnimg.cn/20181122104329631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F4aWFvYm9nZQ==,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 相关指令</title>
      <link href="2020/12/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/"/>
      <url>2020/12/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p>Linux 中一切皆文件</p></blockquote><h3 id="1-使用原因"><a href="#1-使用原因" class="headerlink" title="1. 使用原因"></a>1. 使用原因</h3><ol><li>免费</li><li>很多软件原生是在Linux下运行的，庞大的社区支持，<strong>生态环境好</strong>。</li><li><strong>开源</strong>，可被定制，开放，<strong>多用户的网络操作系统</strong>。</li><li><strong>相对安全稳定</strong></li></ol><h3 id="2-目录"><a href="#2-目录" class="headerlink" title="2. 目录"></a>2. 目录</h3><p>目录呈树状结构，根目录为/</p><p>系统所创建的各个目录都有其特殊的意义：</p><ul><li><strong>bin 存放二进制可执行文件(ls,cat,mkdir等)</strong></li><li>boot 存放用于系统引导时使用的各种文件</li><li>dev 用于存放设备文件</li><li><strong>etc 存放系统配置文件</strong></li><li>home 存放所有用户文件的根目录</li><li>lib 存放跟文件系统中的程序运行所需要的共享库及内核模块</li><li>mnt 系统管理员安装临时文件系统的安装点</li><li><strong>opt 额外安装的可选应用程序包所放置的位置</strong></li><li>proc 虚拟文件系统，存放当前内存的映射</li><li><strong>root 超级用户目录</strong></li><li>sbin 存放二进制可执行文件，只有root才能访问</li><li>tmp 用于存放各种临时文件</li><li>usr 用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</li><li>var 用于存放运行时需要改变数据的文件</li></ul><h3 id="3-shell-变量"><a href="#3-shell-变量" class="headerlink" title="3.shell 变量"></a>3.shell 变量</h3><p>Shell 变量大致可以<strong>分为三类</strong>：</p><ul><li><p><strong>内部变量</strong>：由系统提供，用户只能使用不能修改。</p></li><li><ul><li>?</li><li>GROUPS</li></ul></li><li><p><strong>环境变量</strong>：这些变量决定了用户工作的环境，它们不需要用户去定义，可以直接在 shell 中使用，其中某些变量用户可以修改。</p></li><li><p><strong>用户变量</strong>：由用户建立和修改，在 shell 脚本编写中会经常用到。</p></li><li><ul><li><p>变量赋值（定义变量）</p></li><li><ul><li><code>varName=Value</code></li><li><code>export varName=Value</code></li></ul></li><li><p>引用变量<code>$varName</code></p></li></ul></li></ul><p>Shell变量的<strong>作用域</strong>：</p><ul><li><strong>局部变量</strong>的作用范围仅仅<strong>限制在其命令行所在的Shell或Shell脚本文件中</strong>；</li><li><strong>全局变量</strong>的作用范围则包括<strong>本Shell进程及其所有子进程</strong>。</li><li>局部变量与全局变量<strong>互换</strong>：可以使用 <code>export</code> 内置命令将局部变量设置为全局变量。 可以使用 <code>export</code> 内置命令将全局变量设置为局部变量。</li></ul><h2 id="二、Vim-使用技巧"><a href="#二、Vim-使用技巧" class="headerlink" title="二、Vim 使用技巧"></a>二、Vim 使用技巧</h2><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><ul><li><code>G</code>用于直接跳转到文件尾</li><li><code>ZZ</code>用于存盘退出Vi</li><li><code>ZQ</code>用于不存盘退出Vi</li><li><code>/和？</code>用于查找字符串</li><li><code>n</code>继续查找下一个</li><li><code>yy</code>复制一行</li><li><code>p</code>粘帖在下一行，P粘贴在前一行</li><li><code>dd</code>删除一行文本</li><li><code>x</code>删除光标所在的字符</li><li><code>u</code>取消上一次编辑操作（undo）</li></ul><h2 id="三、指令"><a href="#三、指令" class="headerlink" title="三、指令"></a>三、指令</h2><blockquote><ol><li><p>Linux命令格式包含三个部分，分别是： <code>命令</code> 、 <code>选项</code> 、 <code>参数</code> </p></li><li><p>选项前为单个减号（-），后面一般为 <code>单字符</code> ，选项前为双减号（—），后面一般为 <code>单词</code></p></li><li><p>Linux命令中使用的通配符有 <code>？ * []</code></p></li></ol></blockquote><h3 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h3><p>常用为3和5级别</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210402192918297.png" alt="image-20210402192918297"></p><p>切换运行级别可通过两种方式：</p><ol><li><p>修改默认的运行级别可更改文件：<code>etc/inittab</code> 的id:5:initdefault中的数字</p></li><li><p>指令：<code>init [0123456]</code></p></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>man [命令或配置文件] ：获得帮助信息</p></li><li><p>help [命令] ：获得帮助信息</p></li><li><p>history [最近几条指令] ：显示历史执行过得指令 </p><ul><li>通过 <code>!historyId</code> 可以直接执行历史指令</li></ul></li><li><p><code>cd</code> ：切换目录</p><ul><li><code>.</code>表示当前目录</li><li><code>..</code> 表示当前目录的上一级目录（父目录）</li><li><code>-</code>表示用 cd 命令切换目录<strong>前</strong>所在的目录</li><li><code>~</code> 表示<strong>用户主目录</strong>的绝对路径名</li></ul></li><li><p><strong><code>pwd</code>：</strong> 显示当前所在位置</p></li><li><p><code>sudo + 其他命令</code>：以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。</p></li><li><p><strong><code>grep 要搜索的字符串 要搜索的文件 --color</code>：</strong> 搜索命令，—color 代表高亮显示</p></li><li><p><strong><code>ps -ef</code>/<code>ps -aux</code>：</strong> 这两个命令都是查看当前系统正在运行进程，两者的区别是展示格式不同。如果想要查看特定的进程可以使用这样的格式：<strong><code>ps aux|grep redis</code></strong> （查看包括 redis 字符串的进程），也可使用 <code>pgrep redis -a</code>。</p><p>注意：如果直接用 ps（（Process Status））命令，会显示所有进程的状态，通常结合 grep 命令查看某进程的状态。</p></li><li><p><strong><code>kill -9 进程的pid</code>：</strong> 杀死进程（-9 表示强制终止。）</p><p>先用 ps 查找进程，然后用 kill 杀掉</p></li><li><p>netstat -tunlp：查看启动进程和端口号</p></li><li><p>|grep ：过滤</p></li><li><p>df、du ：磁盘存储</p></li><li><p>ps -ef ：查进程</p></li><li><p>```</p><h1 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h1><p>service iptables status</p><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><p>chkconfig iptables off</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- firewall-cmd --list-ports ：查Linux下当前开启的防火墙端口号</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  systemctl stop firewalld;</span><br><span class="line">  pkill -f firewalld;</span><br><span class="line">  systemctl start firewalld</span><br></pre></td></tr></table></figure><ul><li>firewall-cmd —zone=public —add-port=8080/tcp —permanent：添加防火墙端口号</li><li>firewall-cmd —zone=public —remove-port=8082/tcp —permanent : 移除防火墙端口号</li><li>systemctl restart firewalld.service：重启防火墙，新增后需要重启</li></ul></li><li><p>cat、tac、more、less  [file]：看文件内容</p></li><li><p>vim/vi ：文本编辑</p></li><li><p>pstree -pu：进程树</p></li><li><p>find [文件路径from] [option: -name] [instructment]：查看文件类型或文件属性信息</p></li><li><p>stat [file] : 查看当前文件inode信息</p></li><li><p>group(user)：用户组/用户</p><ul><li>groupdel</li><li>groupadd</li><li>groupmod</li><li>group</li></ul></li><li><p>passwd：设置用户密码</p><ul><li>passwd -l 用户：加锁</li><li>passwd -u 用户：解锁</li></ul></li><li><p>su：切换为其他用户</p></li><li><p>echo [string ]  [&gt;&gt;|&gt;] 文件名：重定向，&gt;&gt; 表示追加字符串，&gt;表示覆盖字符串</p></li><li><p>管道命令 | ：将前面的结果给后面的命令，例如：<code>ls -la | wc</code>，将ls的结果交由wc(word count)命令来统计字数</p></li><li><p>chmod -R 777 文件名 ：修改文件读取权限，-R 递归形式修改，777权限（111(rwx) 111 111）</p></li><li><p>ln [from file] [to file]：建立链接文件</p><ul><li>硬链接：对其中一个文件内容修改时，会影响到其他文件的内容；删除其中一个文件时，其他文件可以正常访问，不受影响</li><li>-s 软链接：硬链接读的内容是不同文件的内容，软连读的是源文件的内容。（看成一个引用）</li></ul></li><li><p>tcpdump -nn -i eth0 port 80 ：抓包程序，此处表示以数字显示，使用eth0接口访问外网，监听端口号80（http）</p></li><li><p>curl ：网站访问</p></li><li><p>strace -ff -o out java class文件  ：追踪命令系统调用，结果输出到out文件中</p></li><li><p>nc ip port ：netcat 人为建立网络连接。</p></li><li><p>ls、clear、cd、mv、rm。。。</p></li></ul><h4 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h4><ul><li><p><code>date</code> ：显示当前时间</p></li><li><p><code>date +%Y</code> ：显示当前年份</p></li><li><p><code>date +%m</code> ：显示当前月份</p></li><li><p><code>date +%d</code> ：显示当前日</p></li><li><p><code>date &quot;+%Y-%m-%d&quot;</code> ：显示年-月-日</p></li><li><p><code>date -s &quot;2021-4-2 20:03:22&quot;</code> ：设置时间</p></li><li><p><code>cal</code> ：查看日历信息</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210402200404176.png" alt="image-20210402200404176"></p></li></ul><h4 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h4><h5 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h5><p><code>find [搜索范围] [选项]</code>  </p><p>使用的选项：</p><ul><li>-name ：按文件名查找文件</li><li>-user ：按文件属于哪个用户来查找</li><li>-size [+12M(大于)/12(M/k/G)(等于)/-12M(小于)]：按文件大小来查找</li></ul><h5 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a>locate指令</h5><p><code>locate [string]</code> ：模糊查询所有路径中带string的文件</p><p>实现快速定位文件路径。基于维护的locate数据库实现快速定位，速度快。</p><p>使用前注意使用 <code>updatedb</code> 更新数据库</p><h5 id="grep指令和管道符"><a href="#grep指令和管道符" class="headerlink" title="grep指令和管道符|"></a>grep指令和管道符|</h5><p>grep表示过滤查找，管道符|用来将前一个指令的处理结果交由后面的指令处理</p><p>grep [选项] 查找内容 源文件</p><p>常用选项：</p><ul><li>-n：显示匹配行及行号</li><li>-i ：忽略字母大小写</li></ul><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><blockquote><ul><li>z：调用 gzip 压缩命令进行压缩</li><li>c：打包文件</li><li>v：显示运行过程</li><li>f：指定文件名</li><li>x：代表解压</li></ul></blockquote><ul><li><p>tar<br> 解包：tar -xvf filename.tar<br> 打包：tar -zcvf filename.tar dirname</p></li><li><p>gz命令<br> 解压1：gunzip filename.gz<br> 解压2：gzip -d filename.gz<br> 压缩：gzip filename<br>   .tar.gz 和 .tgz<br>   解压：tar zxvf filename.tar.gz<br>   压缩：tar zcvf filename.tar.gz dirname<br>   压缩多个文件：tar zcvf filename.tar.gz dirname1 dirname2 dirname3…..</p></li><li><p>bz2命令<br> 解压1：bzip2 -d filename.bz2<br> 解压2：bunzip2 filename.bz2<br> 压缩：bzip2 -z filename</p><pre><code>.tar.bz2</code></pre><p>​    解压：tar jxvf filename.tar.bz2<br>​    压缩：tar jcvf filename.tar.bz2 dirname</p></li><li><p>bz命令<br>  解压1：bzip2 -d filename.bz<br>  解压2：bunzip2 filename.bz</p><pre><code> .tar.bz解压：tar jxvf filename.tar.bz</code></pre></li><li><p>z命令<br>  解压：uncompress filename.z<br>  压缩：compress filename<br>  .tar.z<br>  解压：tar zxvf filename.tar.z</p><p>  压缩：tar zcvf filename.tar.z dirname</p></li><li><p>zip命令</p><p>  解压：unzip filename.zip<br>  压缩：zip filename.zip dirname</p></li></ul><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><blockquote><p>root 用户对文件的读写不受权限影响，理论上可以对任何文件进行读写</p><p>文件权限检查时先判断用户名再判断用户所属组，再判断为其他组。</p></blockquote><h5 id="文件的类型："><a href="#文件的类型：" class="headerlink" title="文件的类型："></a>文件的类型：</h5><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210321155843492.png" alt="image-20210321155843492"></p><ul><li>d： 代表目录</li><li>-： 代表文件</li><li>l： 代表软链接（可以认为是 window 中的快捷方式）</li></ul><p><strong>Linux 中权限分为以下几种：</strong></p><ul><li>r：代表权限是可读，r 也可以用数字 4 表示</li><li>w：代表权限是可写，w 也可以用数字 2 表示</li><li>x：代表权限是可执行，x 也可以用数字 1 表示</li></ul><p>修改文件权限指令：<code>chmod</code></p><p>u：所有者，g：所有组，o：其他人，a：所有人</p><p><code>chmod [option] u=rwx,g=rwx,o=rwx 文件名</code></p><p><code>chmod [option] 777 文件名</code></p><p>常用选项：</p><ul><li>-R ：递归修改目录及目录下所有文件权限</li></ul><h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><h5 id="crond-实现任务调度"><a href="#crond-实现任务调度" class="headerlink" title="crond 实现任务调度"></a>crond 实现任务调度</h5><p><code>crontab [选项]</code></p><p>常用选项：</p><ul><li>-e ： 编辑crontab定时任务</li><li>-l ：查询crontab任务</li><li>-r ：删除当前用户所有的crontab任务</li></ul><p>时间：cron表达式</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403095847049.png" alt="image-20210403095847049"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403101241885.png" alt="image-20210403101241885"></p><blockquote><p>* 之间隔一个空格，* 后面直接加/数字无空格</p></blockquote><p>例子：</p><ol><li><code>*/1 * * * * * ls /&gt;/tmp/to.txt</code> ：直接使用指令</li><li><code>*/1 * * * * * /home/xx/xxx.sh</code> ：定时执行脚本</li></ol><p><code>service crond restart</code> ：重启任务调度</p><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><h5 id="进程基本介绍"><a href="#进程基本介绍" class="headerlink" title="进程基本介绍"></a>进程基本介绍</h5><ol><li>每个执行的程序都称为一个进程，每个进程都被分配有一个IP号。</li><li>每个进程都对应有一个父进程</li><li>每个进程都可能以两种方式存在，即前台和后台。</li><li>一般系统服务都是以后台进程方式存在，且都会驻存在系统中，直到关机才结束。</li></ol><h5 id="显示系统执行进程的方法"><a href="#显示系统执行进程的方法" class="headerlink" title="显示系统执行进程的方法"></a>显示系统执行进程的方法</h5><p><code>ps</code> : 用来查看当前系统中，有哪些进程正在执行，以及他们的执行情况。</p><ul><li>-a ：显示当前终端的所有进程信息</li><li>-u ：以用户格式显示进程信息</li><li>-x ：显示后台进程运行的参数</li><li>-f  ：以全格式显示(包括显示父进程ppid)</li><li>-e ：显示所有进程</li></ul><p><code>pstree [选项]</code>  ：可以更加直观的显示进程信息</p><ul><li>-p ：显示进程的PID</li><li>-u ：显示进程的所属用户</li></ul><p>常用组合：<code>ps -aux</code> ，<code>ps -ef</code></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403130735679.png" alt="image-20210403130735679"></p><h5 id="终止进程的方法"><a href="#终止进程的方法" class="headerlink" title="终止进程的方法"></a>终止进程的方法</h5><p><code>kill [选项] 进程号</code> ：通过进程号来杀死进程<br><code>killall 进程名</code> ：通过进程名杀死进程，也支持通配符。<br>常用选项：</p><ul><li>9 ：强制执行 </li></ul><p>例子：</p><ol><li>关闭sshd服务，其他用户无法远程连接。</li><li>杀死其他用户的sshd进程，踢除正在连接的用户。</li></ol><h5 id="进程动态监控的方法"><a href="#进程动态监控的方法" class="headerlink" title="进程动态监控的方法"></a>进程动态监控的方法</h5><p><code>top [选项]</code></p><p>常用选项：</p><ul><li>-d 秒数 ：指定top指令每个几秒更新一次，默认3s</li><li>-i ：使top不显示任何闲置或僵死进程</li><li>-p ：通过指定监控进程ID来仅仅监控某个进程的状态</li></ul><p>交互指令：</p><ul><li>P ：以CPU使用率排序，默认为改项</li><li>M ：以内存的使用率排序</li><li>N ：以PID排序</li><li>q ：退出top</li><li>u 用户名 ：过滤出指定user</li><li>k PID ：杀死某进程</li></ul><h4 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>服务本质就是进程，但是运行在后台，同时都会监听某个端口。等待其他程序请求。我们又把他们称为守护进程。</p><p>注意：所有的服务都存放在<code>/etc/init.d/</code>目录下，而这些文件都是可执行的脚本文件，其中对应设置了在不同运行级别下的自启动选项。系统启动时，会自动执行该目录下的所有脚本。</p><h5 id="service-指令"><a href="#service-指令" class="headerlink" title="service 指令"></a>service 指令</h5><p><code>service 服务名 start|stop|restart|reload|status</code> ：实现对服务的一系列操作，注意这些操作都是临时性的。</p><p><code>chkconfig --list</code> ：查看所有自启动服务</p><p><code>chkconfig --level 5 服务名 on/off</code> ：实现不同级别下的服务自启情况</p><h5 id="systemctl-指令"><a href="#systemctl-指令" class="headerlink" title="systemctl 指令"></a>systemctl 指令</h5><p>可以看作是service指令的升级，提供可高效的启动速度。同时能独立实现服务开机自启</p><p><code>systemctl start|stop|restart|reload|status 服务名</code></p><p><code>systemctl enable|disable|is-active 服务名</code> ：实现服务开机自启或禁用</p><p><code>systemctl list-unit-files –type=service</code>  ： 列出所有服务 </p><p><code>systemctl set-default runlevel（等级1/2/3..）.target</code> ：设置默认运行等级 </p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403151935620.png" alt="image-20210403151935620"></p><h4 id="添加开机启动项"><a href="#添加开机启动项" class="headerlink" title="添加开机启动项"></a>添加开机启动项</h4><p>假如我们装了一个 zookeeper，我们每次开机到要求其自动启动该怎么办？</p><ol><li>新建一个脚本 zookeeper</li><li>为新建的脚本 zookeeper 添加可执行权限，命令是:<code>chmod +x zookeeper</code></li><li>把 zookeeper 这个脚本添加到开机启动项里面，命令是：<code>chkconfig --add zookeeper</code></li><li>如果想看看是否添加成功，命令是：<code>chkconfig --list</code></li></ol><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><blockquote><p>用户配置文件在<code>/etc/passwd</code></p><p>组配置文件在<code>/etc/group</code></p><p>口令配置文件（包括登录名，加密口令，最后一次修改时间等）在<code>/etc/shadow</code></p></blockquote><p><code>/etc/passwd</code>:</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210402192015760.png" alt="image-20210402192015760"></p><p><code>/etc/shadow</code></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210402192323539.png" alt="image-20210402192323539"></p><p><code>/etc/group</code></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210402192513073.png" alt="image-20210402192513073"></p><ul><li>adduser [-d 用户指定目录(default /home)]  [username] : 新增用户，未指定组自动创建与用户名一致的组</li><li>adduser -g [用户组] [用户名] ：将某用户加到某组，</li><li>id [用户] ：查看用户信息（该用户名和其所在组）</li><li>passwd [用户] : 设置密码</li><li>usermod -g [用户组] [用户名]：用户切换组</li><li>userdel [用户] ：删除用户但保留用户目录</li><li>userdel -r [用户]：不保留用户目录（一般实际都考虑保留）</li><li>su - [用户]：切换用户（从root到其他用户不需要输入密码）</li><li>groupdel [用户组] ：删除用户组</li><li>groupadd [用户组]：新增用户组</li><li>groupmod -g [用户组] [用户名] ：修改</li></ul><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210402203753715.png" alt="image-20210402203753715"></p><p><strong>文件所有者信息修改</strong></p><ul><li>chown 用户名 文件名：修改文件所有者为指定用户名，但组不变</li><li>chgrp 组名 文件名：修改文件所在的组为指定组名，但用户名不变</li></ul><h4 id="磁盘分区和挂载"><a href="#磁盘分区和挂载" class="headerlink" title="磁盘分区和挂载"></a>磁盘分区和挂载</h4><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403112017353.png" alt="image-20210403112017353"></p><h5 id="分区方式"><a href="#分区方式" class="headerlink" title="分区方式"></a>分区方式</h5><ol><li>系统只能安装在主分区</li><li>扩展分区要占一个主分区</li></ol><p><strong>加硬盘完整步骤：</strong></p><ol><li><p>添加一块硬盘 ，重启后查看是否硬盘有成功添加进来。使用<code>lsblk -f</code> 指令来查看磁盘及其分区、挂载情况。</p></li><li><p>硬盘做分区：<code>fdisk /dev/sdb</code></p></li><li><p>格式化：往磁盘分区中载入文件系统信息，包括索引节点、初始目录项等，实现初始化。<code>mkfs -t ext4 /dev/sdb1</code></p></li><li><p>挂载：将该分区挂载到某个目录上。实现文件与分区间的关联。<code>mount /dev/sdb1 /home/newdisk</code> 。注意此时仅为临时挂载，一旦重启就又不挂载了。<code>umount 设备名称/挂载目录</code> ：实现卸载，注意卸载时不要在卸载目录上。</p></li><li><p>设置永久挂载：通过直接修改<code>/etc/fstab</code> 配置文件实现永久挂载。修改完后再使用<code>mount -a</code> 指令即可。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403111251926.png" alt="image-20210403111251926"></p></li></ol><p><strong>磁盘查看常用指令</strong></p><ol><li><code>df -h</code> ：查看磁盘使用情况，含磁盘大小，使用量，剩余量等信息</li><li><code>du -h 目录</code> ：查询指定目录的磁盘占用情况<ul><li>-s 指定目录占用大小汇总</li><li>-a 含文件</li><li>-c 列出明细同时显示汇总值</li><li>—max-depth：统计的目录深度</li></ul></li></ol><h4 id="网络通信命令"><a href="#网络通信命令" class="headerlink" title="网络通信命令"></a>网络通信命令</h4><ul><li><p>查看当前系统的网卡信息：ifconfig/id addr</p></li><li><p>查看与某台机器的连接情况：ping（网络层）</p></li><li><p>查看当前系统的端口使用：netstat -anp</p><p>选项：</p><ul><li>-an ：按一定顺序排列输出</li><li>-p ：显示那个进程调用</li><li>-t ：进显示tcp调用的</li></ul></li></ul><blockquote><p>包在网络中传输过程，注意IP地址保留封装在包中，MAC地址则会转化为下一跳MAC地址</p></blockquote><ul><li><p>网络层，查看当前系统的路由情况：route -n</p><ul><li>route add -host ip1 gw ip2 ：添加一条ip映射（网关）</li></ul><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210404114942513.png" alt="image-20210404114942513"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210404115237174.png" alt="image-20210404115237174"></p></li><li><p>数据链路层，查看mac映射表：arp -a</p></li><li><p><strong>net-tools 和 iproute2 ：</strong> <code>net-tools</code>起源于 BSD 的 TCP/IP 工具箱，后来成为老版本 LinuxLinux 中配置网络功能的工具。但自 2001 年起，Linux 社区已经对其停止维护。同时，一些 Linux 发行版比如 Arch Linux 和 CentOS/RHEL 7 则已经完全抛弃了 net-tools，只支持<code>iproute2</code>。linux ip 命令类似于 ifconfig，但功能更强大，旨在替代它。更多详情请阅读<a href="https://linoxide.com/linux-command/use-ip-command-linux">如何在 Linux 中使用 IP 命令和示例</a></p></li><li><p><strong><code>shutdown</code>：</strong> <code>shutdown -h now</code>： 指定现在立即关机；<code>shutdown +5 &quot;System will shutdown after 5 minutes&quot;</code>：指定 5 分钟后关机，同时送出警告信息给登入用户。</p></li><li><p><strong><code>reboot</code>：</strong> <strong><code>reboot</code>：</strong> 重开机。<strong><code>reboot -w</code>：</strong> 做个重开机的模拟（只有纪录并不会真的重开机）。</p></li></ul><h4 id="jdk相关命令"><a href="#jdk相关命令" class="headerlink" title="jdk相关命令"></a>jdk相关命令</h4><ul><li>jps：显示java进程</li><li>jstat pid：显示java进程信息</li><li>top：显示所有进程信息</li><li>top -Np pid ：显示对应进程下的线程信息</li><li>printf ‘%x’ pid：输出pid的16进制形式</li><li>jmap -dump:format=b,file=/home/app/dump.out 17740 ：dump下对应进程的堆栈信息</li><li>jhat file：查看快照信息</li><li>jstack pid：查看堆栈信息</li></ul><h4 id="rpm包管理"><a href="#rpm包管理" class="headerlink" title="rpm包管理"></a>rpm包管理</h4><p><code>rpm -qa|grep xx</code> ：查询rpm中已下载有的包</p><p><code>rpm -ivh 包名</code> ：下载指定包</p><p><code>rpm -e 包名</code> ：卸载指定包</p><p>常用选项：</p><ul><li>-q ：查询包</li><li>-a ：所有包</li><li>-i ：显示包具体信息</li><li><p>-l ：显示rpm包文件所在路径</p></li><li><p>-f ：查询该文件属于哪个rpm包</p></li><li><p>-e ：删除该包</p></li><li>-i ：install安装包</li><li>-v ：verbose 提示</li><li>-h ：hash显示进度条</li></ul><h4 id="yum包管理"><a href="#yum包管理" class="headerlink" title="yum包管理"></a>yum包管理</h4><p>基于RPM包管理，能够从指定服务器自动下载RPM包并且安装。<strong>可以自动处理依赖关系</strong>，并且一次性安装所有依赖的软件包。</p><p><code>yum list|grep xxx</code> ：查询yum服务器上是不是有这个软件</p><p><code>yum install xxx</code> ：下载安装。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="常用配置文件修改"><a href="#常用配置文件修改" class="headerlink" title="常用配置文件修改"></a>常用配置文件修改</h3><h4 id="1-etc-ssh-sshd-config-ssh-配置"><a href="#1-etc-ssh-sshd-config-ssh-配置" class="headerlink" title="1./etc/ssh/sshd_config : ssh 配置"></a>1.<code>/etc/ssh/sshd_config</code> : ssh 配置</h4><p><code>PasswordAuthentication yes</code> ：设置开启密码登录模式</p><p>配置完成后：<code>service sshd restart</code></p><h4 id="2-etc-my-conf-mysql-配置"><a href="#2-etc-my-conf-mysql-配置" class="headerlink" title="2./etc/my.conf : mysql 配置"></a>2.<code>/etc/my.conf</code> : mysql 配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port&#x3D;3306</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port&#x3D;3306</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"></span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line"># Settings user and group are ignored when systemd is used.</span><br><span class="line"># If you need to run mysqld under a different user or group,</span><br><span class="line"># customize your systemd unit file for mariadb according to the</span><br><span class="line"># instructions in http:&#x2F;&#x2F;fedoraproject.org&#x2F;wiki&#x2F;Systemd</span><br><span class="line"></span><br><span class="line"># [mysqld_safe]</span><br><span class="line"># log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log</span><br><span class="line"># pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid</span><br><span class="line"># skip-grant-tables</span><br><span class="line">#</span><br><span class="line"># include all files from the config directory</span><br><span class="line">#</span><br><span class="line">!includedir &#x2F;etc&#x2F;my.cnf.d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-etc-sysconfig-network-scripts-ifcfg-eth0：Linux网络环境配置"><a href="#3-etc-sysconfig-network-scripts-ifcfg-eth0：Linux网络环境配置" class="headerlink" title="3. /etc/sysconfig/network-scripts/ifcfg-eth0：Linux网络环境配置"></a>3. <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>：Linux网络环境配置</h4><p>修改配置文件来指定IP，实现将IP地址配置为静态。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403124842487.png" alt="image-20210403124842487"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210403125111945.png" alt="image-20210403125111945"></p><p><code>systemctl network restart</code></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础详解</title>
      <link href="2020/12/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/"/>
      <url>2020/12/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><ul><li>单机：单数据库</li><li>多机：多数据库，数据库读写分离</li><li>增加缓存区：优化读的效率</li><li>设置多个集群（多个读写数据库作为一个集群），提高单点访问量</li><li>分库分表，MySQL=&gt;memcache</li><li>NoSQL（not only SQL，键值对存储，细粒度缓存，效率高，随取随用），存储高数据量，实时变化的数据。通过缓存存储数据，一定条件下再持久化。<ul><li>3V：海量、多样、实时</li><li>3高：高并发、高可拓、高性能</li></ul></li></ul><h4 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h4><blockquote><p>一般返回值长度，boolean显示0-1。</p></blockquote><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><ul><li><code>select []</code>  : 选择数据库，默认0-15</li><li><code>flushdb</code> []  / <code>flushall</code> : 清除数据库</li><li><code>move [key] [db]</code>：移除当前key</li><li><code>keys *</code> : 查看数据库所有的key</li><li><code>set [key] [value]</code>、<code>get [key] [value]</code> : 使用:分隔符同样可以做到批量插入，<code>set k1:v1 k2 v2.....</code></li><li><code>exists [key]</code> :  是否存在key</li><li><code>expire [key] [time/s]</code> :  设定自动过期</li><li><code>ttl[key]</code> : 时间</li><li><code>type [key]</code> : 返回键值类型</li><li><code>append [key] [string]</code>: 追加字符串（若key不存在，自动生成key）</li><li><code>strlen [key]</code> : 获取字符串长度</li><li><code>incr/decr [key]</code>: 增1/减1（原子性操作）</li><li><code>incrby/decrby [key] [step]</code>: </li><li><code>getrange [key] [start] [end]</code>: string 读范围[start,end]</li><li><code>setrange [key] [offset] [value]</code> : 替换指定位置开始字符串</li><li><code>setex [key] [time/s] [value]</code> :  设置过期键值</li><li><code>setnx [key] [value]</code> : 如果key不存在，设置键值(分布式锁)</li><li><code>mset [key] [value]....</code> ：批量添加键值</li><li><code>msetnx</code> ：批量添加键值，原子性操作（一起成功或一起失败）</li><li><code>getset [key] [value]</code> : 先获取再设值</li></ul><hr><h5 id="List："><a href="#List：" class="headerlink" title="List："></a>List：</h5><blockquote><p>双向链表结构。l开头表示往左插入，r开头表示往右插入.最后一个元素下标为-1，所有元素表示[0,-1]。</p></blockquote><ul><li><code>lpush/rpush [key] [value]</code> : 加入队列</li><li><code>lpop/rpop [key]</code> : 移除队头/队尾</li><li><code>lindex [key] [index]</code> : 获取当前index下的值</li><li><code>llen [key]</code> : 返回队列长度</li><li><code>lrem [key][count][value]</code> ：移除当前key下指定个数的值，精确匹配</li><li><code>ltrim [key][start][end]</code> : 截取[start,end]的list</li><li><code>rpoplpush [source][destination]</code> : 组合命令</li><li><code>lset [key][index][value]</code> : 添加元素，前提是key存在</li><li><code>linsert [key][before/after][element][value]</code> : 插入第一个遇到的元素的前面或后面，element为具体值。</li></ul><hr><h5 id="set："><a href="#set：" class="headerlink" title="set："></a>set：</h5><blockquote><p>无序不重复，s开头</p></blockquote><ul><li><code>sadd [key][value]...</code> : 加入集合</li><li><code>smembers [key]</code>  : 返回所有元素</li><li><code>sismember [key][value]</code> ：返回是否有该值</li><li><code>scard [key]</code> : 返回元素个数</li><li><code>srem [key][value]...</code> : 删除指定值</li><li><code>srandmember [key][count]</code> : 随机选取count个元素</li><li><code>spop [key]</code> : 随机移除元素</li><li><code>smove [source][destination][member]</code> : 转移</li><li><code>sdiff/sunion/sinter [key] [key]...</code>  : 差集/交集/并集</li></ul><hr><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><blockquote><p> map集合，更适合于对象的存储。h开头，key-value—-&gt;key-[key-value]</p></blockquote><ul><li><code>hset [key][field][value]...</code></li><li><code>hget [key][field]</code></li><li><code>hmset/hmget</code></li><li><code>hgetall [key]</code> : 获得所有的key和value</li><li><code>hdel [key][field]</code></li><li><code>hlen [key]</code></li><li><code>hkeys/hvals [key]</code>：只获取key/value</li><li><code>hincrby/hdecrby [key][field][increment]</code> </li><li>…结合string都差不多。</li></ul><hr><h5 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h5><blockquote><p> 有序集合,z开头，在set基础上加了个值用于排序。</p></blockquote><ul><li><code>zadd [key][score][value]</code> : score提供排序优先级</li><li><code>zrangebyscore [key][min][max](withscores)</code> : 从小到大排序</li><li><p><code>zrevrangebyscore [key][max][min](withscores)</code> : 从大到小排序</p></li><li><p><code>zrevrange [key][start][stop]</code> : 从大到小排（按元素下标）</p></li><li><code>zrem [key][value]</code></li><li><code>zcard [key]</code> : 获取集合中元素个数</li><li><code>zcount [key][min][max]</code> : score在[min,max]区间的元素个数</li></ul><h5 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h5><blockquote><p>使用 geohash 保存地理位置的坐标，使用有序集合（zset）保存地理位置的集合，适用于zset命令</p></blockquote><ul><li>1、GEOADD：增加某个地理位置的坐标</li><li>2、GEOPOS：获取某个地理位置的坐标</li><li>3、GEODIST：获取两个地理位置的距离</li><li>4、GEORADIUS：根据给定地理位置坐标获取指定范围内的地理位置集合</li><li>5、GEORADIUSBYMEMBER：根据给定地理位置获取指定范围内的地理位置集合</li><li>6、GEOHASH：获取某个地理位置的 geohash 值，二维的经纬度转化为一维的字符串，字符串越接近表示距离越近。</li></ul><h5 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h5><blockquote><p>基数统计，占用内存固定，只需12KB。</p></blockquote><ul><li><code>pfadd</code> </li><li><code>pfcount</code> : 计数（去重）</li><li><code>pfmerge [destkey][sourcekey]...</code> : 所有source合并为destkey</li></ul><h5 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h5><blockquote><p>位存储，位图，操作二进制位进行记录，0：1。优化了空间存储，提高效率。</p></blockquote><ul><li><code>setbit [key][offset][value]</code> </li><li><code>bitcount [count]</code> </li></ul><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>Redis 是单线程的，多线程是为处理IO请求</p></blockquote><p>Redis 基于内存操作，无CPU瓶颈。Redis也有事务，本质是一组命令的集合。具有一次性、顺序性、排他性。<strong>没有隔离级别的概念。</strong></p><p><strong>单条命令保证原子性但事务不保证原子性。</strong></p><p><code>multi</code> : 开启事务</p><p><code>exec</code> : 执行事务（根据命令顺序执行）</p><ul><li>编译型异常：指令有误，所有指令都不执行。</li><li>运行时异常：运行时出错，其他指令依然可正常执行。（不符合原子性）</li></ul><p><code>discard</code> : 取消事务</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><blockquote><p>无论什么情况都会加锁</p></blockquote><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><blockquote><p>监视数据</p><p><code>watch [key]...</code> : 充当乐观锁操作</p><p><code>unwatch</code> : 解锁</p></blockquote><h4 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h4><ol><li>高性能服务器一定是多线程</li><li>多线程一定比单线程效率高</li></ol><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Redis将所有数据全部存于内存中且无上下文切换，所有使用单线程时效率很高。</p><h4 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h4><h5 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h5><h6 id="RDB机制"><a href="#RDB机制" class="headerlink" title="RDB机制"></a>RDB机制</h6><blockquote><p>Redis DateBase，Redis默认模式</p><p>Redis单独创建一个fork进程，负责将当前时刻的数据以快照(Snapshot)的形式持久化到磁盘中（覆盖原来的rdb文件），持久化过程中主进程不能进行任何IO操作。当要恢复时将快照文件直接读到内存即可。</p><p>保存的文件默认名称:dump.rdb</p></blockquote><p>config文件：</p><p><code>save [interval][times]</code> :  每隔interval时间的数据修改超过times次，就触发rdb操作，及生成dump.rdp文件</p><p>触发机制：</p><ul><li><code>save</code> : 自动触发rdb</li><li><code>flushall</code></li><li><code>shutdown</code> ：退出后自动生成rdb文件</li></ul><p>恢复：</p><ul><li>dump文件在默认目录下即可，redis启动时会自动恢复其中的数据。</li></ul><p>优点：</p><ul><li>适合大规模数据恢复</li><li>对数据完整性要求不高</li></ul><p>缺点：</p><ul><li>它以时间间隔定期保存，一部分数据可能丢失。</li><li>fork进程，会占用一定内存空间</li></ul><h6 id="AOF机制"><a href="#AOF机制" class="headerlink" title="AOF机制"></a>AOF机制</h6><blockquote><p>Append Only File</p><p>redis会将每一个收到的<strong>写</strong>命令都通过write函数追加到文件中。通俗的理解就是日志记录。</p></blockquote><p>config配置：</p><p><code>appendonly no</code>—-&gt;<code>appendonly yes</code>  :  开启aof，与adb同时开启时，优先启用aof(安全性更高)</p><p><code>appendfsync always</code> : 每次修改都会同步，效率低</p><p><code>appendfsync everysec</code> : 默认开启。每秒执行一次同步，可能丢失数据</p><p><code>appendfsync no</code> ：不执行同步，有操作系统执行数据同步，速度快</p><p>修复aof文件：</p><p>aof文件损坏时，redis服务将无法开启。可以使用<code>redis-check-aof --fix appendonly.aof</code>命令修复aof文件（删除了错误数据，只保留正确数据）。</p><p>重写：</p><blockquote><p>在当前的快照保存工作结束后，开启一个子进程，将AOF文件进行重写，合并set命令等操作到一个临时文件，达到缩小文件大小的目的。重写结束后后将临时文件替换为新的AOF文件（重写过程中如果有新的redis操作命令，会提交到缓存中，重写结束后追加到AOF文件内）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64m  <span class="comment">#aof文件大于64mb时，fork一个新的进程将aof文件进行重写。</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>每一次修改都同步，文件完整性、一致性好。</li></ul><p>缺点：</p><ul><li>相对于数据文件来说，aof远大于rdb，修复速度也较慢。</li><li>aof 是一种 IO操作，效率要比rdb慢，</li></ul><h6 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h6><blockquote><p>requirepass 123456  :  设置密码</p><hr><p><code>config set requirepass [password]</code> : 设置密码[临时性的]</p><p><code>config get requirepass</code></p><p>auth [password]  :  登录操作</p></blockquote><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="订阅和发布"><a href="#订阅和发布" class="headerlink" title="订阅和发布"></a>订阅和发布</h4><h5 id="Redis命令-1"><a href="#Redis命令-1" class="headerlink" title="Redis命令"></a>Redis命令</h5><ul><li><code>subscribe [channel]</code> : 创建频道(订阅端)</li><li><code>publish [channel][massage]</code> : 发布信息(发布端)</li><li><code>pubsub channels [pattern]</code> : 返回当前的活跃频道</li><li><code>pubsub numsub [channel]..</code> : 返回频道订阅数量</li></ul><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>服务器中维护着一个pubsub_channels字典，所有的频道和订阅关系都存储在这里。字典的键为频道的名称，而值为订阅频道的客户端链表。</p><p>发布端发布信息时，服务器会遍历pubsub_channels中对应键的链表，向每一个客户端发送信息。</p><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><blockquote><p>从机负责读，主机负责写。配置文件默认为主机</p></blockquote><h6 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h6><ul><li>设置从机</li></ul><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201128160627477.png" alt="image-20201128160627477"></p><ul><li><p>命令行配置：</p><p><code>slaveof [host][port]</code>  ： 临时性配置主从关系</p><p><code>slaveof no one</code> : 重新成为master</p></li></ul><h6 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h6><p>Slave启动成功连接到master后，发送sync命令。Master接到命令后启动后台存盘进程，同时收集所接受到用于修改的数据集命令，在后台进程执行完毕后，master传送整个数据文件到slave，完成一次<strong>完全同步</strong>。</p><ul><li><p>全量复制</p><p>slave服务在接受到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制</p><p>master继续将新的所收集到的修改命令依次传给slave，完成同步。</p><p>只要是重新连接master，一次完全同步（全量复制）将被自动执行。</p></li></ul><h4 id="哨兵模式（sentinel）"><a href="#哨兵模式（sentinel）" class="headerlink" title="哨兵模式（sentinel）"></a>哨兵模式（sentinel）</h4><blockquote><p>主从切换技术，即当master宕机后，自动配置新的master ，免去了手动配置，提高高可用性。</p></blockquote><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>后台监控主机是否发生故障，若发生故障则根据投票数自动将从库转化为主库。</p><p>哨兵模式作为一种特殊的模式。哨兵作为一个独立的进程，独立运行。哨兵通过发送命令，等待Redis服务器响应，从而监控多个Redis实例。</p><h5 id="具体作用："><a href="#具体作用：" class="headerlink" title="具体作用："></a>具体作用：</h5><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅的模式通知其他的从服务器，修改配置文件，让他们切换主机。</li></ul><h5 id="哨兵："><a href="#哨兵：" class="headerlink" title="哨兵："></a>哨兵：</h5><blockquote><p>sentinel.conf</p><p><code>sentinel monitor [name] [host][port] 1</code> : 1表示设置投票机制。</p><p>通过 redis-sentinel [config] 启动哨兵（master转移需要一定时间—心跳包）</p></blockquote><p>单个哨兵进程对Redis服务器监控可能会发生一些问题，这时可以设置多个哨兵进行监控，各个哨兵之间同样会进行监控，形成多哨兵模式。（简单说就是怕哨兵坏了）</p><h5 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h5><p>多个哨兵监视各个主机、从机。当某个哨兵认为该主服务器发生宕机时，即<strong>主观下线</strong>时，并不会马上进行failover过程，而是需要其他哨兵对该主服务器进行判断，当认定它宕机的数量达到一定值时，才认定它已宕机。此时各个哨兵将进行一次投票，投票最终结果决定新的主服务器，由一个哨兵发起该结果并进行failover<strong>故障转移</strong>操作（从机—&gt;主机），成功后，通过发布订阅模式，让各个哨兵将各自监控的从服务器实现切换主机，即<strong>客观下线</strong>。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>基于主从配置，有它所有的优点</li><li>主从可切换，故障可转移，高可用</li><li>手动到自动，更加健壮</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li><p>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</p></li><li><p>实现哨兵模式（哨兵集群）的配置十分麻烦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">&quot;26379.log&quot;</span></span><br><span class="line">dir <span class="string">&quot;./&quot;</span></span><br><span class="line">sentinel monitor mymaster 192.168.250.132 7000 2 <span class="comment">#必要</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment">#默认转移时间</span></span><br><span class="line">sentinel failover-timeout mymaster 15000</span><br><span class="line">sentinel auth-pass mymaster 123</span><br><span class="line"><span class="built_in">bind</span> 192.168.250.132 127.0.0.1</span><br></pre></td></tr></table></figure></li></ul><h4 id="Redis-缓存穿透、击穿和缓存雪崩"><a href="#Redis-缓存穿透、击穿和缓存雪崩" class="headerlink" title="Redis 缓存穿透、击穿和缓存雪崩"></a>Redis 缓存穿透、击穿和缓存雪崩</h4><h6 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h6><p>缓存穿透，是指查询一个数据库一定不存在的数据。正常的使用缓存流程大致是，数据查询先进行缓存查询，如果key不存在或者key已经过期，再对数据库进行查询，并把查询到的对象，放进缓存。如果数据库查询对象为空，则不放进缓存。</p><p>假如有恶意攻击，就可以利用这个漏洞，对数据库造成压力，甚至压垮数据库。即便是采用UUID，也是很容易找到一个不存在的KEY，进行攻击。</p><ul><li>采用缓存空值。如果从数据库查询的对象为空，也放入缓存，只是设定的缓存过期时间较短，比如设置为60秒。</li></ul><h6 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h6><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><ul><li>互斥锁</li><li>设置热点key永不过期</li></ul><h6 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h6><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。</p><p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。</p><h4 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h4><ul><li>计数器</li><li>统计多单位数量：关注数、浏览量等</li><li>对象缓存存储</li><li>消息队列，消息排队  ：list</li><li><p>共同爱好、共同好友 ：set  <code>sdiff/sunion/sinter</code></p></li><li><p>排行榜 ：zset</p></li><li>附近的人：geo</li><li><p>计算在线用户量：hyperloglog</p></li><li><p>记录打卡信息。。：bitmaps</p></li><li><p>实时聊天，聊天室、订阅、关注：订阅、发布</p></li></ul><h4 id="Redis-在-Java-中的应用"><a href="#Redis-在-Java-中的应用" class="headerlink" title="Redis 在 Java 中的应用"></a>Redis 在 Java 中的应用</h4><blockquote><p>Redis 在sprintboot中的使用：</p><p>RedisTemplate —&gt; lettuce/jedis —&gt; redis</p><p>java中操作redis可通过redis启动包下的两层分装(redisTemplate / lettuce/jedis)来实现。</p></blockquote><p>配置步骤：</p><ol><li><p>导入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xxxxxx</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li></ol><ol><li>注入使用即可 ：<code>redisTemplate</code></li></ol><h5 id="分布式锁解决方案"><a href="#分布式锁解决方案" class="headerlink" title="分布式锁解决方案"></a>分布式锁解决方案</h5><h6 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h6><p>基于redis指令中的<code>set nx [ex]</code> 原子性操作实现分布式锁设置。</p><blockquote><p>JUC/synchronized 仅能锁住本地资源，无法作为分布式锁使用。</p></blockquote><p>具体可通过设置一个<code>lock</code>键来判定当前分布式锁的锁定情况，即当前应用业务实现执行时首先检查当前redis中<code>lock</code>键值判断是否可以获得锁，再当前业务完成后删除<code>lock</code>键实现分布式锁的上锁、解锁操作。但这里需要考虑一下几点情况，同时给出对应解决方案：</p><ol><li><p>一个应用在获得锁后业务出现了异常导致没有运行删锁代码。此时其他应用还在等待解锁，所有应用陷入死锁状态。</p><blockquote><p>为<code>lock</code>键设置过期时间，过期时间的设置必须和设置锁同时进行，两者作为一个原子性操作避免加锁/删锁出现异常。</p></blockquote></li><li><p>设置的过期时间问题：过期时间的设置无法确定！一旦过期时间设置的比业务代码的执行时间短，其他应用就会提前获得锁并对数据库进行请求，这还是其次，问题是一旦其他应用获得锁，那么在当前应用业务执行完成后删除锁的操作就可能导致直接删除了其他应用的锁，</p><blockquote><p>在每一个应用获取锁的时候都设置对应的uuid以区分不同应用下的分布式锁。官方推荐使用 lua 脚本(redisScript)解锁</p></blockquote></li></ol><h6 id="推荐-方案二"><a href="#推荐-方案二" class="headerlink" title="*推荐:方案二"></a>*推荐:方案二</h6><p>redisson 分布式锁框架使用：</p><blockquote><p>基于本地JUC，操作类似同有读写锁，可重入锁等</p><p>底层实现使用 lua 脚本，进行原子性操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock.lock() &#x2F;&#x2F;该方法使用定时任务，默认设置一个看门狗时间</span><br><span class="line"></span><br><span class="line">lock.lock(10,TimeUnit.SECONDS) &#x2F;&#x2F;不开启定时任务</span><br></pre></td></tr></table></figure><p>lock 基于方案一的实现基础同样在redis里设置了一个<code>lock</code>键。该键设置有过期时间，在获取锁后过期时间通过一个定期任务（renewExpiration）不断更新过期时间（更新时间为 1/3 的看门狗时间(30s)）。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/759814-20181126113038352-583246905.png" alt="img"></p></blockquote><ol><li><p>导依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis 锁框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. Create config object</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://114.215.200.131:6379&quot;</span>);</span><br><span class="line">        RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>lock()</strong>  : 阻塞式锁</p><p><strong>tryLock() :</strong> 存在一个等待时间</p><p><strong>fairLock</strong> :  公平锁，请求会在队列中排队，优先分给先请求的锁。默认锁为非公平锁</p><p><strong>ReadWriteLock :</strong>  读写锁。改数据加写锁，读数据加读锁。数据修改期间排斥其他锁读取或更新（排它锁）。数据读取期间无法修改但可以读。。（[读]共享锁）</p><p><strong>semaphore :</strong>  信号量：获取(-)/释放(+) ；可以做限流(tryAcquire)</p><p><strong>CountDownLatch</strong> :  闭锁：实现计数等待，当达到设定值后才解锁</p><h4 id="缓存数据一致性问题"><a href="#缓存数据一致性问题" class="headerlink" title="缓存数据一致性问题"></a>缓存数据一致性问题</h4><blockquote><p>其实是满足<strong>最终</strong>一致性的（因为有过期时间）</p><p>读写少的情况可以考虑加读写锁即可。</p></blockquote><h4 id="双写模式"><a href="#双写模式" class="headerlink" title="双写模式"></a>双写模式</h4><p>数据读取修改的时候都更新redis缓存。</p><blockquote><p>存在脏数据产生的风险。根本原因在于更新redis缓存的过程先后顺序不定（数据库写与缓存写之间的这一段时间所容忍的最大延迟时间）。可以考虑加锁解决这个问题。</p></blockquote><h4 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h4><p>数据修改的时候直接删除redis中对应的缓存</p><blockquote><p>同样是可能产生脏数据</p></blockquote><p><strong>完美解决方案——Canal</strong></p><p><strong>唯一缺点就是又加了一个中间件影响应用整体效率。</strong></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20210224162533145.png" alt="image-20210224162533145"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多路查找平衡树</title>
      <link href="2020/11/10/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>2020/11/10/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文中图片及相关信息大都摘自大佬博客<a href="https://blog.csdn.net/ywl470812087/article/details/102530044">https://blog.csdn.net/ywl470812087/article/details/102530044</a></p></blockquote><h1 id="多路查找平衡树"><a href="#多路查找平衡树" class="headerlink" title="多路查找平衡树"></a>多路查找平衡树</h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>多路：多条子树。查找：左子树&lt;节点&lt;右子树。平衡：树高相差不大，不成链。</p><p>其实它本质是由二叉查找树转化而来的。</p><p>官方：</p><ul><li><p>多路查找树</p></li><li><p>每个结点孩子个数可以 &gt; 2；</p></li><li>每个结点可以存储多个数据元素；</li></ul><h2 id="二、B-Tree-和B-Tree"><a href="#二、B-Tree-和B-Tree" class="headerlink" title="二、B-Tree 和B+Tree"></a>二、B-Tree 和B+Tree</h2><p>他们都属于多路查找平衡树，数据库中的索引存储方式是B+树。</p><p>这里阐述下两者的区别：</p><h3 id="B-Tree-B树"><a href="#B-Tree-B树" class="headerlink" title="B-Tree(B树)"></a>B-Tree(B树)</h3><blockquote><p>讲到B树的时候，我们需要给他定义一个阶数。实际应用过程中使用的2-3树其实就是B树阶数为3时候的实例。</p></blockquote><ul><li>树高一致，即每个节点的子树高度都相等。</li><li>节点数据个数限定。对于任意m阶的B-Tree，它的根节点的数据个数在[1,m-1]这个范围内，非根节点范围在[(m-1)/2,m-1]这个范围内。</li><li>节点内的数据是有序的。</li></ul><p>树在插入、删除过程中的分裂，结合情况描述：</p><p><strong>以5阶B树为例：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTAxMjA4ZWNiNDI2MzljZDkucG5n?x-oss-process=image/format,png" alt="img"></p><p><strong>分裂：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LWQxYTk0MjQyYmNiNGQ2NmQucG5n?x-oss-process=image/format,png" alt="img"></p><p><strong>接着插入23，25，39</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LWZlOGQ5ZmUzZjNkNmU4N2YucG5n?x-oss-process=image/format,png" alt="img"></p><p><strong>分裂，得到下面的。</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LWFkYWVlYjJkZGJlN2Q5M2QucG5n?x-oss-process=image/format,png" alt="img"></p><p><strong>删除操作：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTk2NWNlNzY5MWE3NmExOWUucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>删除15，这种情况是删除叶子节点的元素，如果删除之后，节点数还是大于<code>m/2</code>，这种情况只要直接删除即可。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LWVhZDM2MTAyOWQwNzBkNTkucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>接着，我们把22删除，这种情况的规则：22是非叶子节点，<strong>对于非叶子节点的删除，我们需要用后继key（元素）覆盖要删除的key，然后在后继key所在的子支中删除该后继key</strong>。对于删除22，需要将后继元素24移到被删除的22所在的节点。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LWViODliMmM0MzcwYzQyMDQucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTk0NDc5YmMwOTliMTMyN2YucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTAwYzMyN2UwZDY3M2E4ZWMucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTk1ZDJkY2M5OTUyZjg1YjkucG5n?x-oss-process=image/format,png" alt="img"></p><p>​    接着删除28，<strong>删除叶子节点</strong>，删除后不满足要求，所以，我们需要考虑向兄弟节点借元素，但是，兄弟节点也没有多的节点（2个），借不了，怎么办呢？如果遇到这种情况，<strong>首先，还是将先将父节点的元素移到该节点，然后，将当前节点及它的兄弟节点中的key合并，形成一个新的节点</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTk0NTk4NjRkYWM3ZDMwY2QucG5n?x-oss-process=image/format,png" alt="img"></p><p>移动之后，跟兄弟节点合并。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTdhZWM5MGM3ZDE2ZTg2OWMucG5n?x-oss-process=image/format,png" alt="img"></p><p>删除就只有上面的几种情况，根据不同的情况进行删除即可。</p><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h3><blockquote><p>B树变种，相对增加了一些扩展，通过增大节点存储数据的量，减少IO读取次数，这也使他更适合磁盘查询。</p></blockquote><p>扩展的点：</p><ul><li><p>真实数据只存储叶子节点上，非叶子节点存储后继节点（右孩子）索引。</p></li><li><p>叶子节点之间存在链表结构，方便依次查询。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTU0MDE1ODIzMGY3NmY5Y2MucG5n?x-oss-process=image/format,png" alt="img"></p></li></ul><p><strong>插入操作</strong></p><p>对于插入操作很简单，只需要记住一个技巧即可：<strong>当节点元素数量大于m-1的时候，按中间元素分裂成左右两部分，中间元素分裂到父节点当做索引存储，但是，本身中间元素还是分裂右边这一部分的</strong>。</p><p>下面以一颗5阶B+树的插入过程为例，5阶B+树的节点最少2个元素，最多4个元素。</p><ul><li>插入5，10，15，20</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LWQzODJhZjVhZGFlNjRjOWEucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>插入25，此时元素数量大于4个了，分裂</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTBmZGY2NzUzNGIzOThiMTQucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>接着插入26，30，继续分裂</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTVjMzM1ZjM4NmQwZDc1MTgucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTBmNzQ3MjdlMDhmNWE0NWQucG5n?x-oss-process=image/format,png" alt="img"></p><p><strong>删除操作</strong></p><p>对于删除操作是比B树简单一些的，因为<strong>叶子节点有指针的存在，向兄弟节点借元素时，不需要通过父节点了，而是可以直接通过兄弟节移动即可（前提是兄弟节点的元素大于m/2），然后更新父节点的索引；如果兄弟节点的元素不大于m/2（兄弟节点也没有多余的元素），则将当前节点和兄弟节点合并，并且删除父节点中的key</strong>，下面我们看看具体的实例。</p><ul><li>初始状态</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LThiMWMyYTk5NWI4ZGE2YjkucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>删除10，删除后，不满足要求，发现左边兄弟节点有多余的元素，所以去借元素，最后，修改父节点索引</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTMzNjM1NDFiMWM2YTA3NjUucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>删除元素5，发现不满足要求，并且发现左右兄弟节点都没有多余的元素，所以，可以选择和兄弟节点合并，最后修改父节点索引</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTRlYTVjMTc4YTM0MzU1MTgucG5n?x-oss-process=image/format,png" alt="img"></p><ul><li>发现父节点索引也不满足条件，所以，需要做跟上面一步一样的操作</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81ODI0MDE2LTA5MTEwM2NlZmNlOTJkNGUucG5n?x-oss-process=image/format,png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B+树 </tag>
            
            <tag> B-树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="2020/11/10/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>2020/11/10/%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><blockquote><p>几个月前看过的线段树，当时没怎么理解,如今再看一遍竟然发现当时卡在了这么简单的地方。于是趁这段时间，把这类题型整理一下，加深记忆。</p><p>文中参照大佬博客:<a href="https://blog.csdn.net/zearot/article/details/48299459">https://blog.csdn.net/zearot/article/details/48299459</a></p></blockquote><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p><strong>线段树：</strong>线段树顾名思义就是用来描述一群由线段组成的树，而线段往往以区间形式表示。在实际应用过程中，为了更加减少复杂度，我们多采用二叉树的形式。</p><h3 id="二、具体应用以及思考"><a href="#二、具体应用以及思考" class="headerlink" title="二、具体应用以及思考"></a>二、具体应用以及思考</h3><p>从一棵我们熟知的二叉搜索树开始，我们就能体会到这种数据结构的作用。</p><p>即假设题目给我们一个未经过排序的数组，然后让我们去查询这个数组中的最大值，那么显然我们最多需要n次遍历才能找到我们想要的结果。可是如果题目给了我们一个二叉搜索树又会怎么样呢？我们只需要最多 log n 次遍历就可以得到答案了。当然，在一般的情形中，我们是不需要将数组转化为特点的数据结构的，因为转化的过程本身存在一定的时间开销。那么问题来了，什么情况下我们认为应该使用数据结构了呢？</p><p>还是上面那个问题，查询数组中的最大值，不过这次题目要求我们多次查找特定区间范围内的最大值。这时我们应该注意到题目由原来的一次查询变为了多次查询。若我们还是按照原来的O(n)时间复杂度的方法去做显然不是最优的方式，这里我们就应该想到要将这个数组转化为某种数据结构，这时转化的耗时往往低于我们多次查询的耗时，所以是必然更优的。</p><p>这里考虑用某种数据结构，想一下是不是可以用二叉搜索树？因为我们要找的是区间，而二叉搜索树各节点存储值，它的特点是存在显著的大小关系，便于查找第k大数，所以这里不可以采用这种结构。 其实看到区间时我们就应该先考虑线段树了，正如定义里说的，线段树正是采用的区间表示的节点。</p><h3 id="三、使用前提"><a href="#三、使用前提" class="headerlink" title="三、使用前提"></a>三、使用前提</h3><p>到这里我想我们应该以及明白我们为何使用线段树这种数据结构了。线段树本质其实就是空间换时间的思想，这在许多数据结构中都有体现。</p><p>前面说到我们用二叉树来构建线段树，而节点又表示的是区间，那最终各个节点肯定是由原来区间不断二分得到的。</p><p>一下是网上随便找的图以供参考。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1605004852548&amp;di=d2caa649dc9793f0a36d28262beddcf8&amp;imgtype=0&amp;src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F626bf211a7b17d31faf8d22115469ced7908acf4.png" alt="点击查看源网页"></p><p>了解了这些后，我们可以想一想这些节点中我们可以存储哪些信息？</p><p>如之前那个例子，我们要多次查询区间最大值。我们应该把数组中的哪些信息放入，同时应遵守哪些规则？</p><p>我们要找的是区间最大值，这里又有这么多区间，要是我们在每个节点都存储当前区间下的最大值，那我们在每次查询的时候是不是就方便的多了。我们可以通过递归遍历到叶子节点，在叶子节点加上对应索引下的数组的值，对非叶子节点的值取左右节点值的最大值，按这个方式从上到下（到叶子节点），再从下到上遍历一遍（更新），是不是最终每个节点存储的都是区间最大值了。如果你明白了这一点，那么可以思考一下上述过程中的关键处在哪里，是不是很容易就可以发现<strong>”非叶子节点的值取左右节点值的最大值“</strong>这句话才使得我们能从下往上推得答案。而这也就是这里所要说的线段树的使用前提。</p><ul><li><strong>满足区间加法</strong></li></ul><p>除上面这个例子外还有其他满足区间加法的例子：gcd(最大公约数)、求和。</p><h3 id="四、算法递推实现"><a href="#四、算法递推实现" class="headerlink" title="四、算法递推实现"></a>四、算法递推实现</h3><p>线段树根据不同的应用场景会有不同的写法，这里以最常见(最容易理解)的写法为例。</p><p>这里还是以求取区间最大值为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> MAX[maxn*<span class="number">4</span>],A[maxn];<span class="comment">//节点个数介于2*maxn——4*maxn之间</span></span><br><span class="line"><span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自下往上更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    MAX[rt] = max(MAX[rt&lt;&lt;<span class="number">1</span>],MAX[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        SUM[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断当前查找区间是否在[L,R]区间内</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        <span class="keyword">return</span> MAX[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max1=<span class="number">0</span>,max2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)&#123;</span><br><span class="line">        max1 = query(L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)&#123;</span><br><span class="line">        max2 = query(L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(max1,max2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过线段树方法，我们发现只有 n logn 就解出了这道题目！</p><p>现在我们不妨再想一个问题，如何维护线段树，即我们是否可以对这个线段树做些修改。</p><p>而这种修改在线段树中被叫做更新操作：</p><ul><li><strong>点更新</strong></li><li><strong>区间更新</strong></li></ul><p>点更新其实很容易理解，因为他跟查询线段树的方式类似，只是我们在查询当节点时顺便再更新它的值，然后自下往上更新父节点值即可。</p><p>这里给一道杭电的题方便理解：<a href="http://acm.hdu.edu.cn/status.php">Realtime Judge Status</a></p><h2 id="I-Hate-It"><a href="#I-Hate-It" class="headerlink" title="I Hate It"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754">I Hate It</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Problem Description</span><br><span class="line">很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。</span><br><span class="line">这让很多学生很反感。</span><br><span class="line"></span><br><span class="line">不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line">本题目包含多组测试，请处理到文件结束。</span><br><span class="line">在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;&#x3D;200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。</span><br><span class="line">学生ID编号分别从1编到N。</span><br><span class="line">第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。</span><br><span class="line">接下来有M行。每一行有一个字符 C (只取&#39;Q&#39;或&#39;U&#39;) ，和两个正整数A，B。</span><br><span class="line">当C为&#39;Q&#39;的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。</span><br><span class="line">当C为&#39;U&#39;的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">对于每一次询问操作，在一行里面输出最高成绩。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">5 6</span><br><span class="line">1 2 3 4 5</span><br><span class="line">Q 1 5</span><br><span class="line">U 3 6</span><br><span class="line">Q 3 4</span><br><span class="line">Q 4 5</span><br><span class="line">U 2 9</span><br><span class="line">Q 1 5</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">9</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里sum看成max即可</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn*<span class="number">4</span>], A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    sum[rt] = max(sum[rt*<span class="number">2</span>] , sum[rt*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == l) &#123;</span><br><span class="line">        sum[rt] = c;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> Update(L, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans = Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans = max(ans,Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, A + i);</span><br><span class="line">        Build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Query(a, b, <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Update(a, b, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区间更新相对就要复杂很多。如果我们以点更新的方式去处理区间更新显然是很费时的，这里必须要有一种十分巧妙的方法解决这个难题——<strong>lazy标记</strong>。虽然思想十分巧妙，但掌握起来却并不困难。</p><p>lazy标记，顾名思义就是懒惰标记。之所以叫他懒惰标记，是因为它并不是立刻更新的，这也是这种思路的巧妙之处。粗浅的理解就是它只有在更新以及查询的<strong>途中</strong>会被触发，对那些未遍历到的节点是不会进行更新操作的，这也将大大提高算法效率，虽然一部分节点的值暂时是错误的，但不妨碍最终的正确结果。</p><p>同样来一道杭电的题目</p><h2 id="A-Simple-Problem-with-Integers"><a href="#A-Simple-Problem-with-Integers" class="headerlink" title="A Simple Problem with Integers"></a>A Simple Problem with Integers</h2><p> <a href="https://vjudge.net/problem/POJ-3468/origin">POJ - 3468 </a></p><p>Description</p><p>You have <em>N</em> integers, <em>A</em>1, <em>A</em>2, … , <em>AN</em>. You need to deal with two kinds of operations. One type of operation is to add some given number to each number in a given interval. The other is to ask for the sum of numbers in a given interval.</p><p>Input</p><p>The first line contains two numbers <em>N</em> and <em>Q</em>. 1 ≤ <em>N</em>,<em>Q</em> ≤ 100000.<br>The second line contains <em>N</em> numbers, the initial values of <em>A</em>1, <em>A</em>2, … , <em>AN</em>. -1000000000 ≤ <em>Ai</em> ≤ 1000000000.<br>Each of the next <em>Q</em> lines represents an operation.<br>“C <em>a</em> <em>b</em> <em>c</em>“ means adding <em>c</em> to each of <em>Aa</em>, <em>Aa</em>+1, … , <em>Ab</em>. -10000 ≤ <em>c</em> ≤ 10000.<br>“Q <em>a</em> <em>b</em>“ means querying the sum of <em>Aa</em>, <em>Aa</em>+1, … , <em>Ab</em>.</p><p>Output</p><p>You need to answer all <em>Q</em> commands in order. One answer in a line.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">Q 4 4</span><br><span class="line">Q 1 10</span><br><span class="line">Q 2 4</span><br><span class="line">C 3 6 3</span><br><span class="line">Q 2 4</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">55</span><br><span class="line">9</span><br><span class="line">15</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">LL sum[maxn*<span class="number">4</span>],lazy[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> A[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新或查询时触发</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r ,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        sum[rt*<span class="number">2</span>] += lazy[rt]*(m-l+<span class="number">1</span>);<span class="comment">//这里是计算左子树区间内元素个数</span></span><br><span class="line">        sum[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt]*(r-m);<span class="comment">//这里是计算右子树区间内元素个数</span></span><br><span class="line">        lazy[rt*<span class="number">2</span>] += lazy[rt];<span class="comment">//子树同样要标记，因为子树也有它的子树！！</span></span><br><span class="line">        lazy[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt];</span><br><span class="line">        lazy[rt] = <span class="number">0</span>; <span class="comment">//既然当前节点已经更新，那没有必要继续保留了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[rt*<span class="number">2</span>] + sum[rt*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        lazy[rt] += c; <span class="comment">//lazy标记上，当下次遇上时更新子树的值</span></span><br><span class="line">        sum[rt]+=(r-l+<span class="number">1</span>)*c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L,R, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m) Update(L,R, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt); <span class="comment">//查询时触发标记</span></span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans += Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans += Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b,d;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, A + i);</span><br><span class="line">        Build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Query(a, b, <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">                Update(a,b,d, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、线段树进阶"><a href="#五、线段树进阶" class="headerlink" title="五、线段树进阶"></a>五、线段树进阶</h4><p>这个进阶是线段树最难得地方了，在不同题目中需要思考许多来对线段树的节点进行扩展，在具体应用中往往都是这类。</p><p>先举几个实例：</p><ul><li>最长连续0</li></ul><p>一个矩形，长宽假如都在[1,100000]这个范围内，然后可以竖着或横着笔直切分这个矩阵n次（切成整数！），n假如说也是[1,100000]这个范围，问最终切分到的最大矩阵面积。</p><p>这里就需要我们的思考，然后将问题转化为最长连续0。即竖着切m次，每次切的点都记为1,没切的记为0，横着切同理。那是不是我们只要知道两边的最长连续0数，就可以得到最大矩形面积了。</p><p>这里需要考虑连续0个数是否满足区间加法，我们发现简单的加法是无法得到：左子树+右子树==》节点 这个过程的，这时我们需要思考节点与它的两个子节点的关系。</p><script type="math/tex; mode=display">L[rt]:左最长0，R[rt]:右最长0，P[rt]:是否全0；1表示全0，0表示非全0\\递推关系式：SUM[rt]=Max(R[rt<<1]+L[rt<<1|1],Max(SUM[rt<<1],SUM[rt<<1|1]));\\L[rt]=P[rt<<1]?L[rt<<1]+L[rt<<1|1]:L[rt<<1];\\R[rt]=P[rt<<1]?R[rt<<1|1]+R[rt<<1]:R[rt<<1];</script><p>有了这些之后其他都与模板类似了。</p><ul><li>基数排序</li></ul><p>就是对字符串(假如全是小写字母)区间多次排序</p><p>采用基数法对每个字符数量进行存储。</p><p>这里需要对节点有新的定义:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">26</span>];<span class="comment">//计数</span></span><br><span class="line"><span class="keyword">int</span> D;<span class="comment">//总数</span></span><br><span class="line"><span class="keyword">bool</span> sorted;<span class="comment">//是否排序</span></span><br><span class="line"><span class="keyword">bool</span> Inc;<span class="comment">//是否升序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是扫描线了，这部分以后更新。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架项目建立</title>
      <link href="2020/11/07/Spring/SSM%E9%A1%B9%E7%9B%AE%E5%BB%BA%E7%AB%8B/"/>
      <url>2020/11/07/Spring/SSM%E9%A1%B9%E7%9B%AE%E5%BB%BA%E7%AB%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SSM 中WEB-INF文件下所有资源用户无法直接请求，只能通过 controller/servlet 获得</p></blockquote><h3 id="一、导入依赖"><a href="#一、导入依赖" class="headerlink" title="一、导入依赖"></a>一、导入依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- 单元测试 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1.</span>日志 --&gt;</span><br><span class="line">&lt;!-- 实现slf4j接口并整合 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">2.</span>数据库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.37&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DAO: MyBatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">3.</span>Servlet web --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">4.</span>Spring --&gt;</span><br><span class="line">&lt;!-- (<span class="number">1</span>)Spring核心 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- (<span class="number">2</span>)Spring DAO层 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- (<span class="number">3</span>)Spring web --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- (<span class="number">4</span>)Spring test --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- redis客户端:Jedis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;protostuff-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Map工具类 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="二、静态资源导入"><a href="#二、静态资源导入" class="headerlink" title="二、静态资源导入"></a>二、静态资源导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">                &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="comment">            &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">            &lt;resource&gt;</span></span><br><span class="line"><span class="comment">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">                &lt;includes&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">                &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="comment">            &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">        &lt;/resources&gt;</span></span><br><span class="line"><span class="comment">    &lt;/build&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、连接数据库"><a href="#三、连接数据库" class="headerlink" title="三、连接数据库"></a>三、连接数据库</h3><ul><li>IDEA  DateBase连接</li></ul><p><img src="D:\Blog\source\images\image-20201107104230026.png" alt="image-20201107104230026"></p><h3 id="四、建立包结构"><a href="#四、建立包结构" class="headerlink" title="四、建立包结构"></a>四、建立包结构</h3><p>类似以下即可</p><ul><li><p>dao: 数据访问对象是一个面向对象的数据库接口</p></li><li><p>dto: 数据传输对象（<em>DTO</em>)(Data Transfer Object)</p></li><li>entity/pojo: 实体类</li><li>enums: 枚举对象</li><li>exception: 自定义异常类</li><li>service/repository: 业务层，用来写一些业务，对dao层进行的封装<ul><li>Impl: 业务接口实现类</li></ul></li><li>web/controller/servlet：接受客户端请求，类似中转站的作用</li></ul><p><img src="D:\Blog\source\images\image-20201107104423069.png" alt="image-20201107104423069"></p><h3 id="五、建立resources结构"><a href="#五、建立resources结构" class="headerlink" title="五、建立resources结构"></a>五、建立resources结构</h3><p><img src="D:\Blog\source\images\image-20201107104528611.png" alt="image-20201107104528611"></p><h3 id="六、DAO层"><a href="#六、DAO层" class="headerlink" title="六、DAO层"></a>六、DAO层</h3><ul><li>关联数据库</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><ul><li>Spring层下的Spring-dao.xml文件配置(mybatis配置交给spring去做，mybatis配置只做别名相关的设置)</li></ul><blockquote><p>这里用到的是c3p0连接池，他是全自动化的，可以直接自动设置到对象中</p><p>dbcp:半自动化，需要自己设置到对象</p><p>druid</p><p>hikari</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置整合mybatis过程 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.soecode.lyf.entity&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.soecode.lyf.dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="七、创建实体"><a href="#七、创建实体" class="headerlink" title="七、创建实体"></a>七、创建实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> bookId;<span class="comment">// 图书ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">// 图书名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> number;<span class="comment">// 馆藏数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">long</span> bookId, String name, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookId = bookId;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getBookId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bookId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookId</span><span class="params">(<span class="keyword">long</span> bookId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bookId = bookId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Book [bookId=&quot;</span> + bookId + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, number=&quot;</span> + number + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、dao层实体业务接口"><a href="#八、dao层实体业务接口" class="headerlink" title="八、dao层实体业务接口"></a>八、dao层实体业务接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ID查询单本图书</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">queryById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有图书</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset 查询起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit 查询条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">queryAll</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> <span class="keyword">int</span> offset, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减少馆藏数量</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果影响行数等于&gt;1，表示更新的记录行数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reduceNumber</span><span class="params">(<span class="keyword">long</span> bookId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="九、实现Dao层接口（整合MyBatis后无需实现类，用mapper-xml实现）"><a href="#九、实现Dao层接口（整合MyBatis后无需实现类，用mapper-xml实现）" class="headerlink" title="九、实现Dao层接口（整合MyBatis后无需实现类，用mapper.xml实现）"></a>九、实现Dao层接口（整合MyBatis后无需实现类，用mapper.xml实现）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.soecode.lyf.dao.BookDao&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 目的：为dao接口方法提供sql语句配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Book&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体的sql --&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">book_id,</span><br><span class="line">name,</span><br><span class="line">number</span><br><span class="line">FROM</span><br><span class="line">book</span><br><span class="line">WHERE</span><br><span class="line">book_id = #&#123;bookId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Book&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">book_id,</span><br><span class="line">name,</span><br><span class="line">number</span><br><span class="line">FROM</span><br><span class="line">book</span><br><span class="line">ORDER BY</span><br><span class="line">book_id</span><br><span class="line">LIMIT #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;reduceNumber&quot;</span>&gt;</span></span><br><span class="line">UPDATE book</span><br><span class="line">SET number = number - 1</span><br><span class="line">WHERE</span><br><span class="line">book_id = #&#123;bookId&#125;</span><br><span class="line">AND number &gt; 0</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十、业务层接口和业务层实现类"><a href="#十、业务层接口和业务层实现类" class="headerlink" title="十、业务层接口和业务层实现类"></a>十、业务层接口和业务层实现类</h3><ul><li>业务层接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务接口：站在&quot;使用者&quot;角度设计接口 三个方面：方法定义粒度，参数，返回类型（return 类型/异常）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询一本图书</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">getById</span><span class="params">(<span class="keyword">long</span> bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有图书</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预约图书</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> studentId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">AppointExecution <span class="title">appoint</span><span class="params">(<span class="keyword">long</span> bookId, <span class="keyword">long</span> studentId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>业务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soecode.lyf.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.dao.AppointmentDao;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.dto.AppointExecution;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.entity.Appointment;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.enums.AppointStateEnum;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.exception.AppointException;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.exception.NoNumberException;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.exception.RepeatAppointException;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.service.BookService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入Service依赖</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AppointmentDao appointmentDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(<span class="keyword">long</span> bookId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bookDao.queryById(bookId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bookDao.queryAll(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用注解控制事务方法的优点： 1.开发团队达成一致约定，明确标注事务方法的编程风格</span></span><br><span class="line"><span class="comment"> * 2.保证事务方法的执行时间尽可能短，不要穿插其他网络操作，RPC/HTTP请求或者剥离到事务方法外部</span></span><br><span class="line"><span class="comment"> * 3.不是所有的方法都需要事务，如只有一条修改操作，只读操作不需要事务控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AppointExecution <span class="title">appoint</span><span class="params">(<span class="keyword">long</span> bookId, <span class="keyword">long</span> studentId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 减库存</span></span><br><span class="line"><span class="keyword">int</span> update = bookDao.reduceNumber(bookId);</span><br><span class="line"><span class="keyword">if</span> (update &lt;= <span class="number">0</span>) &#123;<span class="comment">// 库存不足</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoNumberException(<span class="string">&quot;no number&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 执行预约操作</span></span><br><span class="line"><span class="keyword">int</span> insert = appointmentDao.insertAppointment(bookId, studentId);</span><br><span class="line"><span class="keyword">if</span> (insert &lt;= <span class="number">0</span>) &#123;<span class="comment">// 重复预约</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RepeatAppointException(<span class="string">&quot;repeat appoint&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 预约成功</span></span><br><span class="line">Appointment appointment = appointmentDao.queryByKeyWithBook(bookId, studentId);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AppointExecution(bookId, AppointStateEnum.SUCCESS, appointment);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoNumberException e1) &#123;</span><br><span class="line"><span class="keyword">throw</span> e1;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RepeatAppointException e2) &#123;</span><br><span class="line"><span class="keyword">throw</span> e2;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(e.getMessage(), e);</span><br><span class="line"><span class="comment">// 所有编译期异常转换为运行期异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AppointException(<span class="string">&quot;appoint inner error:&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十一、Spring层面spring-service配置"><a href="#十一、Spring层面spring-service配置" class="headerlink" title="十一、Spring层面spring-service配置"></a>十一、Spring层面spring-service配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.soecode.lyf.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十二、Spring层配置spring-web"><a href="#十二、Spring层配置spring-web" class="headerlink" title="十二、Spring层配置spring-web"></a>十二、Spring层配置spring-web</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简化配置： </span></span><br><span class="line"><span class="comment">(1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter </span></span><br><span class="line"><span class="comment">(2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.静态资源默认servlet配置</span></span><br><span class="line"><span class="comment">(1)加入对静态资源的处理：js,gif,png</span></span><br><span class="line"><span class="comment">(2)允许使用&quot;/&quot;做整体映射</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.soecode.lyf.web&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十三、表示层web-xml配置"><a href="#十三、表示层web-xml配置" class="headerlink" title="十三、表示层web.xml配置"></a>十三、表示层web.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span> <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置springMVC需要加载的配置文件</span></span><br><span class="line"><span class="comment">spring-dao.xml,spring-service.xml,spring-web.xml</span></span><br><span class="line"><span class="comment">Mybatis - &gt; spring -&gt; springmvc</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认匹配所有的请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--中文乱码过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--session--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十五、SSM整合完成，可以开始写controller了！！！"><a href="#十五、SSM整合完成，可以开始写controller了！！！" class="headerlink" title="十五、SSM整合完成，可以开始写controller了！！！"></a>十五、SSM整合完成，可以开始写controller了！！！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soecode.lyf.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.dao.AppointmentDao;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.entity.Appointment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.dto.AppointExecution;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.enums.AppointStateEnum;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.exception.NoNumberException;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.exception.RepeatAppointException;</span><br><span class="line"><span class="keyword">import</span> com.soecode.lyf.service.BookService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span> <span class="comment">// url:/模块/资源/&#123;id&#125;/细分 /seckill/list</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">List&lt;Book&gt; list = bookService.getList();</span><br><span class="line">model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line"><span class="comment">// list.jsp + model = ModelAndView</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;<span class="comment">// WEB-INF/jsp/&quot;list&quot;.jsp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/detail&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">detail</span><span class="params">(<span class="meta">@RequestParam(&quot;bookId&quot;)</span> Long bookId, Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bookId == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/book/list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Book book = bookService.getById(bookId);</span><br><span class="line"><span class="keyword">if</span> (book == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/book/list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">&quot;book&quot;</span>, book);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax json</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/appoint&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Result&lt;AppointExecution&gt; <span class="title">appoint</span><span class="params">(<span class="meta">@RequestParam(&quot;bookId&quot;)</span> Long bookId, <span class="meta">@RequestParam(&quot;studentId&quot;)</span> Long studentId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (studentId == <span class="keyword">null</span> || studentId.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, <span class="string">&quot;学号不能为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">AppointExecution execution = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">execution = bookService.appoint(bookId, studentId);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoNumberException e1) &#123;</span><br><span class="line">execution = <span class="keyword">new</span> AppointExecution(bookId, AppointStateEnum.NO_NUMBER);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RepeatAppointException e2) &#123;</span><br><span class="line">execution = <span class="keyword">new</span> AppointExecution(bookId, AppointStateEnum.REPEAT_APPOINT);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">execution = <span class="keyword">new</span> AppointExecution(bookId, AppointStateEnum.INNER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">AppointmentDao appointmentDao=<span class="keyword">null</span>;</span><br><span class="line">appointmentDao.insertAppointment(bookId, studentId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result&lt;AppointExecution&gt;(<span class="keyword">true</span>, execution);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>术语解释</title>
      <link href="2020/11/05/%E5%85%B6%E4%BB%96/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
      <url>2020/11/05/%E5%85%B6%E4%BB%96/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="关注点分离原则（Separation-of-concerns，SOC"><a href="#关注点分离原则（Separation-of-concerns，SOC" class="headerlink" title="关注点分离原则（Separation of concerns，SOC)"></a>关注点分离原则（Separation of concerns，SOC)</h3><ol><li>好的架构设计必须把变化点错落有致地封装到软件系统的不同部分。要做到这一点，必须进行关注点分离。</li><li>好的架构必须使每个关注点相互分离，也就是说系统中的一个部分发生了变化，不会影响其他部分。</li><li>即使需要改变，也能够清晰地识别出那些部分需要改变。</li><li>如果需要扩展架构，影响将会最小化，已经可以工作的每个部分都将继续工作。</li></ol><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><blockquote><p>用于解决分布式不同服务器之间的沟通交流问题</p></blockquote><h4 id="一致性：Consistency"><a href="#一致性：Consistency" class="headerlink" title="一致性：Consistency"></a>一致性：Consistency</h4><p>在分布式系统完成某写操作后任何读操作，都应该获取到该写操作写入的那个最新的值。相当于要求分布式系统中的各节点时时刻刻保持数据的一致性。</p><h4 id="可用性：Available"><a href="#可用性：Available" class="headerlink" title="可用性：Available"></a>可用性：Available</h4><p>一直可以正常的做读写操作。简单而言就是客户端一直可以正常访问并得到系统的正常响应。用户角度来看就是不会出现系统操作失败或者访问超时等问题。</p><h4 id="分区容错性：partion-tolerance"><a href="#分区容错性：partion-tolerance" class="headerlink" title="分区容错性：partion tolerance"></a>分区容错性：partion tolerance</h4><p>指的分布式系统中的某个节点或者网络分区出现了故障的时候，整个系统仍然能对外提供满足一致性和可用性的服务。</p><h4 id="实际应用中的选择"><a href="#实际应用中的选择" class="headerlink" title="实际应用中的选择"></a>实际应用中的选择</h4><ul><li><p>CA: 优先保证一致性和可用性，放弃分区容错。 这也意味着放弃系统的扩展性，系统不再是分布式的，有违设计的初衷。</p></li><li><p>CP: 优先保证一致性和分区容错性，放弃可用性。在数据一致性要求比较高的场合(譬如:zookeeper,Hbase) 是比较常见的做法，一旦发生网络故障或者消息丢失，就会牺牲用户体验，等恢复之后用户才逐渐能访问。</p></li><li><p>AP: 优先保证可用性和分区容错性，放弃一致性。NoSQL中的Cassandra 就是这种架构。跟CP一样，放弃一致性不是说一致性就不保证了，而是逐渐的变得一致。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 名词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL底层了解</title>
      <link href="2020/11/04/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%BA%95%E5%B1%82%E4%BA%86%E8%A7%A3/"/>
      <url>2020/11/04/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%BA%95%E5%B1%82%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习参考博客：<a href="http://miwifi.com/diagnosis/index.html">http://miwifi.com/diagnosis/index.html</a></p></blockquote><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201115225902734.png" alt="image-20201115225902734"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201125134114328.png" alt="image-20201125134114328"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词拆分</title>
      <link href="2020/11/01/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
      <url>2020/11/01/%E7%AE%97%E6%B3%95/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h4 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a><a href="https://leetcode-cn.com/problems/word-break/">139. 单词拆分</a></h4><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词的列表 <em>wordDict</em>，判定 <em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p><strong>说明：</strong></p><ul><li>拆分时可以重复使用字典中的单词。</li><li>你可以假设字典中没有重复的单词。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</span><br><span class="line">     注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><ul><li><p>思路</p><p>​    因为说明中告诉我们可以重复使用字典中的单词，所以我们只需要关注字符串s的状态即可。</p><p>​    可以通过DP一维数组<strong><em>维护前i串</em></strong>是否恰好可以被分成字典中出现的单词。</p><script type="math/tex; mode=display">dp[i]=dp[i-len] \&\& (suffer[i-len+1][i]==wordDict[j])</script><p>​    suffer数组记录前缀字符串，可以直接打表实现。</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">bool</span> dp[<span class="number">201</span>];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=wordDict.size();</span><br><span class="line">        <span class="built_in">string</span> ss[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line">        <span class="comment">//记录各个区间下的字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> q = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.size();j++)&#123;</span><br><span class="line">                q += s[j];</span><br><span class="line">                ss[i][j] = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> len = wordDict[j].size();</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=len<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ss[i-len+<span class="number">1</span>][i]==wordDict[j])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(i-len&lt;<span class="number">0</span>) dp[i] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span> dp[i] = dp[i-len];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i]) <span class="keyword">break</span>;<span class="comment">//当前成立时直接退出即可。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.size()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a><strong>进阶：</strong></h4><h4 id="140-单词拆分-II"><a href="#140-单词拆分-II" class="headerlink" title="140. 单词拆分 II"></a><a href="https://leetcode-cn.com/problems/word-break-ii/">140. 单词拆分 II</a></h4><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</p><p><strong>说明：</strong></p><ul><li>分隔时可以重复使用字典中的单词。</li><li>你可以假设字典中没有重复的单词。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;catsanddog&quot;</span><br><span class="line">wordDict &#x3D; [&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;cats and dog&quot;,</span><br><span class="line">  &quot;cat sand dog&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;pineapplepenapple&quot;</span><br><span class="line">wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;pine apple pen apple&quot;,</span><br><span class="line">  &quot;pineapple pen apple&quot;,</span><br><span class="line">  &quot;pine applepen apple&quot;</span><br><span class="line">]</span><br><span class="line">解释: 注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><ul><li><p>思路</p><p>​    思路与第一题差不多，但这里我们需要记录所有的可能情况，那可以确定需要使用回溯法解决。</p><p>​    这里利用DFS从后往前依次查找前缀字符串，并记录即可。</p><p>​    其中前缀字符串与字典中的word匹配可用集合优化。</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">bool</span> dp[<span class="number">201</span>];</span><br><span class="line">    <span class="built_in">string</span> ss[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; word;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=wordDict.size();</span><br><span class="line">        <span class="comment">//记录各个区间下的字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> q = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.size();j++)&#123;</span><br><span class="line">                q += s[j];</span><br><span class="line">                ss[i][j] = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            word.insert(wordDict[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> len = wordDict[j].size();</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=len<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ss[i-len+<span class="number">1</span>][i]==wordDict[j])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(i-len&lt;<span class="number">0</span>) dp[i] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span> dp[i] = dp[i-len];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i]) <span class="keyword">break</span>;<span class="comment">//当前成立时直接退出即可。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[s.size()<span class="number">-1</span>])&#123;</span><br><span class="line">            dfs(s.size()<span class="number">-1</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="built_in">string</span> ans)</span></span>&#123;<span class="comment">//x为当前位置，ans记录匹配符合的字符串</span></span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            v.push_back(ans);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(word.count(ss[i][x]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans==<span class="string">&quot;&quot;</span>) dfs(i<span class="number">-1</span>,ss[i][x]);</span><br><span class="line">                <span class="keyword">else</span> dfs(i<span class="number">-1</span>,ss[i][x]+<span class="string">&quot; &quot;</span>+ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机</title>
      <link href="2020/10/28/Java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>2020/10/28/Java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Java虚拟机（jvm）"><a href="#深入理解Java虚拟机（jvm）" class="headerlink" title="深入理解Java虚拟机（jvm）"></a>深入理解Java虚拟机（jvm）</h1><blockquote><p>熟悉java的小伙伴一定对java虚拟机不陌生，这里我们再做个简单梳理。</p></blockquote><p>还记得我们为啥要学习java吗？</p><p>java提供给了我们许多优质的特性，包括面向对象，平台无关，内存自动管理等等。</p><p>这里肯定有小伙伴会发出这样的疑问，java是怎么实现这些优质的技术特性的呢？</p><p>这就不得不聊聊java虚拟机啦。直接上图，无比清晰，我们来慢慢梳理一遍这一张图的整个流程。</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/6b7e22d32d80029906a710930595b0a0.png" alt="6b7e22d32d80029906a710930595b0a0"></p><p>java虚拟机其实就是个程序嘛，我们要想运行一个java程序就必须启动jvm，java虚拟机可以处理class字节码文件，这就是为什么我们写完代码要先将它编译成class文件的原因了。</p><p><strong>这么做有什么意义呢？</strong></p><p>一方面保证安全稳定你总不能把什么文件都交给虚拟机完成吧，另外编译成class文件的过程还涉及到了许多额外的优化操作，像是解语法糖，泛型擦除，部分指令重排等。</p><p>ok，到这里我们知道了java文件要编译为class文件。那jvm又是怎么使用class文件的呢？这个过程有些漫长，且听我慢慢道来。</p><p>一开始class文件还只是个文件，jvm先得把class文件加载到内存中吧。怎么加载呢？一般人可能就直接把class读到内存中就完事了，但jvm设计牛逼啊，它不直接加载，而是设置了三个分等级的类加载器(app&lt;ext&lt;rt)，通过调度这些类加载器来实现类的加载。调度规则根据类加载器的调度等级递归调用，什么意思，其实就是在你要加载某个类的时候，jvm启用loadClass方法，先把这个类交给等级最低的app类加载器，看app有没有父类加载器，没有就用它，有就根据父类加载器再调用一遍loadClass方法。我们把这个过程称为双亲委派，怎么样是不是很形象！</p><p>这个过程很简单，但是这么做有什么意义呢？还记得jre目录吗，我们安装java的时候肯定对它并不陌生。是的，他不就是java运行时环境吗，里面放了jvm，还有java核心类库。诶，想到没有，java本身就自带了许多核心的类供我们使用呀，这些类是不是也要被加载，那么问题来了，如果我们自己也写了一个和其中某个核心类相同的全类名，那么jvm在加载该类的过程中就有问题了呀，我们明明想用的是系统类，但加载的却可能是自己写的类。此时如果别人想破坏我们写的程序，岂不是轻而易举就可以实现。。</p><p>而双亲委派模型可以有效的杜绝这种情况的发生。不同的类加载器负责扫描指定的多个不同的目录，所以就算全类名与核心类全类名一致，只要他不在对应类加载器的加载目录上，就轮不到它被加载。</p><p>终于把jvm加载类到java内存空间的过程讲完了。你以为这样就完了么，no，我们要知道现在内存里放着的是什么，如果看过内部源码我们应该能发现loadClass方法。它主要负责使类以双亲委派模型的方式进行加载。加载完后会执行一个defineClass方法，这个方法实现将载入的二进制数据以jvm所设定的格式存储到方法区中。方法区是个啥嘞。。</p><p><strong>来，我们再聊聊jvm的运行时数据区域。</strong></p><ul><li><p>程序计数器</p><p>​    类似于计算机中的PC计数器，它用于存放一条指令的指针。在Java虚拟机中存在一个字节码解释器，他在解释完当前正在执行的字节码时需要把下一条需要解释执行的字节码地址告诉程序，这可以通过调整程序计数器的值来实现。</p><p>​    同时因为Java的多线程是轮流切换的，也就是说在某一个时刻下，执行器只能执行一个线程的指令。这个时候每个线程都应当知道他们下一个切换的线程地址，而这个需要切换到的线程地址就是存储在程序计数器中的。也因此，每个线程都应当拥有一个程序计数器，且他们间彼此独立，为线程所私有。</p></li><li><p>虚拟机栈</p><p>​    在c、c++中，栈主要存储的是一些变量的内存地址，在Java的虚拟机栈中则有些不同。在执行方法时，Java 虚拟机会同步生成一个“栈帧”，同时“栈帧”弹入虚拟机栈中，在方法结束时会再弹出“栈帧”。“栈帧” 内部存储有局部变量表、操作数栈、方法出口等信息。其中局部变量表存储信息主要是一些基本数据类型、引用类型，它的内部存储是以“槽”为单位的，其中64位的double、long类型占据两个“槽”。因为局部变量表内存储的都是编译期变量，所以在编译时 Java 虚拟机便可以完全分配局部变量表，并且确定它的大小。 </p></li><li><p>本地方法栈</p><p>​    本地方法栈基本与虚拟机栈相似。不同主要在于虚拟机栈是为了虚拟机执行 Java 方法服务，本地方法栈是为了虚拟机执行本地方法服务。</p></li><li><p>Java堆</p><p>​    Java 堆中主要存储的当然是对象实例，它是所有线程共享的内存区域。这片内存区域主要由垃圾回收器管理，因此它也被称为“GC堆”。</p><p>​    垃圾回收器：现代垃圾回收器主要是采取的分代设计，即将内存区域分成新生代、老年代、永久代、Eden空间等。从 内存分配的角度来看的话，实际上所有线程共享的 Java 堆可以划分成多个线程私有的缓冲区，这些缓冲区能有效提高对象分配时的效率。</p></li><li><p>方法区</p><p>​    方法区也是被各个线程所共享的。它主要用于存储类的信息以及一些常量、静态变量等。因为存储的都是这些比较稳定的信息，所有垃圾回收器在方法区回收垃圾时往往受到许多的约束。</p><p>​    在JDK6以前，方法区的内存区域是被作为永久代处理的，同时受 Java 堆中的垃圾回收器管辖。但这样的设计其实并不合理，因为永久代是存在一个内存上限的，一旦超出这个上限程序会立刻终止报异常，同时也有关于HotSpot、JRockit 在这方面兼容性的问题。于是在JDK6后方法区的内存区域逐步改为了本地内存。而到JDK8时，已经完全放弃永久代的概念，改用由本地内存来实现的元空间来替代。</p><ul><li><p>运行时常量池</p><p>类加载后，会存储从Class文件常量池来的常量池信息。</p></li><li><p>Class文件常量池</p><p>Class文件加载时生成，存储版本、接口、方法等描述信息以及常量池表。其中常量池表主要存储了符号引用和各种字面量。</p></li></ul></li></ul><p>此时数据都以特定格式存放到方法区中，但是我们知道要想使用该类还远远不够。我们还得进行连接，即将方法区中存放的二进制数据合并到jvm运行时环境中，也就是那些栈，堆。</p><p>连接过程又细分为验证，准备，解析三个阶段。</p><p>这里简单介绍一下吧</p><p>验证: java语言要保证安全稳定，在连接过程中加个验证不过分。这里列举几个验证动作:</p><ol><li><p>文件格式验证</p></li><li><p>元数据验证：这个其实就是我们学习java时候要记住的一些规范。像是子类不能继承final修饰的父类，类是否实现接口所有方法等。</p></li><li><p>字节码验证</p></li><li><p>符号引用验证</p></li></ol><p>准备: 准备阶段开始真正做些事情了。它负责为类变量分配内存，并附上初始值。</p><p>解析: 符号引用转化为直接引用</p><h3 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h3><h4 id="一、Java-内存区域和内存溢出异常"><a href="#一、Java-内存区域和内存溢出异常" class="headerlink" title="一、Java 内存区域和内存溢出异常"></a>一、Java 内存区域和内存溢出异常</h4><p><strong>2. HotSpot虚拟机对象探秘</strong></p><ul><li><p>对象的创建</p><p>​    Java 虚拟机首先发现字节码中的 new 指令，随后检查指令参数是否能在常量池中定位到对应的符号引用，同时检查这个符号引用代表的类是否已经被加载、解析和初始化。若无，则将优先执行对应的类加载过程。</p><ul><li><p>内存分配</p><p>​    在类加载完后，Java 虚拟机才开始给这个对象分配内存，即在 Java 堆上找一块合适的内存分配给对象。这时的分配方法有两种思路：1.如果堆中的实例对象内存分布都是规整的，即分配有对象的内存在一边，空闲的内存在另一边，中间有一个指针作为分界点指示器。当我们要分配内存给对象时，只需要将指针往空闲区移动一定距离即可，这种分配方式称为“指针碰撞”。2.若内存分布并不是规整的，这时只能遍历所有的内存块，将空闲的内存块地址放入一个空闲列表中，然后在通过这个空闲列表将合适的内存块分配给对象，同时更新列表。 这两种分配方式都是由内存分布是否规整决定的，实际上我们都希望使用第一种方法，因为它更加高效，于是我们便发现Serial、ParNew等垃圾收集器都带有压缩整理过程，这时我们便可以放心使用第一种方法了。</p></li><li><p>线程安全</p><p>​    实际的分配过程我们还要考虑多线程情况。Java虚拟机是采用CSA配上失败重试的方式来保证内存分配操作的原子性的。当然我们直接采用同步操作也可以做到线程安全，还有另一种方法是把内存分配的动作按线程划分在不同的空间中进行，可以通过缓冲区实现。</p></li><li><p>对象设置</p><p>​    分配完成后，我们需要存储空间内的对象进行设置。初始化，类、元数据、哈希码等信息。这些信息放在对象头中。对象引用入栈。</p></li></ul></li><li><p>对象的内存布局</p><ul><li><p>对象头</p><p>主要有类、元数据、哈希码、锁状态标志、偏向时间戳等信息，同时他是一个动态定义的数据结构，根据对象状态复用存储空间。还有一部分是类型指针，对象通过该指针确定属于哪个类。</p></li><li><p>实例数据</p><p>对象真正存储的有效信息，包括定义的各种字段内容。</p></li><li><p>对齐填充</p><p>无特殊含义，仅用来将实例数据部分维护在8字节的倍数。（HotSpot 虚拟机要求内存管理系统要求对象起始地址必须是8字节的整数倍）</p></li></ul></li><li><p>对象的访问定位</p><p>创建对象时，我们最后肯定将他的引用调入栈中。对象的访问就是通过Java栈本地变量表中“reference”对象引用来实现的。</p><p>“reference”可能存储两种可能的地址：1. 句柄地址 。2. 对象地址。</p><p>HotSpot主要是通过第二种方法类实现的，同时他也更加的高效。</p></li></ul><p><strong>3. OutOfMemoryError异常</strong></p><ul><li><p>Java 堆溢出</p><p>​    实际应用中最常见的内存溢出异常情况。遇到这一问题首先通过内存映像分析工具对Dump出来的堆转储快照进行分析。判断是出现了内存溢出还是内存泄露。</p><ul><li><p>内存泄露</p><p>​    进一步通过工具查看泄露对象到 GC Roots 的引用链，通过这些关联的引用链信息可以有效找出产生内存泄露的代码的具体位置。</p></li><li><p>内存溢出</p><p>​    此时对象必然存活，可以检查当前的堆参数设置与机器的内存对比，判断是否可以向上调整空间。再从代码上检查一下各个对象的生命周期，存储结构等，尽量减小程序运行期间的内存消耗。</p></li></ul></li><li><p>虚拟机栈和本地方法栈溢出</p><pre><code>- 当线程请求的栈深度大于虚拟机所允许的最大深度时，将抛出 StackOverflowError 异常。- 若虚拟机的栈内存允许动态扩展，当扩展栈容量无法申请到足够内存时，将抛出 OutOfMemory 异常。</code></pre><p>HotSpot虚拟机的栈内存并不允许动态扩展。</p></li><li><p>方法区和运行时常量池溢出</p><p>JDK7以前，字符串常量池被放在方法区中（永久代）；自JDK7起字符串常量池就被放在了 Java 堆中。</p></li><li><p>本机直接内存溢出</p><p>​    直接内存容量默认与最大堆容量一致。内存溢出主要关注点在于NIO方面。</p></li></ul><p><strong>OOM排查：</strong></p><p>我们用<code>jstat -gc pid</code> 命令来看看程序的GC情况。</p><p>需要确定是内存泄漏还是内存溢出，内存溢出只需要提高堆大小就行了。</p><h4 id="二、垃圾收集器与内存分配策略"><a href="#二、垃圾收集器与内存分配策略" class="headerlink" title="二、垃圾收集器与内存分配策略"></a>二、垃圾收集器与内存分配策略</h4><p>标记：可达性分析</p><p>关于<strong>可达性</strong>的对象，便是能与GC Roots构成连通图的对象，如下图：</p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/22f72b18415405c3e0207925a8de74fa_720w.jpg" alt="img"></p><p>Serial收集器<br>　　单线程收集器，收集时会暂停所有工作线程（我们将这件事情称之为Stop The World，下称STW），使用复制收集算法，虚拟机运行在Client模式时的默认新生代收集器。JDK8新生代默认收集器。</p><p>CMS（Concurrent Mark Sweep）收集器<br>　　CMS是一种以最<strong>短停顿</strong>时间为目标的收集器，使用CMS并不能达到GC效率最高（总体GC时间最小），但它能尽可能降低GC时服务的停顿时间，这一点对于实时或者高交互性应用（譬如证券交易）来说至关重要，这类应用对于长时间STW一般是不可容忍的。CMS收集器使用的是标记－清除算法，也就是说它在运行期间会产生空间碎片，所以虚拟机提供了参数开启CMS收集结束后再进行一次内存压缩（标记整理）。<strong>主要应用在老年代。</strong>同时它是与用户线程并行的。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 高级特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5548. 最小体力消耗路径</title>
      <link href="2020/10/25/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E4%BD%93%E5%8A%9B%E6%B6%88%E8%80%97%E8%B7%AF%E5%BE%84/"/>
      <url>2020/10/25/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E4%BD%93%E5%8A%9B%E6%B6%88%E8%80%97%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h4 id="5548-最小体力消耗路径"><a href="#5548-最小体力消耗路径" class="headerlink" title="5548. 最小体力消耗路径"></a><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/">5548. 最小体力消耗路径</a></h4><p>你准备参加一场远足活动。给你一个二维 <code>rows x columns</code> 的地图 <code>heights</code> ，其中 <code>heights[row][col]</code> 表示格子 <code>(row, col)</code> 的高度。一开始你在最左上角的格子 <code>(0, 0)</code> ，且你希望去最右下角的格子 <code>(rows-1, columns-1)</code> （注意下标从 <strong>0</strong> 开始编号）。你每次可以往 <strong>上</strong>，<strong>下</strong>，<strong>左</strong>，<strong>右</strong> 四个方向之一移动，你想要找到耗费 <strong>体力</strong> 最小的一条路径。</p><p>一条路径耗费的 <strong>体力值</strong> 是路径上相邻格子之间 <strong>高度差绝对值</strong> 的 <strong>最大值</strong> 决定的。</p><p>请你返回从左上角走到右下角的最小 <strong>体力消耗值</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/ex1.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：heights &#x3D; [[1,2,2],[3,8,2],[5,3,5]]</span><br><span class="line">输出：2</span><br><span class="line">解释：路径 [1,3,5,3,5] 连续格子的差值绝对值最大为 2 。</span><br><span class="line">这条路径比路径 [1,2,2,2,5] 更优，因为另一条路劲差值最大值为 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/ex2.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：heights &#x3D; [[1,2,3],[3,8,4],[5,3,5]]</span><br><span class="line">输出：1</span><br><span class="line">解释：路径 [1,2,3,4,5] 的相邻格子差值绝对值最大为 1 ，比路径 [1,3,5,3,5] 更优。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/25/ex3.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：heights &#x3D; [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]</span><br><span class="line">输出：0</span><br><span class="line">解释：上图所示路径不需要消耗任何体力。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>rows == heights.length</code></li><li><code>columns == heights[i].length</code></li><li><code>1 &lt;= rows, columns &lt;= 100</code></li><li><code>1 &lt;= heights[i][j] &lt;= 10^6</code></li></ul><ul><li><p>思路</p><p>矩阵长宽最大值为100，不适合使用dfs遍历(一般在&lt;=20时适宜)。所以使用BFS算法遍历整个矩阵。</p><ul><li><p>BFS+DP：不同路径下有不同的最优解，这里需要一个数组dp[i][j]来维护和更新这些最优解。</p></li><li><p>并查集: 可以将每个矩阵上的方格看做一个点，取出所有的边，并对这些边进行从小到大的排序。并查集依次遍历直到所有点都在同一个集合中。</p></li><li>二分：最大值为10^6，我们可以知道最终结果必然在[0,10^6]这个范围之间。利用二分法依次判断绝对值之差小于等于mid的值的所有点是否能作为起点到终点的一条完整路径。</li></ul></li><li><p>代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = heights.size(), col = heights[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">        memset(dp,inf,sizeof(dp));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; queue;</span><br><span class="line">        queue.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!queue.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = queue.front();</span><br><span class="line">            queue.pop();</span><br><span class="line">            <span class="keyword">int</span> x = tmp / col, y = tmp % col;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> dx = x + dirs[i][<span class="number">0</span>], dy = y + dirs[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; row &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; col) &#123;</span><br><span class="line">                    <span class="keyword">int</span> diff = max(dp[x][y], abs(heights[dx][dy] - heights[x][y]));</span><br><span class="line">                    <span class="comment">//dp[x][y]表示起点到(x,y)点符合题意的值。</span></span><br><span class="line">                    <span class="keyword">if</span> (dp[dx][dy] &gt; diff) &#123;<span class="comment">//此时有更优解则更新当前状态的值</span></span><br><span class="line">                        dp[dx][dy] = diff;</span><br><span class="line">                        queue.push(dx * col + dy);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[row-<span class="number">1</span>][col-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2020/10/22/Java/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/10/22/Java/Java%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下内容是我在复习Java后个人理解的内容，其中可能会有不少语言不够严谨的地方甚至错处，还请见谅。</p></blockquote><h1 id="Java基础理解"><a href="#Java基础理解" class="headerlink" title="Java基础理解"></a>Java基础理解</h1><h2 id="一、JAVA运行机制"><a href="#一、JAVA运行机制" class="headerlink" title="一、JAVA运行机制"></a>一、JAVA运行机制</h2><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201031103810073.png" alt="image-20201031103810073"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201119213732966.png" alt="image-20201119213732966"></p><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20140101125755203" alt="img"></p><p>运行时类的加载逻辑：创建类的过程中自动加载类，加载类需要使用类加载器。jvm将要加载的类交给java.lang.classLoader;</p><p>装载过程如下：</p><ol><li>loadClass 方法，实现判断当前类是否已加载，双亲委派</li><li>findClass 方法，classLoader 下无具体实现，分情况考虑：自定义类加载器需配置自己的findClass ，系统默认的findClass 方法交由URLClassLoader 实现</li><li>defineClass 方法，类加载过程的目的是将已编译的字节码文件转化为java Class 类实例，由于java 中没有为 Class 类提供构造方法，所以我们需要将获取到的 Class 文件以二进制字节码形式交给 defineClass 处理实现 Class 类的实例化。</li></ol><p>在Java的历史中，双亲委派模型主要出现过3次被破坏的情况。(重写 loadClass 方法)</p><p>第一次被破坏就是我上面说的，是在JDK1.2之前，那时候还没有出现双亲委派的概念，破坏必然到处存在；</p><p>第二次被破坏是由于模型自身缺陷而导致一些实际问题无法解决，只有打破双亲委派才能很好地解决这些问题，比如在使用JDBC是用到的的 java.sql.Driver 接口（在《JVM类加载机制详解——类加载器》中有详细说明）；</p><p>第三次被破坏是对于程序热部署的需求，比较知名的实现方案如OSGi。</p><h2 id="二、JAVA的三大基本特性"><a href="#二、JAVA的三大基本特性" class="headerlink" title="二、JAVA的三大基本特性"></a>二、JAVA的三大基本特性</h2><ul><li><p>封装</p><p>将客观事物封装成一个类，也可以是将类中的成员变量或方法进行多种级别的保护，可实现信息的隐藏，防止在对象操作过程中的这些变量造成错误的修改。</p></li><li><p>继承</p><p>子类对父类的复写，子类可以使用父类的变量或方法而无需再次编码。</p></li><li><p>多态</p><p>需符合三个条件：1.类继承或者接口实现。2.子类对父类方法进行重写。3.父类接口引用子类对象。</p><p>同一种方法对不同的对象有不同的解释，会产生不同的执行结果。</p></li></ul><h3 id="Java的平台无关性"><a href="#Java的平台无关性" class="headerlink" title="Java的平台无关性"></a>Java的平台无关性</h3><ul><li><p>Class文件</p><p>Class文件在每个平台都可以使用，且它使用的是字节码编码，与JVM一致，可以统一被JVM处理转化为二进制文件。</p></li><li><p>Java的语言规范</p><p>Java数据类型的值域和方法都是固定的，不会因为平台的变化而变化。对应的C++，它的数据类型与占位宽度有关，同样的int类型数据在32位中为2个字节，在64位中可能就变成了4个字节。</p></li><li><p>Java虚拟机（JVM）</p><p>Java的无平台性很大一部分依靠的是JVM，JVM本身是跟平台相关的。因为各个平台的机器指令可能不同，对应的JVM也就不同。所以针对不同的平台会有对应的JVM，它能将与自己存储单元一致，即都为字节码的文件转化为在当前平台可直接使用的二进制文件。它其实就是起到了平台与class文件间的桥梁的作用。</p><p>这里也能看出来其实JVM不止支持Java语言，同时他还支持所有能生成字节码文件的语言。</p></li></ul><h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li><p>定义：在计算机科学中，浮点是一种对于实数的近似值数值表现法，由一个有效数字（即尾数）加上幂数来表示，通常是乘以某个基数的整数次指数得到。以这种表示法表示的数值，称为浮点数（floating-point number）。</p></li><li><p>为什么在涉及金额问题时我们不能考虑使用浮点型？</p><p>因为根据定义我们知道计算机中的浮点型是一种对于实数的近似值数值，按照现实情况我们不应该用一个近似值来表示金额。所有我们只能用Long或BigDecimal来表示金额。</p><p>同时在java中对于double和float类型之间的比较、转化经常会出现精度问题。为了解决这个问题使用BigDecimal是一个不错的选择，同时他还能通过scale设置精度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10.1</span>;</span><br><span class="line"><span class="keyword">float</span> y = <span class="number">10.1f</span>;</span><br><span class="line"><span class="keyword">long</span> l = Double.doubleToLongBits(x);</span><br><span class="line"><span class="keyword">long</span> l1 = Float.floatToIntBits(y);</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">new</span> BigDecimal(Double.toString(x))).compareTo(<span class="keyword">new</span> BigDecimal(Float.toString(y)));</span><br><span class="line">System.out.println(i);<span class="comment">//此时相对，输出为0</span></span><br><span class="line">String bigDecimal = <span class="keyword">new</span> BigDecimal(x).setScale(<span class="number">3</span>, RoundingMode.HALF_UP).toString();</span><br><span class="line">System.out.println(bigDecimal);<span class="comment">// 设置精度</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>String</p><p>一旦一个String对象在内存堆中被创建，他就无法被修改（final关键字修饰）。String类的所有方法都无法改变它本身的值，而是会创建一个新的内存空间，并返回一个新的对象。</p></li><li><p>StringBuffer/StringBuilder</p><p>因为Java特有的垃圾回收机制导致每次都需要清理修改String对象后的原对象。这样会对时间造成极大地浪费。StringBuffer/StringBuilder是为了解决String本身无法被修改的情况而产生的。</p><ul><li><p>StringBuffer和StringBuilder的区别</p><p>StringBuffer的属性、方法用到了synchronized修饰，因此它是线程安全的，所以他比较适合用在多线程中，同时它的toString方法会通过使用缓存区的值来构造字符串。相反StringBuilder并不是线程安全的，他适合在单线程中使用，且它的toString方法是通过直接复制成员属性的value值来构造字符串。</p><p>当然StringBuilder的性能肯定是优于StringBuffer的。</p></li></ul></li><li><p>方法：</p><ul><li><p>substring</p><ul><li><p>JDK 6</p><p>substring方法在JDK 6中存在内存泄露问题，原因是该方法并没有对字符串进行修改，仅是对string对象内的offset和count属性做了修改，这样做会导致我们的string在使用过程中一直引用的并不是我们实际想要截取的字符串，且由于一直被引用导致无法被回收，这就很有可能造成内存泄漏。</p></li><li><p>JDK 7</p><p>在原来基础上更改了内置属性value[]的值，引用的将是我们实际所截取到字符串，避免了内存泄露。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>replace、replaceFirst、replaceAll</p><p>这三个的区别在于replace中的target不使用正则表达式，因此仅是普通的字符匹配，而后面两个的target使用正则表达式，replaceFirst 是取代第一个匹配成功的子字符串，而replaceAll取代所有匹配成功的子字符串。</p></li><li><p>String对“+”的重载</p><p>String s=”a”+”b”,编译器进行常量叠加，变成“ab”</p><p>编译期常量之间的运算会进行常量叠加</p><p>编译期常量：</p><pre><code>- 数字或者字符串字面量。</code></pre><p>  声明为final类型的基本类型或String类型并直接赋值（非运算）的变量就是编译期常量</p><ul><li>编译期常量赋值的Final修饰的常量<ul><li>编译期常量简单运算的结果的字面量。</li></ul></li></ul></li></ul><p>优化方法：</p><p>可用StringBuilder的append()方法取代，再用toString()方法。</p></li><li><p>字符串拼接的几种方式和区别</p><ul><li><p>使用“+”拼接字符串</p><p>Java不支持运算符重载，这里仅提供了一个语法糖。</p></li><li><p>concat</p><p>String.concat(str,str);</p></li><li><p>StringBuffer/StringBuilder 的append()方法</p><p>StringBuffer.append(str);</p><ul><li><p>开源类库中的拼接方法</p><p>StringUtils.join</p></li></ul><p>以上几种连接方式我们往往使用StringBuilder。</p><p>不使用“+”是因为每次使用“+”进行连接时他都会将两边字符串转化为StringBuilder.append进行连接,这样的效率很低。</p></li></ul></li></ul><p>  ​        耗时排名：StringBuilder&lt;StringBuffer&lt;concat&lt;+&lt;StringUtils.join</p><ul><li><p>String.valueOf和Integer.toString的区别</p><p>无任何区别，实际上String.valueOf就是调用的Integer.toString方法</p></li><li><p>switch对String的支持</p><p>Java中switch支持byte、short、int、char、String</p><p>但实际上switch是只支持int类型的，之所以可以使用char、String是因为它把它们都作为int处理。</p><p>char可以转化为ASCII码。</p><p>String可以转化为hashCode哈希值，然后在通过equals方法进行安全检查。</p></li><li><p>字符串池、常量池（运行时常量池、Class常量池）、intern</p><ul><li>全局字符串池：内部为表结构，使用的是hashCode作为StringTable，存储字符串的直接引用值，每个JVM都仅有一个。</li><li>Class常量池： Class常量池存在于每一个Class文件中，Class文件开始装载时，Class常量池中的常量使用符号引用代表实际地址。运行时会将符号引用转存到运行时常量池中。Class解析完毕后，将符号引用转化为直接引用，与全局字符串池的StringTable中的引用值对应。</li><li>运行时常量池：jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。</li><li>intern: intern()函数，返回StringTable中对应字符串的引用值，如果没有就将对应字符串的引用值添加进去，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">String str3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String str4 = str2.intern();</span><br><span class="line">String str5 = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">System.out.println(str1 == str3);<span class="comment">//true</span></span><br><span class="line">System.out.println(str2 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>​    str1对象实例化，实例化对象存储在堆中，同时将“abc”字符串的引用值存储在StringTable中。</p><p>​    str2对象实例化，此时它通过new在堆中开辟了一个新的空间存放str2对象，同时将“def”字符串引用存到StringTable中。</p><p>​    str3同str1。</p><p>​    str4被str2.intern()赋值，str2.intern()表示获取str2字符串在StringTable中的直接引用值。因此str4=“def”。</p><p>​    str5同str1。</p></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><p>种类：char、byte、short、int、long、float、double、boolean 共有八种。（这些类型都不是面向对象的）</p></li><li><p>为什么我们需要用设置基本数据类型？</p><p>Java是面向对象的，同时对象都存储在堆中，我们需要通过栈的引用来使用这些对象。因此对象本身十分消耗资源。</p><p>这种时候若我们对一些经常使用的变量仍需要建立对象时，就会显得十分笨重。所以Java就设置了基本数据类型，我们不需要new一个基本数据类型的对象，他们也就不会在堆上创建而是直接在栈中保存，这样就显得十分高效。</p></li></ul><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><ul><li><p>为什么需要包装类</p><p>因为java是面向对象的，很多时候我们需要用到的是对象而非基本数据类型。因此我们就在每个基本数据类型上都建了一个包装类型，他们具有对象的性质，并添加有属性和方法。</p><p>| 基本数据类型 | 包装类    |<br>| —————— | ————- |<br>| byte         | Byte      |<br>| boolean      | Boolean   |<br>| short        | Short     |<br>| char         | Character |<br>| int          | Integer   |<br>| long         | Long      |<br>| float        | Float     |<br>| double       | Double    |</p></li></ul><ul><li><p>基本数据类型与包装类之间的转化</p><p>实际上的转化过程并不需要我们直接编写，因为Java会帮我们自动拆装箱。具体体现在：</p><ul><li>基本数据类型放入集合类</li><li>包装类和基本类型比大小</li><li>四则运算</li><li>等等。。</li></ul><p>在拆箱过程中应注意包装类的值，因为包装类可以为null，此时他的拆箱结果会报异常。</p></li><li><p>自动装箱的缓存机制</p><p>以Integer为例：Integer的缓存存储范围在-128-127之间，也就是说当我们连续新建两个Integer对象时若他们值的范围都在-128-127之间，那么缓存区会存储第一个Integer对象，而第二个Integer对象不会在堆中新建一个存储空间而是使用缓存区的Integer对象。</p><p>这么做的好处当然是提高性能了。</p><p>同时应注意的是包装对象的大小比较最好还是使用equals函数，==仅在范围都是-128-127的时候在有效。</p></li></ul><h2 id="四、Java中各种关键字"><a href="#四、Java中各种关键字" class="headerlink" title="四、Java中各种关键字"></a>四、Java中各种关键字</h2><ul><li>transient ：表示字段仅瞬时存在，不被持久化。一般用在需要对数据网络传输时，它可以用来屏蔽传输。</li><li>instanceof ：所属关系，判断是否为该对象引用</li><li>volatile ：保证可见性，防止指令重排。更深层理解可以看我有关volatile的文章</li><li>synchronized ：加同步互斥锁。可以同步方法或某个对象。</li><li>final、static ：设置常量，静态变量。类加载时加载到方法区。</li></ul><h2 id="五、对象的默认方法"><a href="#五、对象的默认方法" class="headerlink" title="五、对象的默认方法"></a>五、对象的默认方法</h2><blockquote><p>仔细阅读官方注解，我们很容易就可以知道这些方法的由来和使用规则，读者可以自行阅读，这里仅做个总结。</p></blockquote><h4 id="1-hashCode（）"><a href="#1-hashCode（）" class="headerlink" title="1. hashCode（）"></a>1. hashCode（）</h4><p>该方法用来计算对象的hash值。它主要被应用于各种散列表中，例如HashMap中计算对象要存放的桶索引</p><p>计算出来的hash值也常常用来进行各种比较，同时官方给出了以下<strong>约定</strong>，这些使我们应该记住的：</p><ol><li>我们对同一个对象多次执行hashCode（）方法，最终获得的都是唯一相同的结果。而在不同机器但相同的程序下，最终的hashCode（）值可以不同。</li><li>如果两个对象equals相等，那么他们的hashCode一定也相等。</li><li>两个对象equals不相等，他们的hashCode也可以相等。这里我们应该要明白一点，两个对象hashCode不同能够推导出equals不等，这意味着在散列表中判断对象是否相等时可以先比较hashCode再比较equals，以此来提高程序性能。</li></ol><h4 id="2-equals（）"><a href="#2-equals（）" class="headerlink" title="2.equals（）"></a>2.equals（）</h4><p>该方法用来比较两个对象是否相等。同样的开发者要求我们在重写这个方法时必须满足一定的约定：</p><blockquote><p>a、b、c三个对象，对象不能为空</p></blockquote><ol><li>a.equals(b) == b.equals(a)</li><li>a.equals(a)=true</li><li>a.equals(b)=true,b.equals(c)=true =&gt;a.equals(c)=true</li><li>只要equals涉及的对象信息没变，则equals方法的结果也会持久不变</li></ol><p>注意：根据hashCode的约定规则，我们知道hashCode不相等则equals结果必然false。当我们重写equals（）方法时，为了保证这个约定仍然有效，我们必须要重写hashCode（）方法。</p><h4 id="3-toString（）"><a href="#3-toString（）" class="headerlink" title="3.toString（）"></a>3.toString（）</h4><p>用一个String来表示一个对象。这个没啥可说的。。</p><h4 id="4-finalize（）"><a href="#4-finalize（）" class="headerlink" title="4. finalize（）"></a>4. finalize（）</h4><p>当该对象不再被引用时，垃圾收集器会在将要清理该对象之前调用finalize（）方法。该方法可以做一些用户自定义的清除。</p><p>触发时机：确定对象的任何方法都不（再）会被调用时，调用其 finalize 方法</p><p>注意点：</p><ol><li>任何对象的 finalize 方法只会被 JVM 调用一次。</li><li>finalize（）方法引发的任何异常都会导致该对象的终止被暂停</li></ol><h4 id="5-clone（）"><a href="#5-clone（）" class="headerlink" title="5. clone（）"></a>5. clone（）</h4><p>该方法基于原型模式，通过拷贝原型来创建一个对象。我们可以通过重写父类的clone方法实现对象的拷贝</p><p>这里将拷贝细分为两个概念：</p><p>深拷贝：新建对象中的对象字段，或者说新旧对象之间无任何关联</p><p>浅拷贝：不新建对象中的对象字段，拷贝给克隆实例的仅为当前实例对象字段的引用</p><p>我们不作任何处理使用clone方法就属于浅拷贝</p><p>注：对于String的拷贝是否属于深拷贝还是浅拷贝，这里暂作思考，原因是String对象的不可变性，String对象的变化会生成新的对象，从而导致了新旧String对象之间不会互相影响（StringA变化了StringB不会受影响，反之同理）</p><p>深拷贝的实现：</p><p>为了实现深拷贝，我们只需要将类中的对象clone一遍就行了，保证彻底深拷贝则在这一整个继承链上对每个对象字段都进行clone。</p><h2 id="六、集合类"><a href="#六、集合类" class="headerlink" title="六、集合类"></a>六、集合类</h2><ul><li><p>ArrayList和LinkedList和Vector的区别</p><p>都实现List接口，主要区别在于实现方式以及不同操作下的不同效率</p><p>ArrayList是可变长数组，初次add时它的容量为10，每次扩容都是原来容量的1.5倍。LinkedList是一个双链表，再添加删除方面有较好的的性能。Vector与ArrayList类似，但它属于强同步类，是线程安全的，每次扩容增长原来的一倍。若程序本身线程安全则使用ArrayList即可。</p><p>这里可以给ArrayList分配较大初始值，这样可以有效减少调整大小的开销。</p></li><li><p>SynchronizedList和Vector的区别</p><ol><li><p>SynchronizedList主要使用的是同步代码块包上的list方法，Vector主要使用同步方法。</p></li><li><p>SynchronizedList有很好的扩展和兼容功能。他可以将所有的List的子类转成线程安全的类。</p></li><li><p>使用SynchronizedList的时候，进行遍历时要手动进行同步处理。 </p></li><li>SynchronizedList可以指定锁定的对象。</li></ol></li><li><p>HashMap、HashTable、ConcurrentHashMap区别</p><ul><li><p>HashTable继承dictionnary类，它的所有方法都用synchronized修饰，因此它是线程安全的。它不可以存储NULL值。内部也是通过单链表解决冲突问题。它的默认大小是11，增加方式为2*old+1。</p></li><li><p>HashMap使用了Map接口，它不是线程安全的，插入操作时可能会出现数据覆盖。但他可以存储NULL键值对。</p><ul><li><p>JDK版本1.7时，它的底层数据结构是数组和单链表entry。在put是会有一个resize的过程，这个过程有可能造成头插，这可能造成死循环。1.8后用的尾插。</p></li><li><p>JDK版本1.8时，底层数据结构是数组加单链表或者红黑树。当单链表的长度大于等于8且hash桶大于等于64时他会将单链表转化为红黑树。红黑树节点数量若小于等于6则会转化为单链表。hash桶数量默认为16，加载因子默认为0.75。当哈希表中元素数超出加载因子与当前容量（hash桶数量）乘积时对该哈希表进行resize操作（扩容）。</p></li><li><p>哈希冲突</p><p>若干Key值进行与运算在对length取模后的值若落在同一个数组下标上，这时出现哈希冲突，需要在链表上使用equals进行进一步判断。</p></li></ul></li><li><p>ConcurrentHashMap</p><p>​    jdk1.8之前：ConcurrentHashMap对桶数组进行了一个分段，并对每一个分段都用锁进行保护。所以他是线程安全的。</p><p>​    1.8：和HashMap一样的数据结构：数组加单链表或红黑树。渐渐放弃使用分片锁机制而使用Synchronize和CAS进行操作。因为JVM对Synchronize优化较好。</p><ul><li><p>CAS：比较并替换，是一种实现并发算法的常见技术。CAS 的使用流程通常如下：1）首先从地址 V 读取值 A；2）根据 A 计算目标值 B；3）通过 CAS 以原子的方式将地址 V 中的值从 A 修改为 B。</p><p>CAS指令执行时，当且仅当内存地址V的值与预期值A相等时，将内存地址V的值修改为B，否则就什么都不做。整个比较并替换的操作是一个原子操作。</p><p>并发量比较大时，它会陷入一个忙循环过程，对CPU消耗较大。建议直接使用锁。</p><p>同时他可能会产生ABA问题，即他在读取值A以及通过原子方式将V中的A值改为B值这两个时期之间就发生了A-&gt;B-&gt;A的过程，此时CAS会误认为A值从来没有被改变过。（之前读和过段时间读的中间被人修改过后又更改回来了）可以通过加时间戳或者版本号的方式避免这个问题  。</p></li></ul></li></ul></li><li><p>Set如何保证元素是不重复的</p><ul><li><p>TreeSet</p><p>二叉树实现。数据自动排序，不允许放入null值。底层由TreeMap和keySet实现。其中TreeMap基于红黑树实现，它按key排序。通过compareTo()来判断重复元素。</p></li><li><p>HashSet</p><p>哈希表实现。数据无序，允许放入null值。基本操作由HashMap底层实现，add方法加入数据时，key值覆盖value值保持原样（固定值）。</p></li></ul></li></ul><h2 id="七、Java8中stream的相关用法"><a href="#七、Java8中stream的相关用法" class="headerlink" title="七、Java8中stream的相关用法"></a>七、Java8中stream的相关用法</h2><p>stream 提供一种对 Java 集合运算和表达的高阶抽象。</p><p>它具有如下特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 无存储：他不是一种数据结构，仅是一个视图。</span><br><span class="line">- 函数式编程：对数据源的Stream操作并不会更改数据源的值。</span><br><span class="line">- 惰式编程：只有当用户需要最终结果时，流上的操作才会被执行。</span><br><span class="line">- 可消费性：最终操作完后便不可再用，需要再次生成。</span><br></pre></td></tr></table></figure><p>stream分三个阶段：</p><ul><li>创建阶段：集合的steam()方法或者直接通过steam类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;HollisChuang&quot;</span>, <span class="string">&quot;hollis&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;HelloWorld&quot;</span>, <span class="string">&quot;Hollis&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>中间阶段：</p><ul><li><p>filter：过滤操作</p></li><li><p>map：映射操作</p></li><li>limit\skip：limit是仅取stream中的前n个元素；skip是去掉前n个元素。</li><li>sorted：排序</li><li>distinct：去重</li></ul></li><li><p>最终阶段：</p><ul><li>forEach：依次遍历</li><li>count：计数</li><li>collect：归纳汇总</li></ul></li><li><p>Collection和Collections的区别</p><p>Collection 是一个集合接口，它提供了许多对集合对象操作的通用接口方法。是list、set的父接口。</p><p>Collections 是一个包装类，它不能被实例化。但内部包含许多集合操作的静态方法。</p></li><li><p>Arrays.asList获得的List使用时需要注意什么</p><p>Arrays工具类的asList方法获得的并不是util下的List而是Arrays内部的类。它不具备util下List的一些方法。</p><p>使用时需要通过构造器将其转变为ArrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;HollisChuang&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;hollis&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Enumeration和Iterator区别</p><p>Enumeration：枚举，只能读取不能修改。只能遍历Vector、HashTable这些集合。</p><p>Iterator：迭代器，即能读取也能修改。支持fail-fast机制。</p></li><li><p>fail-fast和fail-safe</p><p>快速失效系统fail-fast：在Java中即为错误监测机制。</p><p>安全失效fail-safe：先复制原来的内容，在复制的内容上进行遍历。可在多线程并发下使用。</p></li><li><p>CopyOnWriteArrayList：基于拷贝实现，应用于读多写少场景</p></li><li><p>ConcurrentSkipListMap</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="2020/10/21/Spring/Spring%20MVC%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/21/Spring/Spring%20MVC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>Spring MVC 是目前主流的实现 MVC 设计模式的企业级开发框架，Spring 框架的一个子模块，无需整合，开发起来更加便捷。</p><h4 id="什么是-MVC-设计模式？"><a href="#什么是-MVC-设计模式？" class="headerlink" title="什么是 MVC 设计模式？"></a>什么是 MVC 设计模式？</h4><p>将应用程序分为 Controller、Model、View 三层，Controller 接收客户端请求，调用 Model 生成业务数据，传递给 View。</p><p>Spring MVC 就是对这套流程的封装，屏蔽了很多底层代码，开放出接口，让开发者可以更加轻松、便捷地完成基于 MVC 模式的 Web 开发。</p><h4 id="Spring-MVC-的核心组件"><a href="#Spring-MVC-的核心组件" class="headerlink" title="Spring MVC 的核心组件"></a>Spring MVC 的核心组件</h4><ul><li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。</li><li>Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。</li><li>HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。</li><li>HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</li><li>HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li><li>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerAdapter 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</li><li>ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。</li><li>ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li></ul><h4 id="Spring-MVC-的工作流程"><a href="#Spring-MVC-的工作流程" class="headerlink" title="Spring MVC 的工作流程"></a>Spring MVC 的工作流程</h4><ul><li>客户端请求被 DisptacherServlet 接收。</li><li>根据 HandlerMapping 映射到 Handler。</li><li>生成 Handler 和 HandlerInterceptor。</li><li>Handler 和 HandlerInterceptor 以 HandlerExecutionChain 的形式一并返回给 DisptacherServlet。</li><li>DispatcherServlet 通过 HandlerAdapter 调用 Handler 的方法完成业务逻辑处理。</li><li>Handler 返回一个 ModelAndView 给 DispatcherServlet。</li><li>DispatcherServlet 将获取的 ModelAndView 对象传给 ViewResolver 视图解析器，将逻辑视图解析为物理视图 View。</li><li>ViewResovler 返回一个 View 给 DispatcherServlet。</li><li>DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）。</li><li>DispatcherServlet 将渲染后的结果响应给客户端。</li></ul><p>Spring MVC 流程非常复杂，实际开发中很简单，因为大部分的组件不需要开发者创建、管理，只需要通过配置文件的方式完成配置即可，真正需要开发者进行处理的只有 Handler 、View。</p><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 web.xml 中配置 DispatcherServlet。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建 Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-注解"><a href="#Spring-MVC-注解" class="headerlink" title="Spring MVC 注解"></a>Spring MVC 注解</h3><ul><li>@RequestMapping </li></ul><p>Spring MVC 通过 @RequestMapping 注解将 URL 请求与业务方法进行映射，在 Handler 的类定义处以及方法定义处都可以添加 @RequestMapping ，在类定义处添加，相当于客户端多了一层访问路径。</p><ul><li>@Controller</li></ul><p>@Controller 在类定义处添加，将该类交个 IoC 容器来管理（结合 springmvc.xml 的自动扫描配置使用），同时使其成为一个控制器，可以接收客户端请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestMapping 相关参数</li></ul><p>1、value：指定 URL 请求的实际地址，是 @RequestMapping 的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、method：指定请求的 method 类型，GET、POST、PUT、DELET。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示 index 方法只能接收 GET 请求。</p><p>3、params：指定请求中必须包含某些参数，否则无法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示请求中必须包含 name 和 id 两个参数，同时 id 的值必须是 10。</p><p>关于参数绑定，在形参列表中通过添加 @RequestParam 注解完成 HTTP 请求参数与业务方法形参的映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String str,<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示将请求的参数 name 和 id 分别赋给了形参 str 和 age ，同时自动完成了数据类型转换，将 “10” 转为了 int 类型的 10，再赋给 age，这些工作都是由 HandlerAdapter 来完成的。</p><p>Spring MVC 也支持 RESTful 风格的 URL。</p><p>传统类型：<a href="http://localhost:8080/hello/index?name=zhangsan&amp;id=10">http://localhost:8080/hello/index?name=zhangsan&amp;id=10</a></p><p>REST：<a href="http://localhost:8080/hello/index/zhangsan/10">http://localhost:8080/hello/index/zhangsan/10</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/rest/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">rest</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name,<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 @PathVariable 注解完成请求参数与形参的映射。</p><ul><li>映射 Cookie</li></ul><p>Spring MVC 通过映射可以直接在业务方法中获取 Cookie 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/cookie&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String sessionId)</span></span>&#123;</span><br><span class="line">    System.out.println(sessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 JavaBean 绑定参数</li></ul><p>Spring MVC 会根据请求参数名和 JavaBean 属性名进行自动匹配，自动为对象填充属性值，同时支持及联属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">13</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">33</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/hello/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户id：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户地址：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;address.value&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/save&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现中文乱码问题，只需在 web.xml 添加 Spring MVC 自带的过滤器即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP 页面的转发和重定向：</li></ul><p>Spring MVC 默认是以转发的形式响应 JSP。</p><p>1、转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/forward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    <span class="comment">//        return &quot;index&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-数据绑定"><a href="#Spring-MVC-数据绑定" class="headerlink" title="Spring MVC 数据绑定"></a>Spring MVC 数据绑定</h3><p>数据绑定：在后端的业务方法中直接获取客户端 HTTP 请求中的参数，将请求参数映射到业务方法的形参中，Spring MVC 中数据绑定的工作是由 HandlerAdapter 来完成的。</p><ul><li>基本数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/baseType&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">baseType</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ResponseBody 表示 Spring MVC 会直接将业务方法的返回值响应给客户端，如果不加 @ResponseBody 注解，Spring MVC 会将业务方法的放回值传递给 DispatcherServlet，再由 DisptacherServlet 调用 ViewResolver 对返回值进行解析，映射到一个 JSP 资源。</p><ul><li>包装类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/packageType&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">packageType</span><span class="params">(<span class="meta">@RequestParam(value = &quot;num&quot;,required = false,defaultValue = &quot;0&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包装类可以接收 null，当 HTTP 请求没有参数时，使用包装类定义形参的数据类型，程序不会抛出异常。</p><p>@RequestParam</p><p>value = “num”：将 HTTP 请求中名为 num 的参数赋给形参 id。</p><p>requried：设置 num 是否为必填项，true 表示必填，false 表示非必填，可省略。</p><p>defaultValue = “0”：如果 HTTP 请求中没有 num 参数，默认值为0.</p><ul><li>数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 表示该控制器会直接将业务方法的返回值响应给客户端，不进行视图解析。</p><p>@Controller 表示该控制器的每一个业务方法的返回值都会交给视图解析器进行解析，如果只需要将数据响应给客户端，而不需要进行视图解析，则需要在对应的业务方法定义处添加 @ResponseBody。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>List</li></ul><p>Spring MVC 不支持 List 类型的直接转换，需要对 List 集合进行包装。</p><p>集合封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">09</span>:<span class="number">12</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/data/list&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[0].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[0].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[1].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[1].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[2].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[2].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(UserList userList)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理 @ResponseBody 中文乱码，在 springmvc.xml 中配置消息转换器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Map</li></ul><p>自定义封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(UserMap userMap)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(String key:userMap.getUsers().keySet())&#123;</span><br><span class="line">        User user = userMap.getUsers().get(key);</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">09</span>:<span class="number">12</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/data/map&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;a&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;a&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;b&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;b&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;c&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;c&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>JSON</li></ul><p>客户端发生 JSON 格式的数据，直接通过 Spring MVC 绑定到业务方法的形参中。</p><p>处理 Spring MVC 无法加载静态资源，在 web.xml 中添加配置即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">35</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">           <span class="keyword">var</span> user = &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">               <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:<span class="string">&quot;/data/json&quot;</span>,</span><br><span class="line">               data:JSON.stringify(user),</span><br><span class="line">               type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">               contentType:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">               dataType:<span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">               success:function(data)&#123;</span><br><span class="line">                   alter(data.id+<span class="string">&quot;---&quot;</span>+data.name);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">json</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 中的 JSON 和 JavaBean 的转换需要借助于 fastjson，pom.xml 引入相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc.xml 添加 fastjson 配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-模型数据解析"><a href="#Spring-MVC-模型数据解析" class="headerlink" title="Spring MVC 模型数据解析"></a>Spring MVC 模型数据解析</h3><p>JSP 四大作用域对应的内置对象：pageContext、request、session、application。</p><p>模型数据的绑定是由 ViewResolver 来完成的，实际开发中，我们需要先添加模型数据，再交给 ViewResolver 来绑定。</p><p>Spring MVC 提供了以下几种方式添加模型数据：</p><ul><li>Map</li><li>Model</li><li>ModelAndView</li><li>@SessionAttribute</li><li>@ModelAttribute</li></ul><blockquote><p>将模式数据绑定到 request 对象。</p></blockquote><p>1、Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(Map&lt;String,User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">36</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;requestScope.user&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、Model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/model&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">model</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、ModelAndView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    modelAndView.setView(view);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;view&quot;</span>,map);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view,map);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView7&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;view&quot;</span>,<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView8&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view,<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、HttpServletRequest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/request&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">request</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、@ModelAttribute</p><ul><li>定义一个方法，该方法专门用来返回要填充到模型数据中的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(Map&lt;String,User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务方法中无需再处理模型数据，只需返回视图即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/modelAttribute&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modelAttribute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将模型数据绑定到 session 对象</p></blockquote><p>1、直接使用原生的 Servlet API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/session&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/session2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session2</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、@SessionAttribute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;user&quot;,&quot;address&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了 key = “user”、key = “address” 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes(types = &#123;User.class,Address.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了数据类型是 User 、Address 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><blockquote><p>将模型数据绑定到 application 对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/application&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">application</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    ServletContext application = request.getServletContext();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-自定义数据转换器"><a href="#Spring-MVC-自定义数据转换器" class="headerlink" title="Spring MVC 自定义数据转换器"></a>Spring MVC 自定义数据转换器</h3><p>数据转换器是指将客户端 HTTP 请求中的参数转换为业务方法中定义的形参，自定义表示开发者可以自主设计转换的方式，HandlerApdter 已经提供了通用的转换，String 转 int，String 转 double，表单数据的封装等，但是在特殊的业务场景下，HandlerAdapter 无法进行转换，就需要开发者自定义转换器。</p><p>客户端输入 String 类型的数据 “2019-03-03”，自定义转换器将该数据转为 Date 类型的对象。</p><ul><li>创建 DateConverter 转换器，实现 Conveter 接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateConverter</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="keyword">this</span>.pattern);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = simpleDateFormat.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml 配置转换器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.converter.DateConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">47</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/converter/date&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        请输入日期:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;date&quot;</span>/&gt;(yyyy-MM-dd)&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/converter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/date&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 转 Student</p><p>StudentConverter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String[] args = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(Long.parseLong(args[<span class="number">0</span>]));</span><br><span class="line">        student.setName(args[<span class="number">1</span>]);</span><br><span class="line">        student.setAge(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.converter.DateConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.converter.StudentConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">23</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/converter/student&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        请输入学生信息：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;student&quot;</span>/&gt;(id-name-age)&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">student</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-REST"><a href="#Spring-MVC-REST" class="headerlink" title="Spring MVC REST"></a>Spring MVC REST</h3><p>REST：Representational State Transfer，资源表现层状态转换，是目前比较主流的一种互联网软件架构，它结构清晰、标准规范、易于理解、便于扩展。</p><ul><li>资源（Resource）</li></ul><p>网络上的一个实体，或者说网络中存在的一个具体信息，一段文本、一张图片、一首歌曲、一段视频等等，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每个资源都有对应的一个特定的 URI，要获取该资源时，只需要访问对应的 URI 即可。</p><ul><li>表现层（Representation）</li></ul><p>资源具体呈现出来的形式，比如文本可以用 txt 格式表示，也可以用 HTML、XML、JSON等格式来表示。</p><ul><li>状态转换（State Transfer）</li></ul><p>客户端如果希望操作服务器中的某个资源，就需要通过某种方式让服务端发生状态转换，而这种转换是建立在表现层之上的，所有叫做”表现层状态转换”。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>URL 更加简洁。</li><li>有利于不同系统之间的资源共享，只需要遵守一定的规范，不需要进行其他配置即可实现资源共享。</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>REST 具体操作就是 HTTP 协议中四个表示操作方式的动词分别对应 CRUD 基本操作。</p><p>GET 用来表示获取资源。</p><p>POST 用来表示新建资源。</p><p>PUT 用来表示修改资源。</p><p>DELETE 用来表示删除资源。</p><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RESTHandeler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentRepositoryImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; studentMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        studentMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        studentMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        studentMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        studentMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentMap.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        studentMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-文件上传下载"><a href="#Spring-MVC-文件上传下载" class="headerlink" title="Spring MVC 文件上传下载"></a>Spring MVC 文件上传下载</h3><blockquote><p>单文件上传</p></blockquote><p>底层是使用 Apache fileupload 组件完成上传，Spring MVC 对这种方式进行了封装。</p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: <span class="number">09</span>:<span class="number">09</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/file/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>1、input 的 type 设置为 file。</p><p>2、form 的 method 设置为 post（get 请求只能将文件名传给服务器）</p><p>3、from 的 enctype 设置为 multipart-form-data（如果不设置只能将文件名传给服务器）</p><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile img, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(img.getSize()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取保存上传文件的file路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="comment">//获取上传的文件名</span></span><br><span class="line">            String name = img.getOriginalFilename();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                img.transferTo(file);</span><br><span class="line">                <span class="comment">//保存上传之后的文件路径</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;path&quot;</span>,<span class="string">&quot;/file/&quot;</span>+name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置上传组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml 添加如下配置，否则客户端无法访问 png</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多文件上传</p></blockquote><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: <span class="number">09</span>:<span class="number">32</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/file/uploads&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        file1:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        file2:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        file3:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;files&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;file&quot;</span> &gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;$&#123;file&#125;&quot;</span> width=<span class="string">&quot;300px&quot;</span>&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploads&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploads</span><span class="params">(MultipartFile[] imgs,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile img:imgs)&#123;</span><br><span class="line">        <span class="keyword">if</span>(img.getSize()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取保存上传文件的file路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="comment">//获取上传的文件名</span></span><br><span class="line">            String name = img.getOriginalFilename();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                img.transferTo(file);</span><br><span class="line">                <span class="comment">//保存上传之后的文件路径</span></span><br><span class="line">                files.add(<span class="string">&quot;/file/&quot;</span>+name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;files&quot;</span>,files);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下载</p></blockquote><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">36</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;/file/download/1&quot;&gt;1.png&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;/file/download/2&quot;&gt;2.png&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;/file/download/3&quot;&gt;3.png&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">        name += <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/forc-download&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = response.getOutputStream();</span><br><span class="line">                outputStream.write(FileUtils.readFileToByteArray(file));</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-表单标签库"><a href="#Spring-MVC-表单标签库" class="headerlink" title="Spring MVC 表单标签库"></a>Spring MVC 表单标签库</h3><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;tag&quot;</span>);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        学生ID：&lt;form:input path=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生姓名：&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生年龄：&lt;form:input path=<span class="string">&quot;age&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>1、JSP 页面导入 Spring MVC 表单标签库，与导入 JSTL 标签库的语法非常相似，前缀 prefix 可以自定义，通常定义为 from。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>2、将 form 表单与模型数据进行绑定，通过 modelAttribute 属性完成绑定，将 modelAttribute 的值设置为模型数据对应的 key 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Handeler:modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line">JSP:&lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>3、form 表单完成绑定之后，将模型数据的值取出绑定到不同的标签中，通过设置标签的 path 属性完成，将 path 属性的值设置为模型数据对应的属性名即可。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学生ID：&lt;form:input path=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">学生姓名：&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">学生年龄：&lt;form:input path=<span class="string">&quot;age&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="常用的表单标签"><a href="#常用的表单标签" class="headerlink" title="常用的表单标签"></a>常用的表单标签</h4><ul><li>from</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:from modelAttribute=<span class="string">&quot;student&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的<code>&lt;form&gt;&lt;/from&gt;</code>，通过 modelAttribute 属性绑定具体的模型数据。</p><ul><li>input</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;text&quot;/&gt;</code>，from 标签绑定的是模型数据，input 标签绑定的是模型数据中的属性值，通过 path 属性可以与模型数据中的属性名对应，并且支持及联操作。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;from:input path=<span class="string">&quot;address.name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>password</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:password path=<span class="string">&quot;password&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;password&quot;/&gt;</code>，通过 path 属性与模型数据的属性值进行绑定，password 标签的值不会在页面显示。</p><ul><li>checkbox</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;读书&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.setFlag(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkbox：&lt;form:checkbox path=&quot;flag&quot; value=&quot;flag&quot;&gt;&lt;/form:checkbox&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，通过 path 与模型数据的属性值进行绑定，可以绑定 boolean、数组和集合。</p><p>如果绑定 boolean 值，若该变量的值为 true，则表示该复选框选中，否则表示不选中。</p><p>如果绑定数组或者集合，数组/集合中的元素等于 checkbox 的 value 值，则选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;看电影&quot;</span>,<span class="string">&quot;玩游戏&quot;</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">爱好：&lt;form:checkbox path=&quot;hobby&quot; value=&quot;摄影&quot;&gt;&lt;/form:checkbox&gt;摄影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=&quot;hobby&quot; value=&quot;读书&quot;&gt;&lt;/form:checkbox&gt;读书&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=&quot;hobby&quot; value=&quot;听音乐&quot;&gt;&lt;/form:checkbox&gt;听音乐&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=&quot;hobby&quot; value=&quot;看电影&quot;&gt;&lt;/form:checkbox&gt;看电影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=&quot;hobby&quot; value=&quot;旅游&quot;&gt;&lt;/form:checkbox&gt;旅游&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=&quot;hobby&quot; value=&quot;玩游戏&quot;&gt;&lt;/form:checkbox&gt;玩游戏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>checkboxes</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkboxes items=$&#123;student.hobby&#125; path=<span class="string">&quot;selecHobby&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，是对 <code>&lt;form:checkbox/&gt;</code> 的一种简化，需要结合 items 和 path 属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的集合或数组，可以这样理解，items 为全部可选集合，path 为默认的选中集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">&quot;摄影&quot;</span>,<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;听音乐&quot;</span>,<span class="string">&quot;看电影&quot;</span>,<span class="string">&quot;旅游&quot;</span>,<span class="string">&quot;玩游戏&quot;</span>));</span><br><span class="line">student.setSelectHobby(Arrays.asList(<span class="string">&quot;摄影&quot;</span>,<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;听音乐&quot;</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爱好：&lt;form:checkboxes path=<span class="string">&quot;selectHobby&quot;</span> items=<span class="string">&quot;$&#123;student.hobby&#125;&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是 path 可以直接绑定模型数据的属性值，items 则需要通过 EL 表达式的形式从域对象中获取数据，不能直接写属性名。</p><ul><li>rabiobutton</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;from:radiobutton path=<span class="string">&quot;radioId&quot;</span> value=<span class="string">&quot;0&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一个 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，绑定的数据与标签的 value 值相等则为选中，否则不选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setRadioId(<span class="number">1</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radiobutton:&lt;form:radiobutton path=<span class="string">&quot;radioId&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;radiobutton&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>radiobuttons</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:radiobuttons itmes=<span class="string">&quot;$&#123;student.grade&#125;&quot;</span> path=<span class="string">&quot;selectGrade&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，这里需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，items 为全部的可选类型，path 为默认选中的选项，用法与 <code>&lt;form:checkboxes/&gt;</code> 一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; gradeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">gradeMap.put(<span class="number">1</span>,<span class="string">&quot;一年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">2</span>,<span class="string">&quot;二年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">3</span>,<span class="string">&quot;三年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">4</span>,<span class="string">&quot;四年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">5</span>,<span class="string">&quot;五年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">6</span>,<span class="string">&quot;六年级&quot;</span>);</span><br><span class="line">student.setGradeMap(gradeMap);</span><br><span class="line">student.setSelectGrade(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学生年级：&lt;form:radiobuttons items=<span class="string">&quot;$&#123;student.gradeMap&#125;&quot;</span> path=<span class="string">&quot;selectGrade&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>select</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select items=<span class="string">&quot;$&#123;student.citys&#125;&quot;</span> path=<span class="string">&quot;selectCity&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一个 <code>&lt;select/&gt;</code> 标签，需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，用法与 <code>&lt;from:radiobuttons/&gt;</code>一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; cityMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">cityMap.put(<span class="number">1</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">2</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">3</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">4</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">student.setCityMap(cityMap);</span><br><span class="line">student.setSelectCity(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select items=&quot;$&#123;student.cityMap&#125;&quot; path=&quot;selectCity&quot;&gt;&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>options</li></ul><p><code>form:select</code> 结合 <code>form:options</code> 的使用，<code>from:select</code> 只定义 path 属性，在 <code>form:select</code> 标签内部添加一个子标签 <code>form:options</code> ，设置 items 属性，获取被遍历的集合。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">&quot;selectCity&quot;</span>&gt;</span><br><span class="line">  &lt;form:options items=&quot;$&#123;student.cityMap&#125;&quot;&gt;&lt;/form:options&gt;</span><br><span class="line">&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li><p>option</p><p><code>form:select</code> 结合 <code>form:option</code> 的使用，<code>from:select</code> 定义 path 属性，给每一个 <code>form:option</code> 设置 value 值，path 的值与哪个 value 值相等，该项默认选中。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">&quot;selectCity&quot;</span>&gt;</span><br><span class="line">            &lt;form:option value=&quot;1&quot;&gt;杭州&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value=&quot;2&quot;&gt;成都&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value=&quot;3&quot;&gt;西安&lt;/form:option&gt;</span><br><span class="line">        &lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>textarea</li></ul><p>渲染的是 HTML 中的一个 <code>&lt;textarea/&gt;</code> ，path 绑定模型数据的属性值，作为文本输入域的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setIntroduce(<span class="string">&quot;你好，我是...&quot;</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">信息：&lt;form:textarea path=<span class="string">&quot;introduce&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>errors</li></ul><p>处理错误信息，一般用在数据校验，该标签需要结合 Spring MVC 的验证器结合起来使用。</p><h3 id="Spring-MVC-数据校验"><a href="#Spring-MVC-数据校验" class="headerlink" title="Spring MVC 数据校验"></a>Spring MVC 数据校验</h3><p>Spring MVC 提供了两种数据校验的方式：1、基于 Validator 接口。2、使用 Annotation JSR - 303 标准进行校验。</p><p>基于 Validator 接口的方式需要自定义 Validator 验证器，每一条数据的验证规则需要开发者手动完成，使用 Annotation JSR - 303 标准则不需要自定义验证器，通过注解的方式可以直接在实体类中添加每个属性的验证规则，这种方式更加方便，实际开发中推荐使用。</p><blockquote><p>基于 Validator 接口</p></blockquote><ul><li>实体类 Account</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义验证器 AccountValidator，实现 Validator 接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Account.class.equals(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;name&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;password&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/validator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;account&quot;</span>,<span class="keyword">new</span> Account());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@Validated</span> Account account, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml 配置验证器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountValidator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.validator.AccountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;accountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">18</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">31</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;from&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;account&quot;</span> action=<span class="string">&quot;/validator/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名：&lt;form:input path=&quot;name&quot;/&gt;&lt;from:errors path=&quot;name&quot;&gt;&lt;/from:errors&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:input path=&quot;password&quot;/&gt;&lt;from:errors path=&quot;password&quot;&gt;&lt;/from:errors&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Annotation JSR - 303 标准</p></blockquote><p>使用 Annotation JSR - 303 标准进行验证，需要导入支持这种标准的依赖 jar 文件，这里我们使用 Hibernate Validator。</p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR-303 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过注解的方式直接在实体类中添加相关的验证规则。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Size(min = 6,max = 12,message = &quot;密码6-12位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Email(regexp = &quot;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\\\.[a-zA-Z0-9-]+)*\\\\.[a-zA-Z0-9]&#123;2,6&#125;$&quot;,message = &quot;请输入正确的邮箱格式&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\\\\\\\d&#123;8&#125;$&quot;,message = &quot;请输入正确的电话&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ValidatorHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;person&quot;</span>,<span class="keyword">new</span> Person());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> Person person, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">18</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">29</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;person&quot;</span> action=<span class="string">&quot;/validator/register2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;form:input path=&quot;username&quot;&gt;&lt;/form:input&gt;&lt;form:errors path=&quot;username&quot;/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:password path=&quot;password&quot;&gt;&lt;/form:password&gt;&lt;form:errors path=&quot;password&quot;/&gt;&lt;br/&gt;</span><br><span class="line">        邮箱：&lt;form:input path=&quot;email&quot;&gt;&lt;/form:input&gt;&lt;form:errors path=&quot;email&quot;/&gt;&lt;br/&gt;</span><br><span class="line">        电话：&lt;form:input path=&quot;phone&quot;&gt;&lt;/form:input&gt;&lt;form:errors path=&quot;phone&quot;/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>校验规则详解：</p><p>@Null                    被注解的元素必须为null</p><p>@NotNull                  被注解的元素不能为null</p><p>@Min(value)                 被注解的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@Max(value)                被注解的元素必须是一个数字，其值必须小于于等于指定的最大值    </p><p>@Email                     被注解的元素必须是电子邮箱地址</p><p>@Pattern                  被注解的元素必须符合对应的正则表达式</p><p>@Length                   被注解的元素的大小必须在指定的范围内</p><p>@NotEmpty                  被注解的字符串的值必须非空</p><p>Null 和 Empty 是不同的结果，String str = null，str 是 null，String str = “”，str 不是 null，其值为空。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud实战</title>
      <link href="2020/10/19/Spring/Spring%20Cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>2020/10/19/Spring/Spring%20Cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><p>客户端：针对普通用户，用户登录、用户退出、菜品订购、我的订单。</p><p>后台管理系统：针对管理员，管理员登录、管理员退出、添加菜品、查询菜品、修改菜品、删除菜品、订单处理、添加用户、查询用户、删除用户。</p><p>account 提供账户服务：用户和管理的登录退出。</p><p>menu 提供菜品服务：添加菜品、删除菜品、修改菜品、查询菜品。</p><p>order 提供订单服务：添加订单、查询订单、删除订单、处理订单。</p><p>user 提供用户服务：添加用户、查询用户、删除用户。</p><p>分离出一个服务消费者，调用以上四个服务提供者，服务消费者包含了客户端的前端页面和后台接口、后台管理系统的前端页面和后台接口。用户 / 管理员直接访问的资源都保存在服务消费者中，服务消费者根据具体的需求调用四个服务提供者的业务逻辑，通过 Feign 实现负载均衡。</p><p>四个服务提供者和一个服务消费者都需要在注册中心进行注册，同时可以使用配置中心来对配置文件进行统一集中管理。</p><ul><li>创建父工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- JDK 9 缺失jar --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注册中心</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置中心</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configserver</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">native</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">native:</span></span><br><span class="line">          <span class="attr">search-locations:</span> <span class="string">classpath:/shared</span></span><br></pre></td></tr></table></figure><ul><li>在 shared 路径下创建各个微服务对应的配置文件</li></ul><p>client-dev.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/static/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>menu-dev.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">menu</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderingsystem</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/orderingsystem?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapping/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.southwind.entity</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务提供者 order</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bootstrap.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8762</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;order的端口：&quot;</span>+<span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务提供者 menu</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bootstrap.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">menu</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8762</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Menu;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.MenuRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/menu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuRepository menuRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll/&#123;index&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title">findAll</span><span class="params">(<span class="meta">@PathVariable(&quot;index&quot;)</span> <span class="keyword">int</span> index,<span class="meta">@PathVariable(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menuRepository.findAll(index, limit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.southwind.repository&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MenuApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Menu 实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String flavor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 MenuRepository 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MenuRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Menu <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Menu menu)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Menu menu)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>resources 路径下创建 mapping 文件夹，存放 Mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.southwind.repository.MenuRepository&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Menu&quot;</span>&gt;</span></span><br><span class="line">        select * from t_menu limit #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(id) from t_menu</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Menu&quot;</span>&gt;</span></span><br><span class="line">        select * from t_menu where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Menu&quot;</span>&gt;</span></span><br><span class="line">        insert into t_menu(name,price,flavor) values(#&#123;name&#125;,#&#123;price&#125;,#&#123;flavor&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Menu&quot;</span>&gt;</span></span><br><span class="line">        update t_menu set name = #&#123;name&#125;,price = #&#123;price&#125;,flavor = #&#123;flavor&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        delete from t_menu where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>服务消费者 client</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bootstrap.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8762</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring Cloud实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="2020/10/19/Spring/Spring%20Cloud%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/19/Spring/Spring%20Cloud%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="单体应用存在的问题"><a href="#单体应用存在的问题" class="headerlink" title="单体应用存在的问题"></a>单体应用存在的问题</h3><ul><li>随着业务的发展，开发变得越来越复杂。</li><li>修改、新增某个功能，需要对整个系统进行测试、重新部署。</li><li>一个模块出现问题，很可能导致整个系统崩溃。</li><li>多个开发团队同时对数据进行管理，容易产生安全漏洞。</li><li>各个模块使用同一种技术进行开发，各个模块很难根据实际情况选择更合适的技术框架，局限性很大。</li><li>模块内容过于复杂，如果员工离职，可能需要很长时间才能完成工作交接。</li></ul><p>分布式、集群</p><p>集群：一台服务器无法负荷高并发的数据访问量，那么就设置十台服务器一起分担压力，十台不行就设置一百台（物理层面）。很多人干同一件事情，来分摊压力。</p><p>分布式：将一个复杂问题拆分成若干个简单的小问题，将一个大型的项目架构拆分成若干个微服务来协同完成。（软件设计层面）。将一个庞大的工作拆分成若干个小步骤，分别由不同的人完成这些小步骤，最终将所有的结果进行整合实现大的需求。</p><p>服务治理的核心又三部分组成：服务提供者、服务消费者、注册中心。</p><p>在分布式系统架构中，每个微服务在启动时，将自己的信息存储在注册中心，叫做服务注册。</p><p>服务消费者从注册中心获取服务提供者的网络信息，通过该信息调用服务，叫做服务发现。</p><p>Spring Cloud 的服务治理使用 Eureka 来实现，Eureka 是 Netflix 开源的基于 REST 的服务治理解决方案，Spring Cloud 集成了 Eureka，提供服务注册和服务发现的功能，可以和基于 Spring Boot 搭建的微服务应用轻松完成整合，开箱即用，Spring Cloud Eureka。</p><h3 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h3><ul><li>Eureka Server，注册中心</li><li>Eureka Client，所有要进行注册的微服务通过 Eureka Client 连接到 Eureka Server，完成注册。</li></ul><h3 id="Eureka-Server代码实现"><a href="#Eureka-Server代码实现" class="headerlink" title="Eureka Server代码实现"></a>Eureka Server代码实现</h3><ul><li>创建父工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 解决 JDK 9 以上没有 JAXB API 的问题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在父工程下创建 Module，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml，添加 Eureka Server 相关配置。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>属性说明</p></blockquote><p><code>server.port</code>：当前 Eureka Server 服务端口。</p><p><code>eureka.client.register-with-eureka</code>：是否将当前的 Eureka Server 服务作为客户端进行注册。</p><p><code>eureka.client.fetch-fegistry</code>：是否获取其他 Eureka Server 服务的数据。</p><p><code>eureka.client.service-url.defaultZone</code>：注册中心的访问地址。</p><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解说明：</p></blockquote><p><code>@SpringBootApplication</code>：声明该类是 Spring Boot 服务的入口。</p><p><code>@EnableEurekaServer</code>：声明该类是一个 Eureka Server 微服务，提供服务注册和服务发现功能，即注册中心。</p><h3 id="Eureka-Client-代码实现"><a href="#Eureka-Client-代码实现" class="headerlink" title="Eureka Client 代码实现"></a>Eureka Client 代码实现</h3><ul><li>创建 Module ，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml，添加 Eureka Client 相关配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>属性说明：</p></blockquote><p><code>spring.application.name</code>：当前服务注册在 Eureka Server 上的名称。</p><p><code>eureka.client.service-url.defaultZone</code>：注册中心的访问地址。</p><p><code>eureka.instance.prefer-ip-address</code>：是否将当前服务的 IP 注册到 Eureka Server。</p><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Repository</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>RepositoryImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; studentMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        studentMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        studentMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        studentMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        studentMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentMap.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        studentMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RestTemplate-的使用"><a href="#RestTemplate-的使用" class="headerlink" title="RestTemplate 的使用"></a>RestTemplate 的使用</h3><ul><li>什么是 RestTemplate？</li></ul><p>RestTemplate 是 Spring 框架提供的基于 REST 的服务组件，底层是对 HTTP 请求及响应进行了封装，提供了很多访问 RETS 服务的方法，可以简化代码开发。</p><ul><li>如何使用 RestTemplate？</li></ul><p>1、创建 Maven 工程，pom.xml。</p><p>2、创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">&quot;http://localhost:8010/student/findAll&quot;</span>,Collection.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8010/student/findAll&quot;</span>,Collection.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">&quot;http://localhost:8010/student/findById/&#123;id&#125;&quot;</span>,Student.class,id).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8010/student/findById/&#123;id&#125;&quot;</span>,Student.class,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        restTemplate.postForEntity(<span class="string">&quot;http://localhost:8010/student/save&quot;</span>,student,<span class="keyword">null</span>).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        restTemplate.postForObject(<span class="string">&quot;http://localhost:8010/student/save&quot;</span>,student,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        restTemplate.put(<span class="string">&quot;http://localhost:8010/student/update&quot;</span>,student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        restTemplate.delete(<span class="string">&quot;http://localhost:8010/student/deleteById/&#123;id&#125;&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestTemplateApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务消费者-consumer"><a href="#服务消费者-consumer" class="headerlink" title="服务消费者 consumer"></a>服务消费者 consumer</h3><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">&quot;http://localhost:8010/student/findAll&quot;</span>,Collection.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8010/student/findAll&quot;</span>,Collection.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">&quot;http://localhost:8010/student/findById/&#123;id&#125;&quot;</span>,Student.class,id).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8010/student/findById/&#123;id&#125;&quot;</span>,Student.class,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        restTemplate.postForEntity(<span class="string">&quot;http://localhost:8010/student/save&quot;</span>,student,<span class="keyword">null</span>).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        restTemplate.postForObject(<span class="string">&quot;http://localhost:8010/student/save&quot;</span>,student,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        restTemplate.put(<span class="string">&quot;http://localhost:8010/student/update&quot;</span>,student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        restTemplate.delete(<span class="string">&quot;http://localhost:8010/student/deleteById/&#123;id&#125;&quot;</span>,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h3><p>Spring Cloud 集成了 Zuul 组件，实现服务网关。</p><ul><li>什么是 Zuul？</li></ul><p>Zuul 是 Netflix 提供的一个开源的 API 网关服务器，是客户端和网站后端所有请求的中间层，对外开放一个 API，将所有请求导入统一的入口，屏蔽了服务端的具体实现逻辑，Zuul 可以实现反向代理的功能，在网关内部实现动态路由、身份认证、IP 过滤、数据监控等。</p><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">/p/**</span></span><br></pre></td></tr></table></figure><blockquote><p>属性说明：</p></blockquote><p><code>zuul.routes.provider</code>：给服务提供者 provider 设置映射</p><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解说明：</p></blockquote><p><code>@EnableZuulProxy</code>：包含了 <code>@EnableZuulServer</code>，设置该类是网关的启动类。</p><p><code>@EnableAutoConfiguration</code>：可以帮助 Spring Boot 应用将所有符合条件的 <code>@Configuration</code> 配置加载到当前 Spring Boot 创建并使用的 IoC 容器中。</p><ul><li>Zuul 自带了负载均衡功能，修改 provider 的代码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前端口：&quot;</span>+<span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon 负载均衡"></a>Ribbon 负载均衡</h3><ul><li>什么是 Ribbon？</li></ul><p>Spring Cloud Ribbon 是一个负载均衡解决方案，Ribbon 是 Netflix 发布的负载均衡器，Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的，是一个用于对 HTTP 请求进行控制的负载均衡客户端。</p><p>在注册中心对 Ribbon 进行注册之后，Ribbon 就可以基于某种负载均衡算法，如轮询、随机、加权轮询、加权随机等自动帮助服务消费者调用接口，开发者也可以根据具体需求自定义 Ribbon 负载均衡算法。实际开发中，Spring Cloud Ribbon 需要结合 Spring Cloud Eureka 来使用，Eureka Server 提供所有可以调用的服务提供者列表，Ribbon 基于特定的负载均衡算法从这些服务提供者中选择要调用的具体实例。</p><ul><li>创建 Module，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8040</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ribbon</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RibbonApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@LoadBalanced</code>：声明一个基于 Ribbon 的负载均衡。</p><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ribbon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider/student/findAll&quot;</span>,Collection.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider/student/index&quot;</span>,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><ul><li>什么是 Feign？</li></ul><p>与 Ribbon 一样，Feign 也是由 Netflix 提供的，Feign 是一个声明式、模版化的 Web Service 客户端，它简化了开发者编写 Web 服务客户端的操作，开发者可以通过简单的接口和注解来调用 HTTP API，Spring Cloud Feign，它整合了 Ribbon 和 Hystrix，具有可插拔、基于注解、负载均衡、服务熔断等一系列便捷功能。</p><p>相比较于 Ribbon + RestTemplate 的方式，Feign 大大简化了代码的开发，Feign 支持多种注解，包括 Feign 注解、JAX-RS 注解、Spring MVC 注解等，Spring Cloud 对 Feing 进行了优化，整合了 Ribbon 和 Eureka，从而让 Feign 的使用更加方便。</p><ul><li>Ribbon 和 Feign 的区别</li></ul><p>Ribbon 是一个通用的 HTTP 客户端工具，Feign 是基于 Ribbon 实现的。</p><ul><li>Feign 的tedian</li></ul><p>1、Feign 是一个声明式的 Web Service 客户端。</p><p>2、支持 Feign 注解、Spring MVC 注解、JAX-RS 注解。</p><p>3、Feign 基于 Ribbon 实现，使用起来更加简单。</p><p>4、Feign 集成了 Hystrix，具备服务熔断的功能。</p><ul><li>创建 Module，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8050</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">feign</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建声明式接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignProviderClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.feign.FeignProviderClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FeignProviderClient feignProviderClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignProviderClient.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignProviderClient.index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务熔断，application.yml 添加熔断机制。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8050</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">feign</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>feign.hystrix.enabled</code>：是否开启熔断器。</p><ul><li>创建 FeignProviderClient 接口的实现类 FeignError，定义容错处理逻辑，通过 <code>@Component</code> 注解将 FeignError 实例注入 IoC 容器中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.feign.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.feign.FeignProviderClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignError</span> <span class="keyword">implements</span> <span class="title">FeignProviderClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务器维护中......&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 FeignProviderClient 定义处通过 <code>@FeignClient</code> 的 fallback 属性设置映射。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.feign.impl.FeignError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;provider&quot;,fallback = FeignError.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignProviderClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hystrix-容错机制"><a href="#Hystrix-容错机制" class="headerlink" title="Hystrix 容错机制"></a>Hystrix 容错机制</h3><p>在不改变各个微服务调用关系的前提下，针对错误情况进行预先处理。</p><ul><li>设计原则</li></ul><p>1、服务隔离机制</p><p>2、服务降级机制</p><p>3、熔断机制</p><p>4、提供实时的监控和报警功能</p><p>5、提供实时的配置修改功能</p><p>Hystrix 数据监控需要结合 Spring Boot Actuator 来使用，Actuator 提供了对服务的健康健康、数据统计，可以通过 hystrix.stream 节点获取监控的请求数据，提供了可视化的监控界面。</p><ul><li>创建 Maven，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8060</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;hystrix.stream&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解说明：</p></blockquote><p><code>@EnableCircuitBreaker</code>：声明启用数据监控</p><p><code>@EnableHystrixDashboard</code>：声明启用可视化数据监控</p><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.feign.FeignProviderClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hystrix&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FeignProviderClient feignProviderClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignProviderClient.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignProviderClient.index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动成功之后，访问 <code>http://localhost:8060/actuator/hystrix.stream</code> 可以监控到请求数据，</li><li>访问 <code>http://localhost:8060/hystrix</code>，可以看到可视化的监控界面，输入要监控的地址节点即可看到该节点的可视化数据监控。</li></ul><h3 id="Spring-Cloud-配置中心"><a href="#Spring-Cloud-配置中心" class="headerlink" title="Spring Cloud 配置中心"></a>Spring Cloud 配置中心</h3><p>Spring Cloud Config，通过服务端可以为多个客户端提供配置服务。Spring Cloud Config 可以将配置文件存储在本地，也可以将配置文件存储在远程 Git 仓库，创建 Config Server，通过它管理所有的配置文件。</p><h4 id="本地文件系统"><a href="#本地文件系统" class="headerlink" title="本地文件系统"></a>本地文件系统</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nativeconfigserver</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">native</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">native:</span></span><br><span class="line">          <span class="attr">search-locations:</span> <span class="string">classpath:/shared</span></span><br></pre></td></tr></table></figure><blockquote><p>注解说明</p></blockquote><p><code>profiles.active</code>：配置文件的获取方式</p><p><code>cloud.config.server.native.search-locations</code>：本地配置文件存放的路径</p><ul><li>resources 路径下创建 shared 文件夹，并在此路径下创建 configclient-dev.yml。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line"><span class="attr">foo:</span> <span class="string">foo</span> <span class="string">version</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NativeConfigServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解说明</p></blockquote><p><code>@EnableConfigServer</code>：声明配置中心。</p><h4 id="创建客户端读取本地配置中心的配置文件"><a href="#创建客户端读取本地配置中心的配置文件" class="headerlink" title="创建客户端读取本地配置中心的配置文件"></a>创建客户端读取本地配置中心的配置文件</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建 bootstrap.yml，配置读取本地配置中心的相关信息。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configclient</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8762</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>注解说明</p></blockquote><p><code>cloud.config.uri</code>：本地 Config Server 的访问路径</p><p><code>cloud.config.fail-fase</code>：设置客户端优先判断 Config Server 获取是否正常。</p><p>通过<code>spring.application.name</code> 结合<code>spring.profiles.active</code>拼接目标配置文件名，configclient-dev.yml，去 Config Server 中查找该文件。</p><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConfigClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NativeConfigClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/native&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConfigHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;foo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String foo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.port+<span class="string">&quot;-&quot;</span>+<span class="keyword">this</span>.foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Cloud-Config-远程配置"><a href="#Spring-Cloud-Config-远程配置" class="headerlink" title="Spring Cloud Config 远程配置"></a>Spring Cloud Config 远程配置</h3><ul><li>创建配置文件，上传至 GitHub</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configclient</span></span><br></pre></td></tr></table></figure><ul><li>创建 Config Server，新建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configserver</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/southwind9801/aispringcloud.git</span></span><br><span class="line">          <span class="attr">searchPaths:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-Config-Client"><a href="#创建-Config-Client" class="headerlink" title="创建 Config Client"></a>创建 Config Client</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建 bootstrap.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">configclient</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">configserver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>注解说明</p></blockquote><p><code>spring.cloud.config.name</code>：当前服务注册在 Eureka Server 上的名称，与远程仓库的配置文件名对应。</p><p><code>spring.cloud.config.label</code>：Git Repository  的分支。</p><p><code>spring.cloud.config.discovery.enabled</code>：是否开启 Config 服务发现支持。</p><p><code>spring.cloud.config.discovery.service-id</code>：配置中心在 Eureka Server 上注册的名称。</p><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务跟踪"><a href="#服务跟踪" class="headerlink" title="服务跟踪"></a>服务跟踪</h3><p>Spring Cloud Zipkin</p><p>Zipkin 是一个可以采集并且跟踪分布式系统中请求数据的组件，让开发者可以更加直观的监控到请求在各个微服务所耗费的时间等，Zipkin：Zipkin Server、Zipkin Client。</p><h4 id="创建-Zipkin-Server"><a href="#创建-Zipkin-Server" class="headerlink" title="创建 Zipkin Server"></a>创建 Zipkin Server</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> zipkin.server.internal.EnableZipkinServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipkinApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解说明</p></blockquote><p><code>@EnableZipkinServer</code>：声明启动 Zipkin Server</p><h4 id="创建-Zipkin-Client"><a href="#创建-Zipkin-Client" class="headerlink" title="创建 Zipkin Client"></a>创建 Zipkin Client</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建配置文件 application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zipkinclient</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9090/</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>属性说明</p></blockquote><p><code>spring.sleuth.web.client.enabled</code>：设置开启请求跟踪</p><p><code>spring.sleuth.sampler.probability</code>：设置采样比例，默认是 1.0</p><p><code>srping.zipkin.base-url</code>：Zipkin Server 地址</p><ul><li>创建启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipkinClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/zipkin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="2020/10/19/Spring/Spring%20Boot%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/19/Spring/Spring%20Boot%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/image-20201108171250539.png" alt="image-20201108171250539"></p><h2 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h2><p>Spring Boot 是一个快速开发框架，可以迅速搭建出一套基于 Spring 框架体系的应用，是 Spring Cloud 的基础。</p><p>Spring Boot 开启了各种自动装配，从而简化代码的开发，不需要编写各种配置文件，只需要引入相关依赖就可以迅速搭建一个应用。</p><ul><li>特点</li></ul><p>1、不需要 web.xml</p><p>2、不需要 springmvc.xml</p><p>3、不需要 tomcat，Spring Boot 内嵌了 tomcat</p><p>4、不需要配置 JSON 解析，支持 REST 架构</p><p>5、个性化配置非常简单</p><h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><p>我们在使用SpringBoot过程中只需要导入Starter依赖并在yml或properties文件上做相关配置即可直接上手使用。</p><p>这背后的实现方式便是所谓的自动装配。</p><p>自动装配的原理从容器启动开始讲解</p><p>首先我们项目中需要有一个启动类，项目执行只需调用启动类的main（）方法即可。</p><p>具体执行过程：</p><ol><li>创建SpringApplication应用。</li><li>注意在创建过程中会读取<code>spring.factories</code>文件的内容，并放到本地缓存中方便后续获取。同时进行初始化器、监听器的创建。</li><li>执行run方法</li><li>核心步骤包括prepareContext()、refreshContext()</li><li>prepareContext 针对上下文做初始化。有一个重要方法load，他会将启动类作为一个BeanDefinition注册到Registry中，方便后续对启动类的注解进行解析。</li><li>refreshContext 进行整个容器的刷新过程。自动装配主要依赖其中的invokeBeanFactoryPostProcessor方法，此方法主要针对ConfigurationClassPostProcessor类的处理，调用时会解析各种类型的注解包括@ComponentScan、@Bean、@Import等。</li><li>在解析@Import过程中会从主类开始递归解析所有Import注解，@SpringBootApplication中的其中一个Import导入了AutoConfigurationImportSelector类，执行该类的process方法实现EnableAutoConfiguration类的加载。</li></ol><h2 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h2><p>已知A依赖B，B依赖A，A、B都是单例的，此时就出现了循环依赖问题。那么Spring又是如何处理这类循环依赖问题的呢？</p><p>有搞清楚这个问题之前我们首先需要知道Spring的生命周期。</p><h4 id="Spring生命周期"><a href="#Spring生命周期" class="headerlink" title="Spring生命周期"></a>Spring生命周期</h4><ol><li>BeanFactory创建</li><li>包扫描并生成对应BeanDefinition放到BeanDefinitionMap中。</li><li>BeanFactoryPostProcessor 后置处理</li><li>Bean实例化</li><li>Bean属性填充 populateBean</li><li>aware接口调用</li><li>执行初始化方法</li><li>初始化前后通过BeanPostProcessor处理</li><li>销毁bean</li></ol><h4 id="循环依赖解决流程"><a href="#循环依赖解决流程" class="headerlink" title="循环依赖解决流程"></a>循环依赖解决流程</h4><p>我们重点关注Bean的初始化过程。</p><p>首先我们通过BeanDefinition获取对应BeanName。</p><p>getBean：检查一级缓存（SingletonObjects）中是否存在对应的Bean（检测bean是否已经创建）。</p><p>createBean：若没有则反射获取对应Bean（未完成属性注入）</p><p>生成三级缓存回调方法getEarlyBeanReference（一般用于将普通对象转化为代理对象）</p><p>进行属性注入populateBean：同样的读取需要注入的依赖对象，通过BeanFactory.getBean()方法实现容器中查找该对象是不是已经创建完毕了。没有的话创建该对象。</p><p>依赖对象创建过程同样需要注入依赖循环的对象。此时继续通过BeanFactory.getBean()方法实现容器中查找该对象。</p><p>此时待注入的对象会通过三级缓存的objectFactory回调方法来调用后置处理器方法（普通对象可能转为代理对象）</p><p>回调方法返回的对象放入二级缓存中并返回作为最终完成品。</p><p>此时注入的对象直接从二级缓存中可以获取到。</p><p>对象创建完毕后保存一级缓存，删除二级三级缓存。</p><p>initialBean流程调用aware方法</p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p><strong>三级缓存作用或者说为什么要包装一层<code>ObjectFactory</code>对象？</strong></p><p>如果创建的<code>Bean</code>有对应的<code>代理</code>，那其他对象注入时，注入的应该是对应的<code>代理对象</code>；但是<code>Spring</code>无法提前知道这个对象是不是有<code>循环依赖</code>的情况，而<code>正常情况</code>下（没有<code>循环依赖</code>情况），<code>Spring</code>都是在创建好<code>完成品Bean</code>之后才创建对应的<code>代理</code>。这时候<code>Spring</code>有两个选择：</p><ol><li>不管有没有<code>循环依赖</code>，都<code>提前</code>创建好<code>代理对象</code>，并将<code>代理对象</code>放入缓存，出现<code>循环依赖</code>时，其他对象直接就可以取到代理对象并注入。</li><li>不提前创建好代理对象，在出现<code>循环依赖</code>被其他对象注入时，才实时生成<code>代理对象</code>。这样在没有<code>循环依赖</code>的情况下，<code>Bean</code>就可以按着<code>Spring设计原则</code>的步骤来创建。</li></ol><p><code>Spring</code>选择了第二种方式，那怎么做到提前曝光对象而又不生成代理呢？<br>Spring就是在对象外面包一层<code>ObjectFactory</code>，提前曝光的是<code>ObjectFactory</code>对象，在被注入时才在<code>ObjectFactory.getObject</code>方式内实时生成代理对象，并将生成好的代理对象放入到第二级缓存</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000023647227">https://segmentfault.com/a/1190000023647227</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="2020/10/19/Spring/Spring%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/19/Spring/Spring%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/xinyang2233/blog-images/raw/master/20201208161747.png" alt=""></p><h3 id="Spring-框架两大核心机制（IoC、AOP）"><a href="#Spring-框架两大核心机制（IoC、AOP）" class="headerlink" title="Spring 框架两大核心机制（IoC、AOP）"></a>Spring 框架两大核心机制（IoC、AOP）</h3><ul><li>IoC（控制反转）/ DI（依赖注入）</li><li>AOP（面向切面编程）</li></ul><p>Spring 是一个企业级开发框架，是软件设计层面的框架，优势在于可以将应用程序进行分层，开发者可以自主选择组件。</p><p>MVC：Struts2、Spring MVC</p><p>ORMapping：Hibernate、MyBatis、Spring Data</p><h3 id="如何使用-IoC"><a href="#如何使用-IoC" class="headerlink" title="如何使用 IoC"></a>如何使用 IoC</h3><ul><li>创建 Maven 工程，pom.xml 添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.southwind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aispringioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建实体类 Student</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>传统的开发方式，手动 new Student</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="number">1L</span>);</span><br><span class="line">student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">22</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><ul><li>通过 IoC 创建对象，在配置文件中添加需要管理的对象，XML 格式的配置文件，文件名可以自定义。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>从 IoC 中获取对象，通过 id 获取。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li><p>通过配置 <code>bean</code> 标签来完成对象的管理。</p><ul><li><p><code>id</code>：对象名。</p></li><li><p><code>class</code>：对象的模版类（所有交给 IoC 容器来管理的类必须有无参构造函数，因为 Spring 底层是通过反射机制来创建对象，调用的是无参构造）</p></li></ul></li><li><p>对象的成员变量通过 <code>property</code> 标签完成赋值。</p><ul><li><code>name</code>：成员变量名。</li><li><code>value</code>：成员变量值（基本数据类型，String 可以直接赋值，如果是其他引用类型，不能通过 value 赋值）</li><li><code>ref</code>：将 IoC 中的另外一个 bean 赋给当前的成员变量（DI）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="IoC-底层原理"><a href="#IoC-底层原理" class="headerlink" title="IoC 底层原理"></a>IoC 底层原理</h3><ul><li>读取配置文件，解析 XML。</li><li>通过反射机制实例化配置文件中所配置所有的 bean。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(<span class="string">&quot;./src/main/resources/&quot;</span>+path);</span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            Iterator&lt;Element&gt; iterator = root.elementIterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                Element element = iterator.next();</span><br><span class="line">                String id = element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String className = element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="comment">//通过反射机制创建对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">//获取无参构造函数，创建目标对象</span></span><br><span class="line">                Constructor constructor = clazz.getConstructor();</span><br><span class="line">                Object object = constructor.newInstance();</span><br><span class="line">                <span class="comment">//给目标对象赋值</span></span><br><span class="line">                Iterator&lt;Element&gt; beanIter = element.elementIterator();</span><br><span class="line">                <span class="keyword">while</span>(beanIter.hasNext())&#123;</span><br><span class="line">                    Element property = beanIter.next();</span><br><span class="line">                    String name = property.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    String valueStr = property.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    String ref = property.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(ref == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        String methodName = <span class="string">&quot;set&quot;</span>+name.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+name.substring(<span class="number">1</span>);</span><br><span class="line">                        Field field = clazz.getDeclaredField(name);</span><br><span class="line">                        Method method = clazz.getDeclaredMethod(methodName,field.getType());</span><br><span class="line">                        <span class="comment">//根据成员变量的数据类型将 value 进行转换</span></span><br><span class="line">                        Object value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;long&quot;</span>)&#123;</span><br><span class="line">                            value = Long.parseLong(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;java.lang.String&quot;</span>)&#123;</span><br><span class="line">                            value = valueStr;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;int&quot;</span>)&#123;</span><br><span class="line">                            value = Integer.parseInt(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        method.invoke(object,value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(id,object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过运行时类获取-bean"><a href="#通过运行时类获取-bean" class="headerlink" title="通过运行时类获取 bean"></a>通过运行时类获取 bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(Student.class);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><p>这种方式存在一个问题，配置文件中一个数据类型的对象只能有一个实例，否则会抛出异常，因为没有唯一的 bean。</p><h3 id="通过有参构造创建-bean"><a href="#通过有参构造创建-bean" class="headerlink" title="通过有参构造创建 bean"></a>通过有参构造创建 bean</h3><ul><li>在实体类中创建对应的有参构造函数。</li><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="给-bean-注入集合"><a href="#给-bean-注入集合" class="headerlink" title="给 bean 注入集合"></a>给 bean 注入集合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高新区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope 作用域"></a>scope 作用域</h3><p>Spring 管理的 bean 是根据 scope 来生成的，表示 bean 的作用域，共4种，默认值是 singleton。</p><ul><li>singleton：单例，表示通过 IoC 容器获取的 bean 是唯一的。</li><li>prototype：原型，表示通过 IoC 容器获取的 bean 是不同的。</li><li>request：请求，表示在一次 HTTP 请求内有效。</li><li>session：回话，表示在一个用户会话内有效。</li></ul><p>request 和 session 只适用于 Web 项目，大多数情况下，使用单例和原型较多。</p><p>prototype 模式当业务代码获取 IoC 容器中的 bean 时，Spring 才去调用无参构造创建对应的 bean。</p><p>singleton 模式无论业务代码是否获取 IoC 容器中的 bean，Spring 在加载 spring.xml 时就会创建 bean。</p><h3 id="Spring-的继承"><a href="#Spring-的继承" class="headerlink" title="Spring 的继承"></a>Spring 的继承</h3><p>与 Java 的继承不同，Java 是类层面的继承，子类可以继承父类的内部结构信息；Spring 是对象层面的继承，子对象可以继承父对象的属性值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高新区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;student2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring 的继承关注点在于具体的对象，而不在于类，即不同的两个类的实例化对象可以完成继承，前提是子对象必须包含父对象的所有属性，同时可以在此基础上添加其他的属性。</p><h3 id="Spring-的依赖"><a href="#Spring-的依赖" class="headerlink" title="Spring 的依赖"></a>Spring 的依赖</h3><p>与继承类似，依赖也是描述 bean 和 bean 之间的一种关系，配置依赖之后，被依赖的 bean 一定先创建，再创建依赖的 bean，A 依赖于 B，先创建 B，再创建 A。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-的-p-命名空间"><a href="#Spring-的-p-命名空间" class="headerlink" title="Spring 的 p 命名空间"></a>Spring 的 p 命名空间</h3><p>p 命名空间是对 IoC / DI 的简化操作，使用 p 命名空间可以更加方便的完成 bean 的配置以及 bean 之间的依赖注入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">p:address-ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-的工厂方法"><a href="#Spring-的工厂方法" class="headerlink" title="Spring 的工厂方法"></a>Spring 的工厂方法</h3><p>IoC 通过工厂模式创建 bean 的方式有两种：</p><ul><li>静态工厂方法</li><li>实例工厂方法</li></ul><blockquote><p>静态工厂方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">&quot;宝马&quot;</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">&quot;奔驰&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置静态工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.factory.StaticCarFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实例工厂方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceCarFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">&quot;宝马&quot;</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">&quot;奔驰&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例工厂 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;carFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.factory.InstanceCarFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 赔偿实例工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;carFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IoC-自动装载（Autowire）"><a href="#IoC-自动装载（Autowire）" class="headerlink" title="IoC 自动装载（Autowire）"></a>IoC 自动装载（Autowire）</h3><p>IoC 负责创建对象，DI 负责完成对象的依赖注入，通过配置 property 标签的 ref 属性来完成，同时 Spring 提供了另外一种更加简便的依赖注入方式：自动装载，不需要手动配置 property，IoC 容器会自动选择 bean 完成注入。</p><p>自动装载有两种方式：</p><ul><li>byName：通过属性名自动装载</li><li>byType：通过属性的数据类型自动装载</li></ul><blockquote><p>byName</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宝马&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>byType</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;奔驰&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>byType 需要注意，如果同时存在两个及以上的符合条件的 bean 时，自动装载会抛出异常。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP：Aspect Oriented Programming 面向切面编程。</p><p>AOP 的优点：</p><ul><li>降低模块之间的耦合度。</li><li>使系统更容易扩展。</li><li>更好的代码复用。</li><li>非业务代码更加集中，不分散，便于统一管理。</li><li>业务代码更加简洁存粹，不参杂其他代码的影响。</li></ul><p>AOP 是对面向对象编程的一个补充，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面编程。将不同方法的同一个位置抽象成一个切面对象，对该切面对象进行编程就是 AOP。</p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ul><li>创建 Maven 工程，pom.xml 添加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建一个计算器接口 Cal，定义4个方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建接口的实现类 CalImpl。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，日志信息和业务逻辑的耦合性很高，不利于系统的维护，使用 AOP 可以进行优化，如何来实现 AOP？使用动态代理的方式来实现。</p><p>给业务代码找一个代理，打印日志信息的工作交个代理来做，这样的话业务代码就只需要关注自身的业务即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收委托对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">&quot;方法的参数是：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        Object result = method.invoke(<span class="keyword">this</span>.object,args);</span><br><span class="line">        System.out.println(method.getName()+<span class="string">&quot;的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是通过动态代理实现 AOP 的过程，比较复杂，不好理解，Spring 框架对 AOP 进行了封装，使用 Spring 框架可以用面向对象的思想来实现 AOP。</p><p>Spring 框架中不需要创建 InvocationHandler，只需要创建一个切面对象，将所有的非业务代码在切面对象中完成即可，Spring 框架底层会自动根据切面类以及目标类生成一个代理对象。</p><p>LoggerAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String args = Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的参数是：&quot;</span>+ args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的结果是&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法抛出异常：&quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoggerAspect 类定义处添加的两个注解：</p><ul><li><code>@Aspect</code>：表示该类是切面类。</li><li><code>@Component</code>：将该类的对象注入到 IoC 容器。</li></ul><p>具体方法处添加的注解：</p><p><code>@Before</code>：表示方法执行的具体位置和时机。</p><p>CalImpl 也需要添加 <code>@Component</code>，交给 IoC 容器来管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring.xml 中配置 AOP。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是Aspect注解生效，为目标类自动生成代理对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>context:component-scan</code> 将 <code>com.southwind</code> 包中的所有类进行扫描，如果该类同时添加了 <code>@Component</code>，则将该类扫描到 IoC 容器中，即 IoC 管理它的对象。</p><p><code>aop:aspectj-autoproxy</code> 让 Spring 框架结合切面类和目标类自动生成动态代理对象。</p><ul><li>切面：横切关注点被模块化的抽象对象。</li><li>通知：切面对象完成的工作。</li><li>目标：被通知的对象，即被横切的对象。</li><li>代理：切面、通知、目标混合之后的对象。</li><li>连接点：通知要插入业务代码的具体位置。</li><li>切点：AOP 通过切点定位到连接点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随记</title>
      <link href="2020/10/19/%E5%85%B6%E4%BB%96/%E9%9A%8F%E8%AE%B0/"/>
      <url>2020/10/19/%E5%85%B6%E4%BB%96/%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>2020/10/19</li></ul><blockquote><p>网上看到一首诗感觉好有趣：</p><p>题目：我发现</p><p>我发现</p><p>老鼠偷东西</p><p>只是人类的说法</p><p>在老鼠那里</p><p>这叫觅食</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模运算</title>
      <link href="2020/10/18/%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
      <url>2020/10/18/%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h2><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><p>模运算的基本规则与四则运算基本一致：</p><ul><li><p>(a + b) % p = (a % p + b % p) % p </p></li><li><p>(a – b) % p = (a % p – b % p) % p</p></li><li><p>(a <em> b) % p = (a % p </em> b % p) % p</p></li><li><p>(a^b) % p = ((a % p)^b) % p</p></li></ul><p>这里没有除法的模运算是因为除法取模较为特殊。</p><h4 id="除法取模"><a href="#除法取模" class="headerlink" title="除法取模"></a>除法取模</h4><blockquote><p>除法取模首先需要知道小费马定理。</p></blockquote><ul><li><p>小费马定理</p><ul><li><p><strong>乘法逆元</strong></p><p>定义： 对于整数a,p且gcd(a,p)==1，则一定存在唯一一个b满足a*b≡1(mod p)。</p></li><li><p><strong>若p是质数，且p与a互质，有等式:</strong></p></li></ul></li></ul><script type="math/tex; mode=display">  \begin{split}  &(1).a^{p-1}\%p == 1\%p\\  &(2).a^{p-2}\%p==\frac{1}{a}\%p\\  &2中的右式其实就是b的乘法逆元。  \end{split}</script><p>   转化后：</p><script type="math/tex; mode=display">  \begin{split}  &两边同除以a\Rightarrow\frac{b}{a}\%p == b*a^{p-2}\%p\\  &此时我们得到所求的\frac{b}{a}的模就是b*a^{p-2}的模  \end{split}</script><p>  此时我们就将分数求模问题转化为了乘法求模，同时也是求b的乘法逆元问题。</p><p>  同时若p值较大，则要用到高次幂求模。</p><p>  代码</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分数求模</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b)==<span class="number">2</span>)<span class="comment">//表示b/a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (power_mod(a,mod<span class="number">-2</span>,mod))*b%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>高次幂求模</p><p>传统方法当然就是依次相乘，显然当p很大时，耗时也会很大。</p><p>也就是说问题是出在p值太大的情况上，此时我们想到能否将p值缩小，将高次幂指数运算转化为多个低次幂的指数运算乘积。</p><p>通过位运算的方法可以很好地解决这个问题：</p><script type="math/tex; mode=display">\begin{split}&假设我们求2^{10}这个数的值，我们可以将10的二进制数表示出来：1010。\\&此时我们可以根据位上为1的数的权值对这个指数进行拆分：2^{10}=2^{10}*2^{1000}=2^2*2^8\\&显然上面的等式成立，而此时我们只需遍历最多4次即可（指数的二进制位数）。\end{split}</script><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> base = a%c;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = (ans*base)%c;</span><br><span class="line">        base = (base*base)%c;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><blockquote><p>链接：<a href="https://ac.nowcoder.com/acm/contest/275/A">https://ac.nowcoder.com/acm/contest/275/A</a><br>来源：牛客网</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>你在一栋楼房下面，楼房一共有n层，第i层每秒有pi的概率会扔下一个东西并砸到你<br> 求第一秒内你被砸到的概率</p><h5 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数n</span><br><span class="line">之后有n行，第i+1行有两个整数ai,bi，表示pi&#x3D;aibip_i&#x3D;\frac&#123;a_i&#125;&#123;b_i&#125;pi&#x3D;biai</span><br></pre></td></tr></table></figure><h5 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设答案为pq\frac&#123;p&#125;&#123;q&#125;qp，你只需要找到一个最小的非负整数T，使得T≡p×q−1( mod 1000000007)T \equiv p \times q^&#123;-1&#125; (\bmod 1000000007)T≡p×q−1(mod1000000007)</span><br><span class="line">输出这个T就行了</span><br></pre></td></tr></table></figure><p>示例1</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">750000006</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        ans=(ans*(b-a)% mod)*(power_mod(b,mod<span class="number">-2</span>,mod))%mod;<span class="comment">//不可能的概率</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (<span class="number">1</span>+mod-ans)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取模 </tag>
            
            <tag> 小费马定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解最大公约数问题</title>
      <link href="2020/10/18/%E7%AE%97%E6%B3%95/%E6%B1%82%E8%A7%A3%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
      <url>2020/10/18/%E7%AE%97%E6%B3%95/%E6%B1%82%E8%A7%A3%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="最大公约数求解"><a href="#最大公约数求解" class="headerlink" title="最大公约数求解"></a>最大公约数求解</h2><blockquote><p>我们在做很多题目往往会用到求解两数的最大公约数，但通常的思路是暴力枚举所有的数，这样的方法造成的时间复杂度往往使我们所不能接受的，这里给出两种gcd解法。</p></blockquote><h4 id="一、更相减损"><a href="#一、更相减损" class="headerlink" title="一、更相减损"></a>一、更相减损</h4><ul><li><p>思路</p><p>假设有两个数分别为a、b，其中a&lt;b.则求解a和b的最大公约数等价于求解（a-b）和b的最大公约数。</p><p>依据这一思路，我们就可以通过递归求解出我们需要的解。</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        gcd1(a-b,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        gcd1(b-a,a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二、辗转相除"><a href="#二、辗转相除" class="headerlink" title="二、辗转相除"></a>二、辗转相除</h4><ul><li><p>思路</p><p>假设有两个数分别为a、b，其中a&lt;b.则求解a和b的最大公约数等价于求解（b%a）和a的最大公约数。</p><p>我们观察到原来的(b-a)变成了(b%a)，明显提高了数字降下的速度，可见辗转相除更像是第一种方法的一个优化，极大降低了时间复杂度。</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        gcd2(y,x%y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> y;</span><br><span class="line">        gcd2(x,y%x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将子数组重新排序得到同一个二叉查找树的方案数</title>
      <link href="2020/10/17/%E7%AE%97%E6%B3%95/1569.%20%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/"/>
      <url>2020/10/17/%E7%AE%97%E6%B3%95/1569.%20%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1569-将子数组重新排序得到同一个二叉查找树的方案数"><a href="#1569-将子数组重新排序得到同一个二叉查找树的方案数" class="headerlink" title="1569. 将子数组重新排序得到同一个二叉查找树的方案数"></a><a href="https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/">1569. 将子数组重新排序得到同一个二叉查找树的方案数</a></h4><p>给你一个数组 <code>nums</code> 表示 <code>1</code> 到 <code>n</code> 的一个排列。我们按照元素在 <code>nums</code> 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 <code>nums</code> 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 <code>nums</code> 原本数字顺序得到的二叉查找树相同。</p><p>比方说，给你 <code>nums = [2,1,3]</code>，我们得到一棵 2 为根，1 为左孩子，3 为右孩子的树。数组 <code>[2,3,1]</code> 也能得到相同的 BST，但 <code>[3,2,1]</code> 会得到一棵不同的 BST 。</p><p>请你返回重排 <code>nums</code> 后，与原数组 <code>nums</code> 得到相同二叉查找树的方案数。</p><p>由于答案可能会很大，请将结果对 <code>10^9 + 7</code> 取余数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/bb.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [2,1,3]</span><br><span class="line">输出：1</span><br><span class="line">解释：我们将 nums 重排， [2,3,1] 能得到相同的 BST 。没有其他得到相同 BST 的方案了。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/ex1.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,4,5,1,2]</span><br><span class="line">输出：5</span><br><span class="line">解释：下面 5 个数组会得到相同的 BST：</span><br><span class="line">[3,1,2,4,5]</span><br><span class="line">[3,1,4,2,5]</span><br><span class="line">[3,1,4,5,2]</span><br><span class="line">[3,4,1,2,5]</span><br><span class="line">[3,4,1,5,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/ex4.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：0</span><br><span class="line">解释：没有别的排列顺序能得到相同的 BST 。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/abc.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,1,2,5,4,6]</span><br><span class="line">输出：19</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]</span><br><span class="line">输出：216212978</span><br><span class="line">解释：得到相同 BST 的方案数是 3216212999。将它对 10^9 + 7 取余后得到 216212978。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li><li><code>nums</code> 中所有数 <strong>互不相同</strong> 。</li></ul><ul><li><p>思路</p><p>规律不难找，无非根据二叉查找树的性质，即左子树都小于根，右子树都大于根。一开始根就是第一个数，我们只需将小于根的数归为一边，作为左子树left，大于根的数归为另一边作为右子树right。再对两边进行组合即可，前提是分别保持两边顺序不变。</p><p>想一下在保证左、右边的数的顺序都不变的情况下，数的组合情况有多少种？</p><p>设左边的数有n个，右边数有m个,n&gt;=m,则：</p><script type="math/tex; mode=display">两边组合在一起的所有可能： {n+m\choose m}</script><p>这时我们发现这里需要用到计算组合数的方法。我们可以通过组合数的性质，打表计算出所有组合数的值：</p><script type="math/tex; mode=display">{n+1 \choose k}={n \choose k}+{n \choose k-1}</script><p>既然第一个数为根时的所有组合情况都计算出了，那么我们不难想到递归每一层的组合数，然后将这些数都相乘即可。</p></li></ul><blockquote><p>事实上这道题我们很容易忽略计算过程中的取余，由于组合数一般可以很大，所以每次相乘处我们都应注意对乘积取余，防止下次乘积时值溢出。</p></blockquote><p>​        其实对于这样的组合取余，还有更优的解法，我会在后续阶段加入补充。</p><ul><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> com[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfWays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        com[<span class="number">1</span>][<span class="number">0</span>]=com[<span class="number">1</span>][<span class="number">1</span>]=com[<span class="number">0</span>][<span class="number">0</span>]=com[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            com[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            com[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                com[i][j]=(com[i<span class="number">-1</span>][j]+com[i<span class="number">-1</span>][j<span class="number">-1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a=(tracback(nums)<span class="number">-1</span>)%mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">combination</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>,ans2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=x;i&gt;=x-y+<span class="number">1</span>;i--)&#123;</span><br><span class="line">            ans=ans*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=y;i++) ans2=ans2*i;</span><br><span class="line">        <span class="keyword">return</span> ans/ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">tracback</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">0</span>]) &#123;</span><br><span class="line">                n++;</span><br><span class="line">                q.push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                m++;</span><br><span class="line">                p.push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> tracback(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n!=<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> tracback(q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=n;</span><br><span class="line">            n=m;</span><br><span class="line">            m=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ad=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mm=m;</span><br><span class="line">        ad=com[n+m][m];</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> e=tracback(q)%mod;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> r=tracback(p)%mod;</span><br><span class="line">        ad=ad%mod;</span><br><span class="line">        ad = ad*e%mod;</span><br><span class="line">        ad = ad*r%mod;</span><br><span class="line">        <span class="keyword">return</span> ad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 取余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N皇后问题</title>
      <link href="2020/10/17/%E7%AE%97%E6%B3%95/52.%20N%E7%9A%87%E5%90%8E%20II/"/>
      <url>2020/10/17/%E7%AE%97%E6%B3%95/52.%20N%E7%9A%87%E5%90%8E%20II/</url>
      
        <content type="html"><![CDATA[<h4 id="52-N皇后-II"><a href="#52-N皇后-II" class="headerlink" title="52. N皇后 II"></a><a href="https://leetcode-cn.com/problems/n-queens-ii/">52. N皇后 II</a></h4><p><em>n</em> 皇后问题研究的是如何将 <em>n</em> 个皇后放置在 <em>n</em>×<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="img"></p><p>上图为 8 皇后问题的一种解法。</p><p>给定一个整数 <em>n</em>，返回 <em>n</em> 皇后不同的解决方案的数量。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 4 皇后问题存在如下两个不同的解法。</span><br><span class="line">[</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; 解法 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; 解法 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>思路</p><p>经典问题，为优化空间可使用位运算。我们遍历每行，又因每行需满足的条件都相同：</p><ol><li><p>与前面行不能同列</p></li><li><p>与前面行不能同斜</p></li></ol><p>第一个条件只需将当前行与之前行进行与运算即可解决。(now &amp; pre ? true : false)</p><p>第二个条件观察可发现有两种情况，分别为倾斜率相反的时候。两种情况都满足:</p></li></ul><script type="math/tex; mode=display">|X_{now}-X_{pre}|==|Y_{now}-Y_{pre}|</script><p>​        因此遍历每行的操作可以用回溯来完成。</p><ul><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> N;<span class="comment">//n</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xx;<span class="comment">//记录每行选中点的横坐标</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//等最终抵达终点数，及所有可行的组合数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tracback</span><span class="params">(<span class="keyword">int</span> state,<span class="keyword">int</span> d)</span></span>&#123;<span class="comment">//状态和当前遍历行数或深度</span></span><br><span class="line">        <span class="keyword">if</span>(d==N)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            <span class="keyword">if</span>(s&amp;state) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> dd=d<span class="number">-1</span>,jud=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//依次遍历之前行，若符合这两种情况则跳过。</span></span><br><span class="line">            <span class="keyword">while</span>(dd&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(i-xx[dd])==<span class="built_in">abs</span>(d-dd))&#123;</span><br><span class="line">                    jud=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dd--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(jud) <span class="keyword">continue</span>;</span><br><span class="line">            xx[d]=i;</span><br><span class="line">            tracback(s|state,d+<span class="number">1</span>);</span><br><span class="line">            xx[d]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        N=n;</span><br><span class="line">        xx=<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            xx[<span class="number">0</span>]=i;</span><br><span class="line">            tracback(s,<span class="number">1</span>);</span><br><span class="line">            xx[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使陆地分离的最少天数</title>
      <link href="2020/10/16/%E7%AE%97%E6%B3%95/1568.%20%E4%BD%BF%E9%99%86%E5%9C%B0%E5%88%86%E7%A6%BB%E7%9A%84%E6%9C%80%E5%B0%91%E5%A4%A9%E6%95%B0/"/>
      <url>2020/10/16/%E7%AE%97%E6%B3%95/1568.%20%E4%BD%BF%E9%99%86%E5%9C%B0%E5%88%86%E7%A6%BB%E7%9A%84%E6%9C%80%E5%B0%91%E5%A4%A9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1568-使陆地分离的最少天数"><a href="#1568-使陆地分离的最少天数" class="headerlink" title="1568. 使陆地分离的最少天数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/">1568. 使陆地分离的最少天数</a></h4><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1</code> （陆地）连接形成。</p><p>如果 <strong>恰好只有一座岛屿</strong> ，则认为陆地是 <strong>连通的</strong> ；否则，陆地就是 <strong>分离的</strong> 。</p><p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p><p>返回使陆地分离的最少天数。</p><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/1926_island.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[0,1,1,0],[0,1,1,0],[0,0,0,0]]</span><br><span class="line">输出：2</span><br><span class="line">解释：至少需要 2 天才能得到分离的陆地。</span><br><span class="line">将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,1]]</span><br><span class="line">输出：2</span><br><span class="line">解释：如果网格中都是水，也认为是分离的 ([[1,1]] -&gt; [[0,0]])，0 岛屿。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,0,1,0]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,1,0,1,1],</span><br><span class="line">             [1,1,1,1,1],</span><br><span class="line">             [1,1,0,1,1],</span><br><span class="line">             [1,1,0,1,1]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><hr><ul><li>思路</li></ul><p>根据题意不难看出答案就三种可能0、1、2.</p><p>1、输出为0时第一时间想到的是并查集，只要将每块陆地作为一个点，共用m*n个点，因为n和m的值都比较小最大只有30，所有可以考虑这种方法。</p><p>2、输出为1、2时的情况直接暴力求解。我们只需模拟1的情况便可判断2的情况。及依次遍历所有的陆地，分别模拟去当前点后的并查集集合数量，同上述1方法只是这里返回为1。若无返回则返回为2。</p><p>其实这里说的方法2就是一种暴力枚举的方法，仅因数据量小才可用。更优的方法是考虑割点数量。割点数若为1则输出为1，大于1则输出2。用这种方法我们只需dfs遍历一次所有点的即可。常用的判断割点数量的方法可以选用targan算法。</p><ul><li><p>代码</p><p>这里是我当时写的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,m,N;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p[u] == u ? u : p[u] = find(p[u]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jud</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; grid)</span></span>&#123;</span><br><span class="line">        p = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!grid[i][j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> u = i * m + j;</span><br><span class="line">                <span class="keyword">if</span> (p[u] == <span class="number">-1</span>)</span><br><span class="line">                    p[u] = u;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> ni = i + dy[k], nj = j + dx[k];</span><br><span class="line">                    <span class="keyword">if</span> (ni &lt; <span class="number">0</span> || ni &gt;= n || nj &lt; <span class="number">0</span> || nj &gt;= m || !grid[ni][nj])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">int</span> v = ni * m + nj;</span><br><span class="line">                    <span class="keyword">if</span> (p[v] == <span class="number">-1</span>)</span><br><span class="line">                        p[v] = v;</span><br><span class="line">                    <span class="keyword">int</span> pu = find(u), pv = find(v);</span><br><span class="line">                    <span class="keyword">if</span> (pu == pv) <span class="keyword">continue</span>;</span><br><span class="line">                    p[pv] = pu;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">int</span> components = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i] != <span class="number">-1</span> &amp;&amp; i == find(i))</span><br><span class="line">                components++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (components &gt;= <span class="number">2</span> || components == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        n = grid.size(), m = grid[<span class="number">0</span>].size();</span><br><span class="line">        N = n * m;</span><br><span class="line">        <span class="keyword">if</span>(jud(grid)==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j])&#123;</span><br><span class="line">                    grid[i][j]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(jud(grid)==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    grid[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>targan模板记录一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TarjanSCC</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; low, dfn, fa;</span><br><span class="line">    <span class="keyword">int</span> timestamp = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Tarjan 算法求解割点模板</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getCuttingVertex</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> parent, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        low[u] = dfn[u] = ++timestamp;</span><br><span class="line">        fa[u] = parent;</span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> iscv = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                ++child;</span><br><span class="line">                getCuttingVertex(v, u, ans);</span><br><span class="line">                low[u] = min(low[u], low[v]);</span><br><span class="line">                <span class="keyword">if</span> (!iscv &amp;&amp; parent != <span class="number">-1</span> &amp;&amp; low[v] &gt;= dfn[u]) &#123;</span><br><span class="line">                    ans.push_back(u);</span><br><span class="line">                    iscv = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">                low[u] = min(low[u], dfn[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!iscv &amp;&amp; parent == <span class="number">-1</span> &amp;&amp; child &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            ans.push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TarjanSCC(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; _edges): edges(_edges), n(_edges.size()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        low.assign(n, <span class="number">-1</span>);</span><br><span class="line">        dfn.assign(n, <span class="number">-1</span>);</span><br><span class="line">        fa.assign(n, <span class="number">-1</span>);</span><br><span class="line">        timestamp = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// cutting vertices 存储割点</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cvs;</span><br><span class="line">        <span class="comment">// connected components count 存储连通分量个数</span></span><br><span class="line">        <span class="keyword">int</span> cccnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                ++cccnt;</span><br><span class="line">                getCuttingVertex(i, <span class="number">-1</span>, cvs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果连通分量个数大于 1，答案为 0</span></span><br><span class="line">        <span class="keyword">if</span> (cccnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果存在割点，答案为 1</span></span><br><span class="line">        <span class="keyword">if</span> (!cvs.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> targan </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计子树中城市之间最大距离</title>
      <link href="2020/10/14/%E7%AE%97%E6%B3%95/1617.%20%E7%BB%9F%E8%AE%A1%E5%AD%90%E6%A0%91%E4%B8%AD%E5%9F%8E%E5%B8%82%E4%B9%8B%E9%97%B4%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/"/>
      <url>2020/10/14/%E7%AE%97%E6%B3%95/1617.%20%E7%BB%9F%E8%AE%A1%E5%AD%90%E6%A0%91%E4%B8%AD%E5%9F%8E%E5%B8%82%E4%B9%8B%E9%97%B4%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1617-统计子树中城市之间最大距离"><a href="#1617-统计子树中城市之间最大距离" class="headerlink" title="1617. 统计子树中城市之间最大距离"></a><a href="https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/">1617. 统计子树中城市之间最大距离</a></h4><p>给你 <code>n</code> 个城市，编号为从 <code>1</code> 到 <code>n</code> 。同时给你一个大小为 <code>n-1</code> 的数组 <code>edges</code> ，其中 <code>edges[i] = [ui, vi]</code> 表示城市 <code>ui</code> 和 <code>vi</code> 之间有一条双向边。题目保证任意城市之间只有唯一的一条路径。换句话说，所有城市形成了一棵 <strong>树</strong> 。</p><p>一棵 <strong>子树</strong> 是城市的一个子集，且子集中任意城市之间可以通过子集中的其他城市和边到达。两个子树被认为不一样的条件是至少有一个城市在其中一棵子树中存在，但在另一棵子树中不存在。</p><p>对于 <code>d</code> 从 <code>1</code> 到 <code>n-1</code> ，请你找到城市间 <strong>最大距离</strong> 恰好为 <code>d</code> 的所有子树数目。</p><p>请你返回一个大小为 <code>n-1</code> 的数组，其中第 <code>d</code> 个元素（<strong>下标从 1 开始</strong>）是城市间 <strong>最大距离</strong> 恰好等于 <code>d</code> 的子树数目。</p><p><strong>请注意</strong>，两个城市间距离定义为它们之间需要经过的边的数目。</p><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/11/p1.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 4, edges &#x3D; [[1,2],[2,3],[2,4]]</span><br><span class="line">输出：[3,4,0]</span><br><span class="line">解释：</span><br><span class="line">子树 &#123;1,2&#125;, &#123;2,3&#125; 和 &#123;2,4&#125; 最大距离都是 1 。</span><br><span class="line">子树 &#123;1,2,3&#125;, &#123;1,2,4&#125;, &#123;2,3,4&#125; 和 &#123;1,2,3,4&#125; 最大距离都为 2 。</span><br><span class="line">不存在城市间最大距离为 3 的子树。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 2, edges &#x3D; [[1,2]]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 3, edges &#x3D; [[1,2],[2,3]]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 15</code></li><li><code>edges.length == n-1</code></li><li><code>edges[i].length == 2</code></li><li><code>1 &lt;= ui, vi &lt;= n</code></li><li>题目保证 <code>(ui, vi)</code> 所表示的边互不相同。</li></ul><ul><li><p>思路</p><p>看到这道题应该就明白要用状压了。</p><p>针对所有点的不同选取状态state，我们应该对state进行如下思考：</p><ul><li>这些点能否构成连通图</li><li>我们该如何求出这些点的最大距离</li></ul><p>对于第一个问题，我一开始想到的是计算点的度，通过连通图的性质解决。当然也可以通过BFS判定。</p><p>第二个问题同样用dfs、bfs等都可以解决（因为n比较小）。</p></li><li><p>代码</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mapp;</span><br><span class="line">    <span class="keyword">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> viss[<span class="number">16</span>];<span class="comment">//判断是否遍历过该点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=v[i];</span><br><span class="line">            <span class="keyword">if</span>(viss[x]) <span class="keyword">continue</span>;</span><br><span class="line">            viss[x]=<span class="number">1</span>;</span><br><span class="line">            dfs(mapp[x],step+<span class="number">1</span>);</span><br><span class="line">            viss[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v.size()==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(step&gt;maxx) maxx=step;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countSubgraphsForEachDiameter</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=edges.size();</span><br><span class="line">        <span class="keyword">int</span> state=<span class="number">1</span>&lt;&lt;m;</span><br><span class="line">        <span class="keyword">int</span> num[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> vis[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;state;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">            maxx=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="built_in">memset</span>(viss,<span class="number">0</span>,<span class="keyword">sizeof</span>(viss));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) mapp[j].clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                    vis[edges[j][<span class="number">0</span>]]++;</span><br><span class="line">                    vis[edges[j][<span class="number">1</span>]]++;</span><br><span class="line">                    mapp[edges[j][<span class="number">0</span>]].push_back(edges[j][<span class="number">1</span>]);</span><br><span class="line">                    mapp[edges[j][<span class="number">1</span>]].push_back(edges[j][<span class="number">0</span>]);</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[k]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    ans+=(vis[k]<span class="number">-1</span>);<span class="comment">//一个节点每连入一条边他的值就加一，则一个连通图他的所有点的值应该等于x-1；（想象有一条边，我们一次次往里面加点的情况不难发现这一性质）</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans!=(x<span class="number">-1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[k]==<span class="number">1</span>)&#123;<span class="comment">//这里只考虑出口为1的点</span></span><br><span class="line">                        viss[k]=<span class="number">1</span>;</span><br><span class="line">                        dfs(mapp[k],<span class="number">0</span>);</span><br><span class="line">                        viss[k]=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                num[maxx]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            v.push_back(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压 </tag>
            
            <tag> 连通图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有序矩阵中第K小的元素</title>
      <link href="2020/10/14/%E7%AE%97%E6%B3%95/378.%20%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>2020/10/14/%E7%AE%97%E6%B3%95/378.%20%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="378-有序矩阵中第K小的元素"><a href="#378-有序矩阵中第K小的元素" class="headerlink" title="378. 有序矩阵中第K小的元素"></a><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/">378. 有序矩阵中第K小的元素</a></h4><p>给定一个 <em><code>n x n</code></em> 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第 <code>k</code> 小的元素。<br> 请注意，它是排序后的第 <code>k</code> 小元素，而不是第 <code>k</code> 个不同的元素。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matrix &#x3D; [</span><br><span class="line">   [ 1,  5,  9],</span><br><span class="line">   [10, 11, 13],</span><br><span class="line">   [12, 13, 15]</span><br><span class="line">],</span><br><span class="line">k &#x3D; 8,</span><br><span class="line"></span><br><span class="line">返回 13。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong><br> 你可以假设 k 的值永远是有效的，<code>1 ≤ k ≤ n2</code>。</p><ul><li>思路</li></ul><p>直接暴力的做法就是对矩阵中所有的数进行排序。再从左到右遍历即可得第k小元素。或者我们还可以通过优先队列对暴力方法进行一个优化。但我们知道这样做的时间复杂度任然是很高的，原因是没有充分利用题目所给的已知信息。</p><p>根据题目所给信息，在这个矩阵中有很大一部分是已经排过序了的。且matrix[0][0]与matrix[size-1][size-1]分别为矩阵中的最小、最大值用left、right分别代指。假定我们随机的从[left,right]这个区间内取一个数设为m，那么我们是否可以通过当前矩阵的性质轻松的得到这个数m为第几小的数。我们只需要在矩阵中找到小于等于m的数的个数，将&lt;=m的个数设为count。则m为第count+1小的数。</p><p>根据这个思路我们是不是只要确定我们随机取得的这个数是否在这个矩阵中。而确定的这个过程实际就是一种查找。我们采用二分查找法来确定这个数。此时就是根据值域查找的二分法。</p><ul><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=matrix.size();</span><br><span class="line">        <span class="keyword">int</span> left=matrix[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//取最小</span></span><br><span class="line">        <span class="keyword">int</span> right=matrix[n<span class="number">-1</span>][n<span class="number">-1</span>];<span class="comment">//取最大</span></span><br><span class="line">        <span class="keyword">int</span> mid,count=<span class="number">0</span>;<span class="comment">//mid为二分，count为小于等于mid的个数</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">0</span>,y=n<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//找寻矩阵中小于等于mid的数的个数。这里利用到了该矩阵已排序的性质进行了优化。</span></span><br><span class="line">             <span class="keyword">while</span>(x &lt; n &amp;&amp; y &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[y][x] &lt;= mid)&#123;</span><br><span class="line">                    count += y + <span class="number">1</span>;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    y--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=count)&#123;<span class="comment">//这里我们优先考虑平分&lt;=的情况，也就是k==count时我们选择左半边</span></span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两两交换链表中的节点</title>
      <link href="2020/10/13/%E7%AE%97%E6%B3%95/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2020/10/13/%E7%AE%97%E6%B3%95/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><hr><p>一开始看到这道题没有想到递归，迭代想了好久才有思路。写完才发现递归应该更简单才对。</p><p><strong>递归</strong></p><ul><li><p>思路</p><pre><code>考虑两个节点以上情况。我们首先可以确定的是第二个节点的下一个节点是第一个节点，而第一个节点的下一个节点是不确定的，但我们可以通过用同样的方法与后面符合条件的节点连接，这个思路下就用到了递归。</code></pre><p>代码</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* nex=head-&gt;next;</span><br><span class="line">            head-&gt;next=swapPairs(nex-&gt;next);</span><br><span class="line">            nex-&gt;next=head;</span><br><span class="line">            <span class="keyword">return</span> nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>迭代</strong></p><ul><li><p>思路</p><pre><code>这里主要用到了哨兵指针，及头指针。它用来作为迭代的对象保证循环按我想的的顺序进行。</code></pre></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        istNode* node = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);</span><br><span class="line">        ListNode* q=node;</span><br><span class="line">        <span class="keyword">for</span>(ListNode* e=q;e-&gt;next!=<span class="literal">NULL</span>&amp;&amp;e-&gt;next-&gt;next!=<span class="literal">NULL</span>;)&#123;</span><br><span class="line">            ListNode* node1=e-&gt;next-&gt;next;</span><br><span class="line">            ListNode* node2=e-&gt;next;</span><br><span class="line">            e-&gt;next=node1;</span><br><span class="line">            node2-&gt;next=node1-&gt;next;</span><br><span class="line">            node1-&gt;next=node2;</span><br><span class="line">            e=node2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保证图可完全遍历</title>
      <link href="2020/10/13/%E7%AE%97%E6%B3%95/1579.%20%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/"/>
      <url>2020/10/13/%E7%AE%97%E6%B3%95/1579.%20%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h4 id="1579-保证图可完全遍历"><a href="#1579-保证图可完全遍历" class="headerlink" title="1579. 保证图可完全遍历"></a><a href="https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/">1579. 保证图可完全遍历</a></h4><p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3 种类型的边：</p><ul><li>类型 1：只能由 Alice 遍历。</li><li>类型 2：只能由 Bob 遍历。</li><li>类型 3：Alice 和 Bob 都可以遍历。</li></ul><p>给你一个数组 <code>edges</code> ，其中 <code>edges[i] = [typei, ui, vi]</code> 表示节点 <code>ui</code> 和 <code>vi</code> 之间存在类型为 <code>typei</code> 的双向边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。</p><p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex1.png" alt="img"></p><p>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br>输出：2<br>解释：如果删除 [1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。</p><p>示例 2：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex2.png" alt="img"></p><p>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br>输出：0<br>解释：注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。</p><p>示例 3：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex3.png" alt="img"></p><p>输入：n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br>输出：-1<br>解释：在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。</p><p>提示：</p><pre><code>1 &lt;= n &lt;= 10^51 &lt;= edges.length &lt;= min(10^5, 3 * n * (n-1) / 2)edges[i].length == 31 &lt;= edges[i][0] &lt;= 31 &lt;= edges[i][1] &lt; edges[i][2] &lt;= n所有元组 (typei, ui, vi) 互不相同</code></pre><ul><li>思路：<pre><code> 因为第三种类型是通用的，所以优先考虑第三类型下的并查集情况。若出现多余边则该边必然冗余； 第三种类型考虑完后，同样以并查集的方法判断剩下两种类型边。因为n个点至少有n-1条边，若并查集中点的个数小于n-1则返回-1；</code></pre></li><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">100001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=f[x]) f[x]=find(f[x]);</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxNumEdgesToRemove</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; mapp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edges.size();i++)&#123;</span><br><span class="line">            mapp[edges[i][<span class="number">0</span>]].push_back(<span class="built_in">make_pair</span>(edges[i][<span class="number">1</span>],edges[i][<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> da=<span class="number">0</span>;<span class="comment">//可以删除的边数</span></span><br><span class="line">        <span class="keyword">int</span> ans1=<span class="number">0</span>;<span class="comment">//第一、第三类型边能连接最多点的边数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">3</span>].size();i++)&#123;<span class="comment">//遍历第三类型边</span></span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">3</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">3</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans1++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;<span class="comment">//第三类型的多余边必然舍去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">1</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">1</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">1</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans1++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">3</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">3</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">3</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans2++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">2</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">2</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">2</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans2++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans1&lt;n<span class="number">-1</span>||ans2&lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> da;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络入门</title>
      <link href="2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01/"/>
      <url>2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><strong>教科书：《计算机网络》谢希仁</strong></p><p>当前正处于大三阶段，刚开始学习计算机网络，发现这本书有点难啃，上课也多是一知半解。因此特写下这一系列文章做知识梳理。前面是我随着课程进度写下的一些要点，其中多是课本上的内容。后面我可能会加入二刷后的一些个人理解。</p><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><ul><li><p>核心内容</p><ol><li><p>互联网边缘部分和核心部分的作用，其中包含分组交换的概念。</p><ul><li><p>边缘部分：所有连接在互联网上的主机，用户可以直接使用；</p></li><li><p>核心部分：由大量的网络和连接这些网络的路由器组成，为边缘部分的主机提供服务。</p></li><li><p>交换：</p><ul><li><p>电路交换</p><p>​    电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中<strong>始终占用</strong>该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p></li><li><p>报文交换</p><p>​    报文交换用于邮局通信系统，邮局接收到一份<strong>报文</strong>之后，先存储下来，然后把相同目的地的报文<strong>一起转发</strong>到下一个目的地，这个过程就是<strong>存储转发</strong>过程。</p></li><li><p>分组交换</p><p>​    <strong>路由器</strong>是实现<strong>分组交换</strong>的关键构建，其任务是转发收到的分组，是网络核心部分最重要的功能。分组交换也使用了存储转发技术，但是转发的是分组而不是报文。把整块数据称为一个报文，由于一个报文可能很长，需要先进行切分，来满足分组能处理的大小。在每个切分的数据前面加上首部之后就成为了分组，首部包含了目的地址和源地址等控制信息。</p></li></ul><p>|          | <strong>优点</strong>                                                     | <strong>缺点</strong>                                                     |<br>| ———— | —————————————————————————————— | —————————————————————————————— |<br>| 电路交换 | •延时小  •实时性强  •不存在顺序问题  •交换设备简单           | •建立电路时间长  •信道利用率低  •终端一致度要求高            |<br>| 报文交换 | •不需要建立连接，随时发送  •可以选择路径，提高可靠性  •不需要收发双方同步  •可以广播发送  •可以设置优先级 | •存储转发有时延，实时性差  •只适用于数字信号  •对缓冲区要求不确定 |<br>| 分组交换 | •报文交换的优点都具备  •流水线方式加速传输  •长度固定简化缓冲区管理  •出错重发数据量小  • | •转发延时  •每个分组需要携带源地址目标地址等  •失序问题      |</p></li></ul></li><li><p>计算机网络的性能指标。</p><ul><li><p>速率</p><p>​    速率是计算机网络中最重要的一个性能，单位：bit/s 。网络技术中的速率指的是数据的传送速率，同时也称为数据率或比特率。实际提到速率时，往往指的是它的额定速率而非网络上实际运行时的速率。</p></li><li><p>带宽</p><p>​    (1)、原先的通信领域，带宽就是指某个信号的频道宽度，单位：赫。但如今，它表示的是<strong>某信道允许通过的信号频道范围</strong>。</p><p>​    (2)、计算机网络中，带宽用来表示网络中某通道传送数据的能力。它指的是单位时间内网络内某信道所能通过的“最高数据率”。单位：bit/s 。</p></li><li><p>吞吐量</p><p>​    吞吐量表示单位时间内通过某个网络（信道或接口）的实际数据量。</p></li><li><p>时延</p><p>​    时延是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。他也称为延迟或迟延。</p><p>​    (1)、发送时延：主机或路由器发送数据帧所需时间。</p></li></ul><p>​    (2)、传播时延：电磁波在信道中传播一定距离所需的时间。</p><p>  有他们的定义不难看出如下公式：</p><script type="math/tex; mode=display">传播时延=\frac{信道长度(m)}{电磁波在信道上的传播速率(m/s)}</script><script type="math/tex; mode=display">发送时延=\frac{数据帧长度(bit)}{发送速率(bit/s)}</script><p>  ​    (3)、处理时延：主机或路由器收到分组时进行处理所需要的时间，例如分析首部，从分组中提取数据部分等。</p><p>  ​    (4)、排队时延：分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。</p><ul><li>时延带宽积</li></ul><p>​    直接上公式：</p><script type="math/tex; mode=display">时延带宽积=传播时延\times 带宽</script><ul><li><p>往返时间RTT</p><p>​    及双向交互一次所需时间。</p></li></ul></li></ol></li></ul><ol><li><p>计算机网络的分层次体系结构，包含协议和服务的概念。</p><ul><li><p>七层协议</p><ol><li><p>表示层：信息的语法语义以及它们的关联，如加密解密、转换翻译、压缩解压缩；</p><ol><li>会话层：不同机器上的用户之间建立及管理会话。</li></ol><p>另五层与下述作用类似。</p></li></ol><ul><li><p>五层协议</p><ol><li>应用层：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等。数据单位为报文。</li></ol></li></ul><ol><li>运输层：提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议  UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。<ol><li>网络层：为主机之间提供服务，而不是像运输层协议那样是为主机中的进程提供服务。网络层把运输层产生的报文段或者用户数据报封装成分组来进行传输。</li></ol></li><li>数据链路层：网络层针对的还是主机之间，而主机之间可以有很多链路，链路层协议就是为相邻结点之间提供服务。数据链路层把网络层传来的分组封装成帧。<ol><li>物理层：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使物理层上的数据链路层感觉不到这些差异。</li></ol></li></ol><ul><li><p>数据在各层之间的传递过程</p><p>​    在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要运输层和应用层。</p></li><li><p>TCP/IP 体系结构</p><p>​    它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p><p>现在的 TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p><p>TCP/IP 协议族是一种沙漏形状，中间小两边大，IP 协议在其中占用举足轻重的地位。</p></li></ul></li></ul></li></ol><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><ol><li><p>物理层的任务</p><ul><li><p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是具体的传输媒体。</p></li><li><p>物理层的主要任务主要被描述为与传输媒体接口有关的一些特性，如下:</p><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul></li></ul></li><li><p>几种常用的信道复用技术</p><ul><li><p>频分复用：频分复用的所有用户在相同的时间占用不同的频率带宽资源。</p></li><li><p>时分复用：时分复用的所有用户在不同的时间占用相同的频率带宽资源。</p></li><li>统计时分复用：统计时分复用是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成时分复用帧然后发送。</li><li>波分复用：光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</li><li>码分复用：码分复用需要发送的数据量为原先的 m 倍。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。不同用户码片(或反码)正交，同一用户点积为0。</li></ul></li><li>几种常用的宽带接入技术，主要是ADSL和FTTx<ul><li>ADSL:非对称数字用户线ADSL技术是用数字技术对现有模拟电话用户线进行改造。</li><li>FTTx: 光纤到户。</li></ul></li><li><p>物理层用到的工具</p><ul><li>双绞线：保证了双工信道</li><li>同轴电缆：单工信道</li><li>放大器：距离过长时，将衰减了的信号放大到合适的数值</li><li>中继器：对失真了的数字信号进行整形（数字传输）；通过对数据信号的重新发送或者转发来扩大网络传输的距离</li></ul></li></ol><h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><ol><li><p>数据链路层的点对点信道和传播信道的特点，以及这两种信道所使用的的协议(ppp协议以及CSMA/CD协议)的特点</p><ul><li>点对点信道：采用一对一、点对点通信。</li><li><p>传播信道：采用一对多的光波通信。因所连接的主机数量过多，所以必须使用专用的共享信道协议来协调这些主机的数据发送。</p></li><li><p>ppp协议：互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议就是用户计算机和 ISP 进行通信时所使用的数据链路层协议。在 PPP 的帧中，F 字段为帧的定界符，A 和 C 暂时没有意义。FCS 是使用 CRC 的检验序列。信息部分的长度不超过 1500。</p><p>|      | 7E   | FF   | 03   | 协议 | 信息   | FCS  | 7E   |<br>| —— | —— | —— | —— | —— | ——— | —— | —— |<br>| 字节 | 1    | 1    | 1    | 2    | &lt;=1500 | 2    | 1    |</p></li><li><p>CSMA/CD协议：在广播信道上，同一时间只能允许一台计算机发送数据。CSMA/CD 表示载波监听多点接入 / 碰撞检测。</p><p><strong>多点接入</strong>：说明这是总线型网络，许多计算机以多点的方式连接到总线上。<strong>载波监听</strong>：每个站都必须不停地检听信道。在发送前，如果检听信道正在使用，就必须等待。<strong>碰撞检测</strong>：在发送中，如果检听信道已有其它站正在发送数据，就表示发生了碰撞。虽然每一个站在发送数据之前都已经检听信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</p><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 <strong>争用期</strong>。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 <strong>截断二进制指数退避算法</strong> 来确定，从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p></li></ul></li><li><p>数据链路层的三个基本问题：封装成帧、透明传输、差错检测。</p><ul><li>封装成帧：将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。</li><li>透明传输：透明表示一个实际存在的事物看起来好像不存在一样。帧中有首部和尾部，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据中出现首部尾部相同的内容前面插入转义字符，如果需要传输的内容正好就是转义字符，那么就在转义字符前面再加个转义字符，在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</li><li>差错检测：目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错，注意未解决传输差错。</li></ul></li><li><p>以太网MAC层的硬件地址。</p></li><li>适配器、转发器、集线器、网桥、以太网交换机的作用以及使用场合。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="2020/10/10/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001/"/>
      <url>2020/10/10/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h2 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h2><ol><li>并查集</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>边集合</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> a, b, w;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge&amp; e) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><ol><li><p>set集合<br>set<int> s;<br>自带upper_bound(num) //找到大于num的数</p></li><li><p>__builtin_clz(n)<br>返回n前导0的个数</p></li><li><p>精度问题（考虑相等判别情况）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;  <span class="comment">//一般这样子就够，但有时具体题目要考虑是否要更小的 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a-b) &lt; EPS)  <span class="comment">//判断是否相等 </span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b+EPS)   <span class="comment">// 判断a是否大于b，因为大的肯定大，所以即使你小的加上，还是会更大    </span></span><br></pre></td></tr></table></figure></li><li><p>位运算注意括号（位优先级低）<br>特别注意在比大小、加减这些情况时。</p></li><li><p>priority_queue 优先队列 默认最大堆优先；<br>priority_queue<pair<double,int>&gt; p;</p></li><li><p>线段树维护</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn*<span class="number">4</span>], A[maxn];</span><br><span class="line"><span class="keyword">int</span> lazy[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r ,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        sum[rt*<span class="number">2</span>] += lazy[rt]*(m-l+<span class="number">1</span>);</span><br><span class="line">        sum[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt]*(r-m);</span><br><span class="line">        lazy[rt*<span class="number">2</span>] += lazy[rt];</span><br><span class="line">        lazy[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt];</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[rt*<span class="number">2</span>] + sum[rt*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == l) &#123;</span><br><span class="line">        sum[rt] += c;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> Update(L, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans += Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans += Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">LL sum[maxn*<span class="number">4</span>],lazy[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> A[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r ,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        sum[rt*<span class="number">2</span>] += lazy[rt]*(m-l+<span class="number">1</span>);</span><br><span class="line">        sum[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt]*(r-m);</span><br><span class="line">        lazy[rt*<span class="number">2</span>] += lazy[rt];</span><br><span class="line">        lazy[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt];</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[rt*<span class="number">2</span>] + sum[rt*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        lazy[rt] += c;</span><br><span class="line">        sum[rt]+=(r-l+<span class="number">1</span>)*c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L,R, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m) Update(L,R, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans += Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans += Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b,d;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, A + i);</span><br><span class="line">        Build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Query(a, b, <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">                Update(a,b,d, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>计算子序列和问题时考虑01背包（完全NP）</p><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h4><p>给定一个<strong>只包含正整数</strong>的<strong>非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><ol><li>每个数组中的元素不会超过 100</li><li>数组的大小不会超过 200</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>,a[<span class="number">211</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">201</span>][<span class="number">20001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=sum/<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;nums[i])&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j]||dp[i<span class="number">-1</span>][j-nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[nums.size()<span class="number">-1</span>][sum/<span class="number">2</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
