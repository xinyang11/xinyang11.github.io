<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>两两交换链表中的节点</title>
      <link href="2020/10/13/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2020/10/13/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><hr><p>一开始看到这道题没有想到递归，迭代想了好久才有思路。写完才发现递归应该更简单才对。</p><p><strong>递归</strong></p><ul><li><p>思路</p><pre><code>考虑两个节点以上情况。我们首先可以确定的是第二个节点的下一个节点是第一个节点，而第一个节点的下一个节点是不确定的，但我们可以通过用同样的方法与后面符合条件的节点连接，这个思路下就用到了递归。</code></pre><p>代码</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* nex=head-&gt;next;</span><br><span class="line">            head-&gt;next=swapPairs(nex-&gt;next);</span><br><span class="line">            nex-&gt;next=head;</span><br><span class="line">            <span class="keyword">return</span> nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>迭代</strong></p><ul><li><p>思路</p><pre><code>这里主要用到了哨兵指针，及头指针。它用来作为迭代的对象保证循环按我想的的顺序进行。</code></pre></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        istNode* node = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);</span><br><span class="line">        ListNode* q=node;</span><br><span class="line">        <span class="keyword">for</span>(ListNode* e=q;e-&gt;next!=<span class="literal">NULL</span>&amp;&amp;e-&gt;next-&gt;next!=<span class="literal">NULL</span>;)&#123;</span><br><span class="line">            ListNode* node1=e-&gt;next-&gt;next;</span><br><span class="line">            ListNode* node2=e-&gt;next;</span><br><span class="line">            e-&gt;next=node1;</span><br><span class="line">            node2-&gt;next=node1-&gt;next;</span><br><span class="line">            node1-&gt;next=node2;</span><br><span class="line">            e=node2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保证图可完全遍历</title>
      <link href="2020/10/13/1579.%20%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/"/>
      <url>2020/10/13/1579.%20%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h4 id="1579-保证图可完全遍历"><a href="#1579-保证图可完全遍历" class="headerlink" title="1579. 保证图可完全遍历"></a><a href="https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/">1579. 保证图可完全遍历</a></h4><p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3 种类型的边：</p><ul><li>类型 1：只能由 Alice 遍历。</li><li>类型 2：只能由 Bob 遍历。</li><li>类型 3：Alice 和 Bob 都可以遍历。</li></ul><p>给你一个数组 <code>edges</code> ，其中 <code>edges[i] = [typei, ui, vi]</code> 表示节点 <code>ui</code> 和 <code>vi</code> 之间存在类型为 <code>typei</code> 的双向边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。</p><p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex1.png" alt="img"></p><p>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br>输出：2<br>解释：如果删除 [1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。</p><p>示例 2：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex2.png" alt="img"></p><p>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br>输出：0<br>解释：注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。</p><p>示例 3：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex3.png" alt="img"></p><p>输入：n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br>输出：-1<br>解释：在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。</p><p>提示：</p><pre><code>1 &lt;= n &lt;= 10^51 &lt;= edges.length &lt;= min(10^5, 3 * n * (n-1) / 2)edges[i].length == 31 &lt;= edges[i][0] &lt;= 31 &lt;= edges[i][1] &lt; edges[i][2] &lt;= n所有元组 (typei, ui, vi) 互不相同</code></pre><ul><li>思路：<pre><code> 因为第三种类型是通用的，所以优先考虑第三类型下的并查集情况。若出现多余边则该边必然冗余； 第三种类型考虑完后，同样以并查集的方法判断剩下两种类型边。因为n个点至少有n-1条边，若并查集中点的个数小于n-1则返回-1；</code></pre></li><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">100001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=f[x]) f[x]=find(f[x]);</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxNumEdgesToRemove</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; mapp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edges.size();i++)&#123;</span><br><span class="line">            mapp[edges[i][<span class="number">0</span>]].push_back(<span class="built_in">make_pair</span>(edges[i][<span class="number">1</span>],edges[i][<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> da=<span class="number">0</span>;<span class="comment">//可以删除的边数</span></span><br><span class="line">        <span class="keyword">int</span> ans1=<span class="number">0</span>;<span class="comment">//第一、第三类型边能连接最多点的边数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">3</span>].size();i++)&#123;<span class="comment">//遍历第三类型边</span></span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">3</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">3</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans1++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;<span class="comment">//第三类型的多余边必然舍去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">1</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">1</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">1</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans1++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">3</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">3</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">3</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans2++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">2</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">2</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">2</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans2++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans1&lt;n<span class="number">-1</span>||ans2&lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> da;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络入门</title>
      <link href="2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01/"/>
      <url>2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><strong>教科书：《计算机网络》谢希仁</strong></p><p>当前正处于大三阶段，刚开始学习计算机网络，发现这本书有点难啃，上课也多是一知半解。因此特写下这一系列文章做知识梳理。前面是我随着课程进度写下的一些要点，其中多是课本上的内容。后面我可能会加入二刷后的一些个人理解。</p><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><ul><li><p>核心内容</p><ol><li><p>互联网边缘部分和核心部分的作用，其中包含分组交换的概念。</p><ul><li><p>边缘部分：所有连接在互联网上的主机，用户可以直接使用；</p></li><li><p>核心部分：由大量的网络和连接这些网络的路由器组成，为边缘部分的主机提供服务。</p></li><li><p>交换：</p><ul><li><p>电路交换</p><p>​    电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p></li><li><p>报文交换</p><p>​    报文交换用于邮局通信系统，邮局接收到一份报文之后，先存储下来，然后把相同目的地的报文一起转发到下一个目的地，这个过程就是存储转发过程。</p></li><li><p>分组交换</p><p>​    路由器是实现分组交换的关键构建，其任务是转发收到的分组，是网络核心部分最重要的功能。分组交换也使用了存储转发技术，但是转发的是分组而不是报文。把整块数据称为一个报文，由于一个报文可能很长，需要先进行切分，来满足分组能处理的大小。在每个切分的数据前面加上首部之后就成为了分组，首部包含了目的地址和源地址等控制信息。</p></li></ul></li></ul></li><li><p>计算机网络的性能指标。</p><ul><li><p>速率</p><p>​    速率是计算机网络中最重要的一个性能，单位：bit/s 。网络技术中的速率指的是数据的传送速率，同时也称为数据率或比特率。实际提到速率时，往往指的是它的额定速率而非网络上实际运行时的速率。</p></li><li><p>带宽</p><p>​    (1)、原先的通信领域，带宽就是指某个信号的频道宽度，单位：赫。但如今，它表示的是某信道允许通过的信号频道范围。</p><p>​    (2)、计算机网络中，带宽用来表示网络中某通道传送数据的能力。它指的是单位时间内网络内某信道所能通过的“最高数据率”。单位：bit/s 。</p></li><li><p>吞吐量</p><p>​    吞吐量表示单位时间内通过某个网络（信道或接口）的实际数据量。</p></li><li><p>时延</p><p>​    时延是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。他也称为延迟或迟延。</p><p>​    (1)、发送时延：主机或路由器发送数据帧所需时间。</p><p>​    (2)、传播时延：电磁波在信道中传播一定距离所需的时间。</p><p>有他们的定义不难看出如下公式：<br>$$<br>传播时延=\frac{信道时延(m)}{电磁波在信道上的传播速率(m/s)}<br>$$</p><p>$$<br>发送时延=\frac{数据帧长度(bit)}{发送速率(bit/s)}<br>$$</p><p>​    (3)、处理时延：主机或路由器收到分组时进行处理所需要的时间，例如分析首部，从分组中提取数据部分等。</p><p>​    (4)、排队时延：分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。</p></li><li><p>时延带宽积</p><p>​    直接上公式：<br>$$<br>时延带宽积=传播时延\times 带宽<br>$$</p></li><li><p>往返时间RTT</p><p>​    及双向交互一次所需时间。</p></li></ul></li><li><p>计算机网络的分层次体系结构，包含协议和服务的概念。</p><ul><li><p>七层协议</p><ol><li>表示层：信息的语法语义以及它们的关联，如加密解密、转换翻译、压缩解压缩；</li><li>会话层：不同机器上的用户之间建立及管理会话。</li></ol><p>另五层与下述作用类似。</p></li><li><p>五层协议</p><ol><li>应用层：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等。数据单位为报文。</li><li>运输层：提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议  UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。</li><li>网络层：为主机之间提供服务，而不是像运输层协议那样是为主机中的进程提供服务。网络层把运输层产生的报文段或者用户数据报封装成分组来进行传输。</li><li>数据链路层：网络层针对的还是主机之间，而主机之间可以有很多链路，链路层协议就是为相邻结点之间提供服务。数据链路层把网络层传来的分组封装成帧。</li><li>物理层：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使物理层上的数据链路层感觉不到这些差异。</li></ol></li><li><p>数据在各层之间的传递过程</p><p>​    在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要运输层和应用层。</p></li><li><p>TCP/IP 体系结构</p><p>​    它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p><p>现在的 TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p><p>TCP/IP 协议族是一种沙漏形状，中间小两边大，IP 协议在其中占用举足轻重的地位。</p></li></ul></li></ol></li></ul><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><ol><li><p>物理层的任务</p><ul><li><p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是具体的传输媒体。</p></li><li><p>物理层的主要任务主要被描述为与传输媒体接口有关的一些特性，如下:</p><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul></li></ul></li><li><p>几种常用的信道复用技术</p><ul><li><p>频分复用：频分复用的所有用户在相同的时间占用不同的频率带宽资源。</p></li><li><p>时分复用：时分复用的所有用户在不同的时间占用相同的频率带宽资源。</p></li><li><p>统计时分复用：统计时分复用是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成时分复用帧然后发送。</p></li><li><p>波分复用：光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p></li><li><p>码分复用：码分复用需要发送的数据量为原先的 m 倍。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。不同用户码片(或反码)正交，同一用户点积为0。</p></li></ul></li><li><p>几种常用的宽带接入技术，主要是ADSL和FTTx</p><ul><li>ADSL:非对称数字用户线ADSL技术是用数字技术对现有模拟电话用户线进行改造。</li><li>FTTx: 光纤到户。</li></ul></li></ol><h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><ol><li><p>数据链路层的点对点信道和传播信道的特点，以及这两种信道所使用的的协议(ppp协议以及CSMA/CD协议)的特点</p><ul><li><p>点对点信道：采用一对一、点对点通信。</p></li><li><p>传播信道：采用一对多的光波通信。因所连接的主机数量过多，所以必须使用专用的共享信道协议来协调这些主机的数据发送。</p></li><li><p>ppp协议：互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议就是用户计算机和 ISP 进行通信时所使用的数据链路层协议。在 PPP 的帧中，F 字段为帧的定界符，A 和 C 暂时没有意义。FCS 是使用 CRC 的检验序列。信息部分的长度不超过 1500。</p><table><thead><tr><th></th><th>7E</th><th>FF</th><th>03</th><th>协议</th><th>信息</th><th>FCS</th><th>7E</th></tr></thead><tbody><tr><td>字节</td><td>1</td><td>1</td><td>1</td><td>2</td><td>&lt;=1500</td><td>2</td><td>1</td></tr></tbody></table></li><li><p>CSMA/CD协议：在广播信道上，同一时间只能允许一台计算机发送数据。CSMA/CD 表示载波监听多点接入 / 碰撞检测。</p><p><strong>多点接入</strong>：说明这是总线型网络，许多计算机以多点的方式连接到总线上。<strong>载波监听</strong>：每个站都必须不停地检听信道。在发送前，如果检听信道正在使用，就必须等待。<strong>碰撞检测</strong>：在发送中，如果检听信道已有其它站正在发送数据，就表示发生了碰撞。虽然每一个站在发送数据之前都已经检听信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</p><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 <strong>争用期</strong>。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 <strong>截断二进制指数退避算法</strong> 来确定，从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p></li></ul></li><li><p>数据链路层的三个基本问题：封装成帧、透明传输、差错检测。</p><ul><li>封装成帧：将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。</li><li>透明传输：透明表示一个实际存在的事物看起来好像不存在一样。帧中有首部和尾部，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据中出现首部尾部相同的内容前面插入转义字符，如果需要传输的内容正好就是转义字符，那么就在转义字符前面再加个转义字符，在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</li><li>差错检测：目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错，注意未解决传输差错。</li></ul></li><li><p>以太网MAC层的硬件地址。</p></li><li><p>适配器、转发器、集线器、网桥、以太网交换机的作用以及使用场合。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="2020/10/10/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001/"/>
      <url>2020/10/10/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h2 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h2><ol><li>并查集</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>边集合</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> a, b, w;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge&amp; e) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>set集合<br>set<int> s;<br>自带upper_bound(num) //找到大于num的数</p></li><li><p>__builtin_clz(n)<br>返回n前导0的个数</p></li><li><p>精度问题（考虑相等判别情况）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;  <span class="comment">//一般这样子就够，但有时具体题目要考虑是否要更小的 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a-b) &lt; EPS)  <span class="comment">//判断是否相等 </span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b+EPS)   <span class="comment">// 判断a是否大于b，因为大的肯定大，所以即使你小的加上，还是会更大    </span></span><br></pre></td></tr></table></figure></li><li><p>位运算注意括号（位优先级低）<br>特别注意在比大小、加减这些情况时。</p></li><li><p>priority_queue 优先队列 默认最大堆优先；<br>priority_queue&lt;pair&lt;double,int&gt;&gt; p;</p></li><li><p>线段树维护</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node* l;</span><br><span class="line">    Node* r;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> tag;   <span class="comment">///是否为叶子节点，true为叶子节点</span></span><br><span class="line">    Node(<span class="keyword">int</span> s, <span class="keyword">int</span> e) : l(<span class="literal">nullptr</span>), r(<span class="literal">nullptr</span>), s(s), e(e), m((s+e)/<span class="number">2</span>), val(<span class="number">0</span>), tag(<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">    <span class="function">Node* <span class="title">Left</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == e) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        l = l ? l : <span class="keyword">new</span> Node(s, m);</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">Right</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == e) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        r = r ? r : <span class="keyword">new</span> Node(m+<span class="number">1</span>, e);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        val++;</span><br><span class="line">        <span class="keyword">if</span>(s==e)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;=m)&#123;</span><br><span class="line">            Left()-&gt;add(index);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Right()-&gt;add(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == start &amp;&amp; e == end) <span class="keyword">return</span> val;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (end &lt;= m) <span class="keyword">return</span> Left()-&gt;query(start, end);</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= m+<span class="number">1</span>) <span class="keyword">return</span> Right()-&gt;query(start, end);</span><br><span class="line">        <span class="keyword">return</span> (Left()-&gt;query(start, m)+Right()-&gt;query(m+<span class="number">1</span>, end));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：panpeng</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/solution/xian-duan-shu-lai-ji-suan-yi-dong-de-wei-zhi-by-pa/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn*<span class="number">4</span>], A[maxn];</span><br><span class="line"><span class="keyword">int</span> lazy[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r ,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        sum[rt*<span class="number">2</span>] += lazy[rt]*(m-l+<span class="number">1</span>);</span><br><span class="line">        sum[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt]*(r-m);</span><br><span class="line">        lazy[rt*<span class="number">2</span>] += lazy[rt];</span><br><span class="line">        lazy[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt];</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[rt*<span class="number">2</span>] + sum[rt*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == l) &#123;</span><br><span class="line">        sum[rt] += c;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> Update(L, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans += Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans += Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计算子序列和问题时考虑01背包（完全NP）</p><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h4><p>给定一个<strong>只包含正整数</strong>的<strong>非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><ol><li>每个数组中的元素不会超过 100</li><li>数组的大小不会超过 200</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>,a[<span class="number">211</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">201</span>][<span class="number">20001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=sum/<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;nums[i])&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j]||dp[i<span class="number">-1</span>][j-nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[nums.size()<span class="number">-1</span>][sum/<span class="number">2</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新人的第一篇博客</title>
      <link href="2020/10/10/My-New-Post/"/>
      <url>2020/10/10/My-New-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="记录一下第一次用hexo发博客"><a href="#记录一下第一次用hexo发博客" class="headerlink" title="记录一下第一次用hexo发博客"></a>记录一下第一次用hexo发博客</h2><p>花了我好长时间才搞完。。</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
