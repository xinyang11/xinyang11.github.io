<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模运算</title>
      <link href="2020/10/18/%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
      <url>2020/10/18/%E6%A8%A1%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h2><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><p>模运算的基本规则与四则运算基本一致：</p><ul><li><p>(a + b) % p = (a % p + b % p) % p </p></li><li><p>(a – b) % p = (a % p – b % p) % p</p></li><li><p>(a * b) % p = (a % p * b % p) % p</p></li><li><p>(a^b) % p = ((a % p)^b) % p</p></li></ul><p>这里没有除法的模运算是因为除法取模较为特殊。</p><h4 id="除法取模"><a href="#除法取模" class="headerlink" title="除法取模"></a>除法取模</h4><blockquote><p>除法取模首先需要知道小费马定理。</p></blockquote><ul><li><p>小费马定理</p><ul><li><p><strong>乘法逆元</strong></p><p>定义： 对于整数a,p且gcd(a,p)==1，则一定存在唯一一个b满足a*b≡1(mod p)。</p></li><li><p><strong>若p是质数，且p与a互质，有等式:</strong></p></li></ul><p>$$<br>(1).a^{p-1}%p == 1%p<br>\(2).a^{p-2}%p==\frac{1}{a}%p<br>\2中的右式其实就是b的乘法逆元。<br>$$</p><p> 转化后：<br>$$<br>两边同除以a\Rightarrow\frac{b}{a}%p == b<em>a^{p-2}%p<br>\此时我们得到所求的\frac{b}{a}的模就是b</em>a^{p-2}的模<br>$$<br>此时我们就将分数求模问题转化为了乘法求模，同时也是求b的乘法逆元问题。</p><p>同时若p值较大，则有要用到高次幂求模。</p><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分数求模</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b)==<span class="number">2</span>)<span class="comment">//表示b/a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (power_mod(a,mod<span class="number">-2</span>,mod))*b%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>高次幂求模</p><p>传统方法当然就是依次相乘，显然当p很大时，耗时也会很大。</p><p>也就是说问题是出在p值太大的情况上，此时我们想到能否将p值缩小，将高次幂指数运算转化为多个低次幂的指数运算乘积。</p><p>通过位运算的方法可以很好地解决这个问题：<br>$$<br>假设我们求2^{10}这个数的值，我们可以将10的二进制数表示出来：1010。<br>\此时我们可以根据位上为1的数的权值对这个指数进行拆分：2^{10}=2^{10}<em>2^{1000}=2^2</em>2^8<br>\显然上面的等式成立，而此时我们只需遍历最多4次即可（指数的二进制位数）。<br>$$<br>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> base = a%c;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans = (ans*base)%c;</span><br><span class="line">        base = (base*base)%c;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><blockquote><p>链接：<a href="https://ac.nowcoder.com/acm/contest/275/A">https://ac.nowcoder.com/acm/contest/275/A</a><br>来源：牛客网</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>你在一栋楼房下面，楼房一共有n层，第i层每秒有pi的概率会扔下一个东西并砸到你<br> 求第一秒内你被砸到的概率</p><h5 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数n</span><br><span class="line">之后有n行，第i+1行有两个整数ai,bi，表示pi&#x3D;aibip_i&#x3D;\frac&#123;a_i&#125;&#123;b_i&#125;pi&#x3D;biai</span><br></pre></td></tr></table></figure><h5 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设答案为pq\frac&#123;p&#125;&#123;q&#125;qp，你只需要找到一个最小的非负整数T，使得T≡p×q−1( mod 1000000007)T \equiv p \times q^&#123;-1&#125; (\bmod 1000000007)T≡p×q−1(mod1000000007)</span><br><span class="line">输出这个T就行了</span><br></pre></td></tr></table></figure><p>示例1</p><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">750000006</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        ans=(ans*(b-a)% mod)*(power_mod(b,mod<span class="number">-2</span>,mod))%mod;<span class="comment">//不可能的概率</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (<span class="number">1</span>+mod-ans)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 取模 </tag>
            
            <tag> 小费马定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解最大公约数问题</title>
      <link href="2020/10/18/%E6%B1%82%E8%A7%A3%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
      <url>2020/10/18/%E6%B1%82%E8%A7%A3%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="最大公约数求解"><a href="#最大公约数求解" class="headerlink" title="最大公约数求解"></a>最大公约数求解</h2><blockquote><p>我们在做很多题目往往会用到求解两数的最大公约数，但通常的思路是暴力枚举所有的数，这样的方法造成的时间复杂度往往使我们所不能接受的，这里给出两种gcd解法。</p></blockquote><h4 id="一、更相减损"><a href="#一、更相减损" class="headerlink" title="一、更相减损"></a>一、更相减损</h4><ul><li><p>思路</p><p>假设有两个数分别为a、b，其中a&lt;b.则求解a和b的最大公约数等价于求解（a-b）和b的最大公约数。</p><p>依据这一思路，我们就可以通过递归求解出我们需要的解。</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        gcd1(a-b,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        gcd1(b-a,a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二、辗转相除"><a href="#二、辗转相除" class="headerlink" title="二、辗转相除"></a>二、辗转相除</h4><ul><li><p>思路</p><p>假设有两个数分别为a、b，其中a&lt;b.则求解a和b的最大公约数等价于求解（a%b）和b的最大公约数。</p><p>我们观察到原来的(a-b)变成了(a%b)，明显提高了数字降下的速度，可见辗转相除更像是第一种方法的一个优化，极大降低了时间复杂度。</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        gcd2(y,x%y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> y;</span><br><span class="line">        gcd2(x,y%x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将子数组重新排序得到同一个二叉查找树的方案数</title>
      <link href="2020/10/17/1569.%20%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/"/>
      <url>2020/10/17/1569.%20%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1569-将子数组重新排序得到同一个二叉查找树的方案数"><a href="#1569-将子数组重新排序得到同一个二叉查找树的方案数" class="headerlink" title="1569. 将子数组重新排序得到同一个二叉查找树的方案数"></a><a href="https://leetcode-cn.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/">1569. 将子数组重新排序得到同一个二叉查找树的方案数</a></h4><p>给你一个数组 <code>nums</code> 表示 <code>1</code> 到 <code>n</code> 的一个排列。我们按照元素在 <code>nums</code> 中的顺序依次插入一个初始为空的二叉查找树（BST）。请你统计将 <code>nums</code> 重新排序后，统计满足如下条件的方案数：重排后得到的二叉查找树与 <code>nums</code> 原本数字顺序得到的二叉查找树相同。</p><p>比方说，给你 <code>nums = [2,1,3]</code>，我们得到一棵 2 为根，1 为左孩子，3 为右孩子的树。数组 <code>[2,3,1]</code> 也能得到相同的 BST，但 <code>[3,2,1]</code> 会得到一棵不同的 BST 。</p><p>请你返回重排 <code>nums</code> 后，与原数组 <code>nums</code> 得到相同二叉查找树的方案数。</p><p>由于答案可能会很大，请将结果对 <code>10^9 + 7</code> 取余数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/bb.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [2,1,3]</span><br><span class="line">输出：1</span><br><span class="line">解释：我们将 nums 重排， [2,3,1] 能得到相同的 BST 。没有其他得到相同 BST 的方案了。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/ex1.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,4,5,1,2]</span><br><span class="line">输出：5</span><br><span class="line">解释：下面 5 个数组会得到相同的 BST：</span><br><span class="line">[3,1,2,4,5]</span><br><span class="line">[3,1,4,2,5]</span><br><span class="line">[3,1,4,5,2]</span><br><span class="line">[3,4,1,2,5]</span><br><span class="line">[3,4,1,5,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/ex4.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：0</span><br><span class="line">解释：没有别的排列顺序能得到相同的 BST 。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/abc.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,1,2,5,4,6]</span><br><span class="line">输出：19</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]</span><br><span class="line">输出：216212978</span><br><span class="line">解释：得到相同 BST 的方案数是 3216212999。将它对 10^9 + 7 取余后得到 216212978。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li><li><code>nums</code> 中所有数 <strong>互不相同</strong> 。</li></ul><ul><li><p>思路</p><p>规律不难找，无非根据二叉查找树的性质，即左子树都小于根，右子树都大于根。一开始根就是第一个数，我们只需将小于根的数归为一边，作为左子树left，大于根的数归为另一边作为右子树right。再对两边进行组合即可，前提是分别保持两边顺序不变。</p><p>想一下在保证左、右边的数的顺序都不变的情况下，数的组合情况有多少种？</p><p>设左边的数有n个，右边数有m个,n&gt;=m,则：<br>$$<br>两边组合在一起的所有可能： {n+m\choose m}<br>$$<br>这时我们发现这里需要用到计算组合数的方法。我们可以通过组合数的性质，打表计算出所有组合数的值：<br>$$<br>{n+1 \choose k}={n \choose k}+{n \choose k-1}<br>$$<br>既然第一个数为根时的所有组合情况都计算出了，那么我们不难想到递归每一层的组合数，然后将这些数都相乘即可。</p></li></ul><blockquote><p>事实上这道题我们很容易忽略计算过程中的取余，由于组合数一般可以很大，所以每次相乘处我们都应注意对乘积取余，防止下次乘积时值溢出。</p></blockquote><p>​        其实对于这样的组合取余，还有更优的解法，我会在后续阶段加入补充。</p><ul><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> com[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfWays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        com[<span class="number">1</span>][<span class="number">0</span>]=com[<span class="number">1</span>][<span class="number">1</span>]=com[<span class="number">0</span>][<span class="number">0</span>]=com[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            com[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            com[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                com[i][j]=(com[i<span class="number">-1</span>][j]+com[i<span class="number">-1</span>][j<span class="number">-1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a=(tracback(nums)<span class="number">-1</span>)%mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">combination</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>,ans2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=x;i&gt;=x-y+<span class="number">1</span>;i--)&#123;</span><br><span class="line">            ans=ans*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=y;i++) ans2=ans2*i;</span><br><span class="line">        <span class="keyword">return</span> ans/ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">tracback</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">0</span>]) &#123;</span><br><span class="line">                n++;</span><br><span class="line">                q.push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                m++;</span><br><span class="line">                p.push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> tracback(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n!=<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> tracback(q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=n;</span><br><span class="line">            n=m;</span><br><span class="line">            m=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ad=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mm=m;</span><br><span class="line">        ad=com[n+m][m];</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> e=tracback(q)%mod;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> r=tracback(p)%mod;</span><br><span class="line">        ad=ad%mod;</span><br><span class="line">        ad = ad*e%mod;</span><br><span class="line">        ad = ad*r%mod;</span><br><span class="line">        <span class="keyword">return</span> ad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 取余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N皇后问题</title>
      <link href="2020/10/17/52.%20N%E7%9A%87%E5%90%8E%20II/"/>
      <url>2020/10/17/52.%20N%E7%9A%87%E5%90%8E%20II/</url>
      
        <content type="html"><![CDATA[<h4 id="52-N皇后-II"><a href="#52-N皇后-II" class="headerlink" title="52. N皇后 II"></a><a href="https://leetcode-cn.com/problems/n-queens-ii/">52. N皇后 II</a></h4><p><em>n</em> 皇后问题研究的是如何将 <em>n</em> 个皇后放置在 <em>n</em>×<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="img"></p><p>上图为 8 皇后问题的一种解法。</p><p>给定一个整数 <em>n</em>，返回 <em>n</em> 皇后不同的解决方案的数量。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 4 皇后问题存在如下两个不同的解法。</span><br><span class="line">[</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; 解法 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; 解法 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>思路</p><p>经典问题，为优化空间可使用位运算。我们遍历每行，又因每行需满足的条件都相同：</p><ol><li><p>与前面行不能同列</p></li><li><p>与前面行不能同斜</p></li></ol><p>第一个条件只需将当前行与之前行进行与运算即可解决。(now &amp; pre ? true : false)</p><p>第二个条件观察可发现有两种情况，分别为倾斜率相反的时候。两种情况都满足:</p></li></ul><p>$$<br>|X_{now}-X_{pre}|==|Y_{now}-Y_{pre}|<br>$$</p><p>​        因此遍历每行的操作可以用回溯来完成。</p><ul><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> N;<span class="comment">//n</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xx;<span class="comment">//记录每行选中点的横坐标</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//等最终抵达终点数，及所有可行的组合数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tracback</span><span class="params">(<span class="keyword">int</span> state,<span class="keyword">int</span> d)</span></span>&#123;<span class="comment">//状态和当前遍历行数或深度</span></span><br><span class="line">        <span class="keyword">if</span>(d==N)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            <span class="keyword">if</span>(s&amp;state) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> dd=d<span class="number">-1</span>,jud=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//依次遍历之前行，若符合这两种情况则跳过。</span></span><br><span class="line">            <span class="keyword">while</span>(dd&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(i-xx[dd])==<span class="built_in">abs</span>(d-dd))&#123;</span><br><span class="line">                    jud=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dd--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(jud) <span class="keyword">continue</span>;</span><br><span class="line">            xx[d]=i;</span><br><span class="line">            tracback(s|state,d+<span class="number">1</span>);</span><br><span class="line">            xx[d]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        N=n;</span><br><span class="line">        xx=<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            xx[<span class="number">0</span>]=i;</span><br><span class="line">            tracback(s,<span class="number">1</span>);</span><br><span class="line">            xx[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使陆地分离的最少天数</title>
      <link href="2020/10/16/1568.%20%E4%BD%BF%E9%99%86%E5%9C%B0%E5%88%86%E7%A6%BB%E7%9A%84%E6%9C%80%E5%B0%91%E5%A4%A9%E6%95%B0/"/>
      <url>2020/10/16/1568.%20%E4%BD%BF%E9%99%86%E5%9C%B0%E5%88%86%E7%A6%BB%E7%9A%84%E6%9C%80%E5%B0%91%E5%A4%A9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1568-使陆地分离的最少天数"><a href="#1568-使陆地分离的最少天数" class="headerlink" title="1568. 使陆地分离的最少天数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/">1568. 使陆地分离的最少天数</a></h4><p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1</code> （陆地）连接形成。</p><p>如果 <strong>恰好只有一座岛屿</strong> ，则认为陆地是 <strong>连通的</strong> ；否则，陆地就是 <strong>分离的</strong> 。</p><p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p><p>返回使陆地分离的最少天数。</p><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/1926_island.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[0,1,1,0],[0,1,1,0],[0,0,0,0]]</span><br><span class="line">输出：2</span><br><span class="line">解释：至少需要 2 天才能得到分离的陆地。</span><br><span class="line">将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,1]]</span><br><span class="line">输出：2</span><br><span class="line">解释：如果网格中都是水，也认为是分离的 ([[1,1]] -&gt; [[0,0]])，0 岛屿。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,0,1,0]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,1,0,1,1],</span><br><span class="line">             [1,1,1,1,1],</span><br><span class="line">             [1,1,0,1,1],</span><br><span class="line">             [1,1,0,1,1]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><hr><ul><li>思路</li></ul><p>根据题意不难看出答案就三种可能0、1、2.</p><p>1、输出为0时第一时间想到的是并查集，只要将每块陆地作为一个点，共用m*n个点，因为n和m的值都比较小最大只有30，所有可以考虑这种方法。</p><p>2、输出为1、2时的情况直接暴力求解。我们只需模拟1的情况便可判断2的情况。及依次遍历所有的陆地，分别模拟去当前点后的并查集集合数量，同上述1方法只是这里返回为1。若无返回则返回为2。</p><p>其实这里说的方法2就是一种暴力枚举的方法，仅因数据量小才可用。更优的方法是考虑割点数量。割点数若为1则输出为1，大于1则输出2。用这种方法我们只需dfs遍历一次所有点的即可。常用的判断割点数量的方法可以选用targan算法。</p><ul><li><p>代码</p><p>这里是我当时写的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,m,N;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p[u] == u ? u : p[u] = find(p[u]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jud</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; grid)</span></span>&#123;</span><br><span class="line">        p = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!grid[i][j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> u = i * m + j;</span><br><span class="line">                <span class="keyword">if</span> (p[u] == <span class="number">-1</span>)</span><br><span class="line">                    p[u] = u;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> ni = i + dy[k], nj = j + dx[k];</span><br><span class="line">                    <span class="keyword">if</span> (ni &lt; <span class="number">0</span> || ni &gt;= n || nj &lt; <span class="number">0</span> || nj &gt;= m || !grid[ni][nj])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">int</span> v = ni * m + nj;</span><br><span class="line">                    <span class="keyword">if</span> (p[v] == <span class="number">-1</span>)</span><br><span class="line">                        p[v] = v;</span><br><span class="line">                    <span class="keyword">int</span> pu = find(u), pv = find(v);</span><br><span class="line">                    <span class="keyword">if</span> (pu == pv) <span class="keyword">continue</span>;</span><br><span class="line">                    p[pv] = pu;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">int</span> components = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i] != <span class="number">-1</span> &amp;&amp; i == find(i))</span><br><span class="line">                components++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (components &gt;= <span class="number">2</span> || components == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        n = grid.size(), m = grid[<span class="number">0</span>].size();</span><br><span class="line">        N = n * m;</span><br><span class="line">        <span class="keyword">if</span>(jud(grid)==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j])&#123;</span><br><span class="line">                    grid[i][j]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(jud(grid)==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    grid[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>targan模板记录一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TarjanSCC</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; low, dfn, fa;</span><br><span class="line">    <span class="keyword">int</span> timestamp = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Tarjan 算法求解割点模板</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getCuttingVertex</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> parent, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        low[u] = dfn[u] = ++timestamp;</span><br><span class="line">        fa[u] = parent;</span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> iscv = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                ++child;</span><br><span class="line">                getCuttingVertex(v, u, ans);</span><br><span class="line">                low[u] = min(low[u], low[v]);</span><br><span class="line">                <span class="keyword">if</span> (!iscv &amp;&amp; parent != <span class="number">-1</span> &amp;&amp; low[v] &gt;= dfn[u]) &#123;</span><br><span class="line">                    ans.push_back(u);</span><br><span class="line">                    iscv = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">                low[u] = min(low[u], dfn[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!iscv &amp;&amp; parent == <span class="number">-1</span> &amp;&amp; child &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            ans.push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TarjanSCC(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; _edges): edges(_edges), n(_edges.size()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        low.assign(n, <span class="number">-1</span>);</span><br><span class="line">        dfn.assign(n, <span class="number">-1</span>);</span><br><span class="line">        fa.assign(n, <span class="number">-1</span>);</span><br><span class="line">        timestamp = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// cutting vertices 存储割点</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cvs;</span><br><span class="line">        <span class="comment">// connected components count 存储连通分量个数</span></span><br><span class="line">        <span class="keyword">int</span> cccnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                ++cccnt;</span><br><span class="line">                getCuttingVertex(i, <span class="number">-1</span>, cvs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果连通分量个数大于 1，答案为 0</span></span><br><span class="line">        <span class="keyword">if</span> (cccnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果存在割点，答案为 1</span></span><br><span class="line">        <span class="keyword">if</span> (!cvs.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> targan </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计子树中城市之间最大距离</title>
      <link href="2020/10/14/1617.%20%E7%BB%9F%E8%AE%A1%E5%AD%90%E6%A0%91%E4%B8%AD%E5%9F%8E%E5%B8%82%E4%B9%8B%E9%97%B4%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/"/>
      <url>2020/10/14/1617.%20%E7%BB%9F%E8%AE%A1%E5%AD%90%E6%A0%91%E4%B8%AD%E5%9F%8E%E5%B8%82%E4%B9%8B%E9%97%B4%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1617-统计子树中城市之间最大距离"><a href="#1617-统计子树中城市之间最大距离" class="headerlink" title="1617. 统计子树中城市之间最大距离"></a><a href="https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/">1617. 统计子树中城市之间最大距离</a></h4><p>给你 <code>n</code> 个城市，编号为从 <code>1</code> 到 <code>n</code> 。同时给你一个大小为 <code>n-1</code> 的数组 <code>edges</code> ，其中 <code>edges[i] = [ui, vi]</code> 表示城市 <code>ui</code> 和 <code>vi</code> 之间有一条双向边。题目保证任意城市之间只有唯一的一条路径。换句话说，所有城市形成了一棵 <strong>树</strong> 。</p><p>一棵 <strong>子树</strong> 是城市的一个子集，且子集中任意城市之间可以通过子集中的其他城市和边到达。两个子树被认为不一样的条件是至少有一个城市在其中一棵子树中存在，但在另一棵子树中不存在。</p><p>对于 <code>d</code> 从 <code>1</code> 到 <code>n-1</code> ，请你找到城市间 <strong>最大距离</strong> 恰好为 <code>d</code> 的所有子树数目。</p><p>请你返回一个大小为 <code>n-1</code> 的数组，其中第 <code>d</code> 个元素（<strong>下标从 1 开始</strong>）是城市间 <strong>最大距离</strong> 恰好等于 <code>d</code> 的子树数目。</p><p><strong>请注意</strong>，两个城市间距离定义为它们之间需要经过的边的数目。</p><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/11/p1.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 4, edges &#x3D; [[1,2],[2,3],[2,4]]</span><br><span class="line">输出：[3,4,0]</span><br><span class="line">解释：</span><br><span class="line">子树 &#123;1,2&#125;, &#123;2,3&#125; 和 &#123;2,4&#125; 最大距离都是 1 。</span><br><span class="line">子树 &#123;1,2,3&#125;, &#123;1,2,4&#125;, &#123;2,3,4&#125; 和 &#123;1,2,3,4&#125; 最大距离都为 2 。</span><br><span class="line">不存在城市间最大距离为 3 的子树。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 2, edges &#x3D; [[1,2]]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 3, edges &#x3D; [[1,2],[2,3]]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 15</code></li><li><code>edges.length == n-1</code></li><li><code>edges[i].length == 2</code></li><li><code>1 &lt;= ui, vi &lt;= n</code></li><li>题目保证 <code>(ui, vi)</code> 所表示的边互不相同。</li></ul><ul><li><p>思路</p><p>看到这道题应该就明白要用状压了。</p><p>针对所有点的不同选取状态state，我们应该对state进行如下思考：</p><ul><li>这些点能否构成连通图</li><li>我们该如何求出这些点的最大距离</li></ul><p>对于第一个问题，我一开始想到的是计算点的度，通过连通图的性质解决。当然也可以通过BFS判定。</p><p>第二个问题同样用dfs、bfs等都可以解决（因为n比较小）。</p></li><li><p>代码</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mapp;</span><br><span class="line">    <span class="keyword">int</span> maxx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> viss[<span class="number">16</span>];<span class="comment">//判断是否遍历过该点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=v[i];</span><br><span class="line">            <span class="keyword">if</span>(viss[x]) <span class="keyword">continue</span>;</span><br><span class="line">            viss[x]=<span class="number">1</span>;</span><br><span class="line">            dfs(mapp[x],step+<span class="number">1</span>);</span><br><span class="line">            viss[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v.size()==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(step&gt;maxx) maxx=step;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countSubgraphsForEachDiameter</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=edges.size();</span><br><span class="line">        <span class="keyword">int</span> state=<span class="number">1</span>&lt;&lt;m;</span><br><span class="line">        <span class="keyword">int</span> num[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> vis[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;state;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">            maxx=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="built_in">memset</span>(viss,<span class="number">0</span>,<span class="keyword">sizeof</span>(viss));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) mapp[j].clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                    vis[edges[j][<span class="number">0</span>]]++;</span><br><span class="line">                    vis[edges[j][<span class="number">1</span>]]++;</span><br><span class="line">                    mapp[edges[j][<span class="number">0</span>]].push_back(edges[j][<span class="number">1</span>]);</span><br><span class="line">                    mapp[edges[j][<span class="number">1</span>]].push_back(edges[j][<span class="number">0</span>]);</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[k]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    ans+=(vis[k]<span class="number">-1</span>);<span class="comment">//一个节点每连入一条边他的值就加一，则一个连通图他的所有点的值应该等于x-1；（想象有一条边，我们一次次往里面加点的情况不难发现这一性质）</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans!=(x<span class="number">-1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[k]==<span class="number">1</span>)&#123;<span class="comment">//这里只考虑出口为1的点</span></span><br><span class="line">                        viss[k]=<span class="number">1</span>;</span><br><span class="line">                        dfs(mapp[k],<span class="number">0</span>);</span><br><span class="line">                        viss[k]=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                num[maxx]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            v.push_back(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压 </tag>
            
            <tag> 连通图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有序矩阵中第K小的元素</title>
      <link href="2020/10/14/378.%20%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>2020/10/14/378.%20%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="378-有序矩阵中第K小的元素"><a href="#378-有序矩阵中第K小的元素" class="headerlink" title="378. 有序矩阵中第K小的元素"></a><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/">378. 有序矩阵中第K小的元素</a></h4><p>给定一个 <em><code>n x n</code></em> 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第 <code>k</code> 小的元素。<br> 请注意，它是排序后的第 <code>k</code> 小元素，而不是第 <code>k</code> 个不同的元素。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matrix &#x3D; [</span><br><span class="line">   [ 1,  5,  9],</span><br><span class="line">   [10, 11, 13],</span><br><span class="line">   [12, 13, 15]</span><br><span class="line">],</span><br><span class="line">k &#x3D; 8,</span><br><span class="line"></span><br><span class="line">返回 13。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong><br> 你可以假设 k 的值永远是有效的，<code>1 ≤ k ≤ n2 </code>。</p><ul><li>思路</li></ul><p>直接暴力的做法就是对矩阵中所有的数进行排序。再从左到右遍历即可得第k小元素。或者我们还可以通过优先队列对暴力方法进行一个优化。但我们知道这样做的时间复杂度任然是很高的，原因是没有充分利用题目所给的已知信息。</p><p>根据题目所给信息，在这个矩阵中有很大一部分是已经排过序了的。且matrix[0][0]与matrix[size-1][size-1]分别为矩阵中的最小、最大值用left、right分别代指。假定我们随机的从[left,right]这个区间内取一个数设为m，那么我们是否可以通过当前矩阵的性质轻松的得到这个数m为第几小的数。我们只需要在矩阵中找到小于等于m的数的个数，将&lt;=m的个数设为count。则m为第count+1小的数。</p><p>根据这个思路我们是不是只要确定我们随机取得的这个数是否在这个矩阵中。而确定的这个过程实际就是一种查找。我们采用二分查找法来确定这个数。此时就是根据值域查找的二分法。</p><ul><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=matrix.size();</span><br><span class="line">        <span class="keyword">int</span> left=matrix[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//取最小</span></span><br><span class="line">        <span class="keyword">int</span> right=matrix[n<span class="number">-1</span>][n<span class="number">-1</span>];<span class="comment">//取最大</span></span><br><span class="line">        <span class="keyword">int</span> mid,count=<span class="number">0</span>;<span class="comment">//mid为二分，count为小于等于mid的个数</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">0</span>,y=n<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//找寻矩阵中小于等于mid的数的个数。这里利用到了该矩阵已排序的性质进行了优化。</span></span><br><span class="line">             <span class="keyword">while</span>(x &lt; n &amp;&amp; y &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[y][x] &lt;= mid)&#123;</span><br><span class="line">                    count += y + <span class="number">1</span>;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    y--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=count)&#123;<span class="comment">//这里我们优先考虑平分&lt;=的情况，也就是k==count时我们选择左半边</span></span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两两交换链表中的节点</title>
      <link href="2020/10/13/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2020/10/13/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><hr><p>一开始看到这道题没有想到递归，迭代想了好久才有思路。写完才发现递归应该更简单才对。</p><p><strong>递归</strong></p><ul><li><p>思路</p><pre><code>考虑两个节点以上情况。我们首先可以确定的是第二个节点的下一个节点是第一个节点，而第一个节点的下一个节点是不确定的，但我们可以通过用同样的方法与后面符合条件的节点连接，这个思路下就用到了递归。</code></pre><p>代码</p></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* nex=head-&gt;next;</span><br><span class="line">            head-&gt;next=swapPairs(nex-&gt;next);</span><br><span class="line">            nex-&gt;next=head;</span><br><span class="line">            <span class="keyword">return</span> nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>迭代</strong></p><ul><li><p>思路</p><pre><code>这里主要用到了哨兵指针，及头指针。它用来作为迭代的对象保证循环按我想的的顺序进行。</code></pre></li><li><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        istNode* node = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);</span><br><span class="line">        ListNode* q=node;</span><br><span class="line">        <span class="keyword">for</span>(ListNode* e=q;e-&gt;next!=<span class="literal">NULL</span>&amp;&amp;e-&gt;next-&gt;next!=<span class="literal">NULL</span>;)&#123;</span><br><span class="line">            ListNode* node1=e-&gt;next-&gt;next;</span><br><span class="line">            ListNode* node2=e-&gt;next;</span><br><span class="line">            e-&gt;next=node1;</span><br><span class="line">            node2-&gt;next=node1-&gt;next;</span><br><span class="line">            node1-&gt;next=node2;</span><br><span class="line">            e=node2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保证图可完全遍历</title>
      <link href="2020/10/13/1579.%20%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/"/>
      <url>2020/10/13/1579.%20%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h4 id="1579-保证图可完全遍历"><a href="#1579-保证图可完全遍历" class="headerlink" title="1579. 保证图可完全遍历"></a><a href="https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/">1579. 保证图可完全遍历</a></h4><p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3 种类型的边：</p><ul><li>类型 1：只能由 Alice 遍历。</li><li>类型 2：只能由 Bob 遍历。</li><li>类型 3：Alice 和 Bob 都可以遍历。</li></ul><p>给你一个数组 <code>edges</code> ，其中 <code>edges[i] = [typei, ui, vi]</code> 表示节点 <code>ui</code> 和 <code>vi</code> 之间存在类型为 <code>typei</code> 的双向边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。</p><p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex1.png" alt="img"></p><p>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br>输出：2<br>解释：如果删除 [1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。</p><p>示例 2：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex2.png" alt="img"></p><p>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br>输出：0<br>解释：注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。</p><p>示例 3：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/09/06/5510ex3.png" alt="img"></p><p>输入：n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br>输出：-1<br>解释：在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。</p><p>提示：</p><pre><code>1 &lt;= n &lt;= 10^51 &lt;= edges.length &lt;= min(10^5, 3 * n * (n-1) / 2)edges[i].length == 31 &lt;= edges[i][0] &lt;= 31 &lt;= edges[i][1] &lt; edges[i][2] &lt;= n所有元组 (typei, ui, vi) 互不相同</code></pre><ul><li>思路：<pre><code> 因为第三种类型是通用的，所以优先考虑第三类型下的并查集情况。若出现多余边则该边必然冗余； 第三种类型考虑完后，同样以并查集的方法判断剩下两种类型边。因为n个点至少有n-1条边，若并查集中点的个数小于n-1则返回-1；</code></pre></li><li>代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">100001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=f[x]) f[x]=find(f[x]);</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxNumEdgesToRemove</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; mapp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edges.size();i++)&#123;</span><br><span class="line">            mapp[edges[i][<span class="number">0</span>]].push_back(<span class="built_in">make_pair</span>(edges[i][<span class="number">1</span>],edges[i][<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> da=<span class="number">0</span>;<span class="comment">//可以删除的边数</span></span><br><span class="line">        <span class="keyword">int</span> ans1=<span class="number">0</span>;<span class="comment">//第一、第三类型边能连接最多点的边数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">3</span>].size();i++)&#123;<span class="comment">//遍历第三类型边</span></span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">3</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">3</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans1++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;<span class="comment">//第三类型的多余边必然舍去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">1</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">1</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">1</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans1++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">3</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">3</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">3</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans2++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mapp[<span class="number">2</span>].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(mapp[<span class="number">2</span>][i].first);</span><br><span class="line">            <span class="keyword">int</span> y=find(mapp[<span class="number">2</span>][i].second);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                ans2++;</span><br><span class="line">                f[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                da++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans1&lt;n<span class="number">-1</span>||ans2&lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> da;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络入门</title>
      <link href="2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01/"/>
      <url>2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><strong>教科书：《计算机网络》谢希仁</strong></p><p>当前正处于大三阶段，刚开始学习计算机网络，发现这本书有点难啃，上课也多是一知半解。因此特写下这一系列文章做知识梳理。前面是我随着课程进度写下的一些要点，其中多是课本上的内容。后面我可能会加入二刷后的一些个人理解。</p><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><ul><li><p>核心内容</p><ol><li><p>互联网边缘部分和核心部分的作用，其中包含分组交换的概念。</p><ul><li><p>边缘部分：所有连接在互联网上的主机，用户可以直接使用；</p></li><li><p>核心部分：由大量的网络和连接这些网络的路由器组成，为边缘部分的主机提供服务。</p></li><li><p>交换：</p><ul><li><p>电路交换</p><p>​    电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p></li><li><p>报文交换</p><p>​    报文交换用于邮局通信系统，邮局接收到一份报文之后，先存储下来，然后把相同目的地的报文一起转发到下一个目的地，这个过程就是存储转发过程。</p></li><li><p>分组交换</p><p>​    路由器是实现分组交换的关键构建，其任务是转发收到的分组，是网络核心部分最重要的功能。分组交换也使用了存储转发技术，但是转发的是分组而不是报文。把整块数据称为一个报文，由于一个报文可能很长，需要先进行切分，来满足分组能处理的大小。在每个切分的数据前面加上首部之后就成为了分组，首部包含了目的地址和源地址等控制信息。</p></li></ul></li></ul></li><li><p>计算机网络的性能指标。</p><ul><li><p>速率</p><p>​    速率是计算机网络中最重要的一个性能，单位：bit/s 。网络技术中的速率指的是数据的传送速率，同时也称为数据率或比特率。实际提到速率时，往往指的是它的额定速率而非网络上实际运行时的速率。</p></li><li><p>带宽</p><p>​    (1)、原先的通信领域，带宽就是指某个信号的频道宽度，单位：赫。但如今，它表示的是某信道允许通过的信号频道范围。</p><p>​    (2)、计算机网络中，带宽用来表示网络中某通道传送数据的能力。它指的是单位时间内网络内某信道所能通过的“最高数据率”。单位：bit/s 。</p></li><li><p>吞吐量</p><p>​    吞吐量表示单位时间内通过某个网络（信道或接口）的实际数据量。</p></li><li><p>时延</p><p>​    时延是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。他也称为延迟或迟延。</p><p>​    (1)、发送时延：主机或路由器发送数据帧所需时间。</p><p>​    (2)、传播时延：电磁波在信道中传播一定距离所需的时间。</p><p>有他们的定义不难看出如下公式：<br>$$<br>传播时延=\frac{信道时延(m)}{电磁波在信道上的传播速率(m/s)}<br>$$</p><p>$$<br>发送时延=\frac{数据帧长度(bit)}{发送速率(bit/s)}<br>$$</p><p>​    (3)、处理时延：主机或路由器收到分组时进行处理所需要的时间，例如分析首部，从分组中提取数据部分等。</p><p>​    (4)、排队时延：分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。</p></li><li><p>时延带宽积</p><p>​    直接上公式：<br>$$<br>时延带宽积=传播时延\times 带宽<br>$$</p></li><li><p>往返时间RTT</p><p>​    及双向交互一次所需时间。</p></li></ul></li><li><p>计算机网络的分层次体系结构，包含协议和服务的概念。</p><ul><li><p>七层协议</p><ol><li>表示层：信息的语法语义以及它们的关联，如加密解密、转换翻译、压缩解压缩；</li><li>会话层：不同机器上的用户之间建立及管理会话。</li></ol><p>另五层与下述作用类似。</p></li><li><p>五层协议</p><ol><li>应用层：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等。数据单位为报文。</li><li>运输层：提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议  UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。</li><li>网络层：为主机之间提供服务，而不是像运输层协议那样是为主机中的进程提供服务。网络层把运输层产生的报文段或者用户数据报封装成分组来进行传输。</li><li>数据链路层：网络层针对的还是主机之间，而主机之间可以有很多链路，链路层协议就是为相邻结点之间提供服务。数据链路层把网络层传来的分组封装成帧。</li><li>物理层：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使物理层上的数据链路层感觉不到这些差异。</li></ol></li><li><p>数据在各层之间的传递过程</p><p>​    在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要运输层和应用层。</p></li><li><p>TCP/IP 体系结构</p><p>​    它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p><p>现在的 TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p><p>TCP/IP 协议族是一种沙漏形状，中间小两边大，IP 协议在其中占用举足轻重的地位。</p></li></ul></li></ol></li></ul><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><ol><li><p>物理层的任务</p><ul><li><p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是具体的传输媒体。</p></li><li><p>物理层的主要任务主要被描述为与传输媒体接口有关的一些特性，如下:</p><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul></li></ul></li><li><p>几种常用的信道复用技术</p><ul><li><p>频分复用：频分复用的所有用户在相同的时间占用不同的频率带宽资源。</p></li><li><p>时分复用：时分复用的所有用户在不同的时间占用相同的频率带宽资源。</p></li><li><p>统计时分复用：统计时分复用是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成时分复用帧然后发送。</p></li><li><p>波分复用：光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p></li><li><p>码分复用：码分复用需要发送的数据量为原先的 m 倍。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。不同用户码片(或反码)正交，同一用户点积为0。</p></li></ul></li><li><p>几种常用的宽带接入技术，主要是ADSL和FTTx</p><ul><li>ADSL:非对称数字用户线ADSL技术是用数字技术对现有模拟电话用户线进行改造。</li><li>FTTx: 光纤到户。</li></ul></li></ol><h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><ol><li><p>数据链路层的点对点信道和传播信道的特点，以及这两种信道所使用的的协议(ppp协议以及CSMA/CD协议)的特点</p><ul><li><p>点对点信道：采用一对一、点对点通信。</p></li><li><p>传播信道：采用一对多的光波通信。因所连接的主机数量过多，所以必须使用专用的共享信道协议来协调这些主机的数据发送。</p></li><li><p>ppp协议：互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议就是用户计算机和 ISP 进行通信时所使用的数据链路层协议。在 PPP 的帧中，F 字段为帧的定界符，A 和 C 暂时没有意义。FCS 是使用 CRC 的检验序列。信息部分的长度不超过 1500。</p><table><thead><tr><th></th><th>7E</th><th>FF</th><th>03</th><th>协议</th><th>信息</th><th>FCS</th><th>7E</th></tr></thead><tbody><tr><td>字节</td><td>1</td><td>1</td><td>1</td><td>2</td><td>&lt;=1500</td><td>2</td><td>1</td></tr></tbody></table></li><li><p>CSMA/CD协议：在广播信道上，同一时间只能允许一台计算机发送数据。CSMA/CD 表示载波监听多点接入 / 碰撞检测。</p><p><strong>多点接入</strong>：说明这是总线型网络，许多计算机以多点的方式连接到总线上。<strong>载波监听</strong>：每个站都必须不停地检听信道。在发送前，如果检听信道正在使用，就必须等待。<strong>碰撞检测</strong>：在发送中，如果检听信道已有其它站正在发送数据，就表示发生了碰撞。虽然每一个站在发送数据之前都已经检听信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</p><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 <strong>争用期</strong>。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 <strong>截断二进制指数退避算法</strong> 来确定，从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p></li></ul></li><li><p>数据链路层的三个基本问题：封装成帧、透明传输、差错检测。</p><ul><li>封装成帧：将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。</li><li>透明传输：透明表示一个实际存在的事物看起来好像不存在一样。帧中有首部和尾部，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据中出现首部尾部相同的内容前面插入转义字符，如果需要传输的内容正好就是转义字符，那么就在转义字符前面再加个转义字符，在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</li><li>差错检测：目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错，注意未解决传输差错。</li></ul></li><li><p>以太网MAC层的硬件地址。</p></li><li><p>适配器、转发器、集线器、网桥、以太网交换机的作用以及使用场合。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="2020/10/10/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001/"/>
      <url>2020/10/10/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h2 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h2><ol><li>并查集</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>边集合</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> a, b, w;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge&amp; e) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>set集合<br>set<int> s;<br>自带upper_bound(num) //找到大于num的数</p></li><li><p>__builtin_clz(n)<br>返回n前导0的个数</p></li><li><p>精度问题（考虑相等判别情况）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;  <span class="comment">//一般这样子就够，但有时具体题目要考虑是否要更小的 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a-b) &lt; EPS)  <span class="comment">//判断是否相等 </span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b+EPS)   <span class="comment">// 判断a是否大于b，因为大的肯定大，所以即使你小的加上，还是会更大    </span></span><br></pre></td></tr></table></figure></li><li><p>位运算注意括号（位优先级低）<br>特别注意在比大小、加减这些情况时。</p></li><li><p>priority_queue 优先队列 默认最大堆优先；<br>priority_queue&lt;pair&lt;double,int&gt;&gt; p;</p></li><li><p>线段树维护</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn*<span class="number">4</span>], A[maxn];</span><br><span class="line"><span class="keyword">int</span> lazy[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r ,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        sum[rt*<span class="number">2</span>] += lazy[rt]*(m-l+<span class="number">1</span>);</span><br><span class="line">        sum[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt]*(r-m);</span><br><span class="line">        lazy[rt*<span class="number">2</span>] += lazy[rt];</span><br><span class="line">        lazy[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt];</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[rt*<span class="number">2</span>] + sum[rt*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == l) &#123;</span><br><span class="line">        sum[rt] += c;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> Update(L, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans += Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans += Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">LL sum[maxn*<span class="number">4</span>],lazy[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> A[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> l ,<span class="keyword">int</span> r ,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        sum[rt*<span class="number">2</span>] += lazy[rt]*(m-l+<span class="number">1</span>);</span><br><span class="line">        sum[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt]*(r-m);</span><br><span class="line">        lazy[rt*<span class="number">2</span>] += lazy[rt];</span><br><span class="line">        lazy[rt*<span class="number">2</span>+<span class="number">1</span>] += lazy[rt];</span><br><span class="line">        lazy[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    sum[rt] = sum[rt*<span class="number">2</span>] + sum[rt*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">        sum[rt] = A[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    Build(l, m, rt*<span class="number">2</span>);</span><br><span class="line">    Build(m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        lazy[rt] += c;</span><br><span class="line">        sum[rt]+=(r-l+<span class="number">1</span>)*c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) Update(L,R, c, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m) Update(L,R, c, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ans += Query(L, R, l, m, rt*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; m) ans += Query(L, R, m+<span class="number">1</span>, r, rt*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b,d;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, A + i);</span><br><span class="line">        Build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Query(a, b, <span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">                Update(a,b,d, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>计算子序列和问题时考虑01背包（完全NP）</p><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h4><p>给定一个<strong>只包含正整数</strong>的<strong>非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><ol><li>每个数组中的元素不会超过 100</li><li>数组的大小不会超过 200</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>,a[<span class="number">211</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">201</span>][<span class="number">20001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=sum/<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;nums[i])&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j]||dp[i<span class="number">-1</span>][j-nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[nums.size()<span class="number">-1</span>][sum/<span class="number">2</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
